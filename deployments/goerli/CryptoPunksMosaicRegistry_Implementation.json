{
  "address": "0xF9c5F27A0512D6FcceefB9BD1947c5eFBF150460",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "BidAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "BidProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "BidRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "BidRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "BidWon",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "monoOwner",
          "type": "address"
        }
      ],
      "name": "MonoRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "OriginalSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BID_ACCEPTANCE_THRESHOLD_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BID_EXPIRY",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newBidId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "totalClaimableCount",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "purchasePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReservePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxReservePrice",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "finalizeAcceptedBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "finalizeProposedBid",
      "outputs": [
        {
          "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.BidState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "name": "fromMosaicId",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "uint64",
          "name": "monoId",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "getAverageReservePriceProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "average",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestOriginalId",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "latestOriginalId",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "uint64",
          "name": "monoId",
          "type": "uint64"
        }
      ],
      "name": "getMono",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mosaicId",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "presetId",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "proposedReservePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.MonoBidResponse",
                  "name": "bidResponse",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "bidId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct UsingCryptoPunksMosaicRegistryStructs.MonoGovernanceOptions",
              "name": "governanceOptions",
              "type": "tuple"
            }
          ],
          "internalType": "struct UsingCryptoPunksMosaicRegistryStructs.Mono",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "name": "getMonoLifeCycle",
      "outputs": [
        {
          "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.MonoLifeCycle",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "getOriginal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint192",
              "name": "id",
              "type": "uint192"
            },
            {
              "internalType": "uint256",
              "name": "punkId",
              "type": "uint256"
            },
            {
              "internalType": "uint96",
              "name": "totalMonoSupply",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "claimedMonoCount",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "purchasePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReservePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxReservePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "metadataBaseUri",
              "type": "string"
            },
            {
              "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.OriginalStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "activeBidId",
              "type": "uint256"
            }
          ],
          "internalType": "struct UsingCryptoPunksMosaicRegistryStructs.Original",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "name": "getOriginalFromMosaicId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint192",
              "name": "id",
              "type": "uint192"
            },
            {
              "internalType": "uint256",
              "name": "punkId",
              "type": "uint256"
            },
            {
              "internalType": "uint96",
              "name": "totalMonoSupply",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "claimedMonoCount",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "purchasePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReservePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxReservePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "metadataBaseUri",
              "type": "string"
            },
            {
              "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.OriginalStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "activeBidId",
              "type": "uint256"
            }
          ],
          "internalType": "struct UsingCryptoPunksMosaicRegistryStructs.Original",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "getPerMonoResaleFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "perMonoResaleFund",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "grantMintAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "hasOngoingBid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "museumAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "isBidAcceptable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "museum",
      "outputs": [
        {
          "internalType": "contract CryptoPunksMuseum",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "proposeReservePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "proposeReservePriceBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "refundBidDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "refundOnSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalResaleFund",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        },
        {
          "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.MonoBidResponse",
          "name": "response",
          "type": "uint8"
        }
      ],
      "name": "respondToBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setInvalidMetadataUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setMetadataBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "presetId",
          "type": "uint8"
        }
      ],
      "name": "setPresetId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "sumBidResponses",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "yes",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "no",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "sumReservePriceProposals",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "validProposalCount",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "priceSum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "toBidId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "uint64",
          "name": "monoId",
          "type": "uint64"
        }
      ],
      "name": "toMosaicId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfdaf4b0186411023a59c97a1e76bdb76fb65deeaf77fc892ab3f1979ecc9b442",
  "receipt": {
    "to": null,
    "from": "0x9675e17451FEB900280FC84D2eE44D114f629C96",
    "contractAddress": "0xF9c5F27A0512D6FcceefB9BD1947c5eFBF150460",
    "transactionIndex": 49,
    "gasUsed": "5132879",
    "logsBloom": "0x
    "blockHash": "0x97e23d166bc7f5f28dcc1e815e2062f8a93e254e541dcc18320e8348f3ef9df0",
    "transactionHash": "0xfdaf4b0186411023a59c97a1e76bdb76fb65deeaf77fc892ab3f1979ecc9b442",
    "logs": [],
    "blockNumber": 8640489,
    "cumulativeGasUsed": "11186897",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "620a61277144b73a5b957629f2244a3d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"BidProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"BidRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"BidRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"BidWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"monoOwner\",\"type\":\"address\"}],\"name\":\"MonoRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"OriginalSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BID_ACCEPTANCE_THRESHOLD_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BID_EXPIRY\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newBidId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"totalClaimableCount\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReservePrice\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"finalizeAcceptedBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"finalizeProposedBid\",\"outputs\":[{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.BidState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"name\":\"fromMosaicId\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"monoId\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"getAverageReservePriceProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"average\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestOriginalId\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"latestOriginalId\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"monoId\",\"type\":\"uint64\"}],\"name\":\"getMono\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"presetId\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposedReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.MonoBidResponse\",\"name\":\"bidResponse\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"internalType\":\"struct UsingCryptoPunksMosaicRegistryStructs.MonoGovernanceOptions\",\"name\":\"governanceOptions\",\"type\":\"tuple\"}],\"internalType\":\"struct UsingCryptoPunksMosaicRegistryStructs.Mono\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"name\":\"getMonoLifeCycle\",\"outputs\":[{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.MonoLifeCycle\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"getOriginal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint192\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"punkId\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"totalMonoSupply\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"claimedMonoCount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataBaseUri\",\"type\":\"string\"},{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.OriginalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"activeBidId\",\"type\":\"uint256\"}],\"internalType\":\"struct UsingCryptoPunksMosaicRegistryStructs.Original\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"name\":\"getOriginalFromMosaicId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint192\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"punkId\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"totalMonoSupply\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"claimedMonoCount\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataBaseUri\",\"type\":\"string\"},{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.OriginalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"activeBidId\",\"type\":\"uint256\"}],\"internalType\":\"struct UsingCryptoPunksMosaicRegistryStructs.Original\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"getPerMonoResaleFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"perMonoResaleFund\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"grantMintAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"hasOngoingBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"museumAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"isBidAcceptable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museum\",\"outputs\":[{\"internalType\":\"contract CryptoPunksMuseum\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"proposeReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"proposeReservePriceBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"refundBidDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"refundOnSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalResaleFund\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"},{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.MonoBidResponse\",\"name\":\"response\",\"type\":\"uint8\"}],\"name\":\"respondToBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setInvalidMetadataUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setMetadataBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"presetId\",\"type\":\"uint8\"}],\"name\":\"setPresetId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"sumBidResponses\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"yes\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"no\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"sumReservePriceProposals\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"validProposalCount\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"priceSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"toBidId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"monoId\",\"type\":\"uint64\"}],\"name\":\"toMosaicId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CryptoPunksMosaicRegistry.sol\":\"CryptoPunksMosaicRegistry\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363738363030373430363238\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x6633586ad4631f286525429122307d8a3943e4dd7a1feaa9a22a153f390f11a3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x5d3b8d9c4e7d247ee6e9b1fe63d09f3a92dc187db2e695b9962ad95212a09bb0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x055fe4c1e942d42899298a11a5501ed8757b5247d914f500d902fd308f4a169f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd8ee8c6932ff4e8c803593fd447340f9f7292211c2f6af9dab1249598634c3d4\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 /* firstTokenId */,\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x15e13a817dd991c8ae6952e5301517d41984ec348dab4cb2959bdef0f383154d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbd4b1ed8a7000a6a0e44e5b1460fcbbe27b11f437be9510f70f4163c890d937d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8c3779e8eb813ea61cc427ef6331ce26480fd3b3e50cd09693a5684c544f8a20\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6d6948edfc140a50d8124eb3f921aa630f70fcde4c9e340aa2e126de18dc642\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xef702737c98b0296899e4439c17c4a1c96b8dcef7e176805275e782612fce9c7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05d5d914a129f8a74b1cae41b212965882aed82683efc0888665c4b26cd60e54\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"src/CryptoPunksMosaicRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {ERC721Upgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {SafeCast} from \\\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\\\";\\nimport {Strings} from \\\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\\\";\\nimport {UUPSUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport \\\"./lib/BasisPoint.sol\\\";\\nimport \\\"./external/ICryptoPunksMarket.sol\\\";\\nimport \\\"./ICryptoPunksMosaicRegistry.sol\\\";\\nimport \\\"./CryptoPunksMuseum.sol\\\";\\nimport \\\"./CryptoPunksMosaicStorage.sol\\\";\\n\\n// TODO: Reconsider the ID scheme so that the same origin contract's same groups map to the same ID (contract, group) => (internal id)\\ncontract CryptoPunksMosaicRegistry is\\n    ICryptoPunksMosaicRegistry,\\n    ERC721Upgradeable,\\n    UUPSUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using SafeCast for uint256;\\n\\n    uint256 private constant MONO_ID_BITS = 64;\\n    uint256 private constant MONO_ID_BITMASK = (1 << (MONO_ID_BITS + 1)) - 1; // lower 64 bits\\n\\n    address private constant NO_BIDDER = address(0x0);\\n    uint40 public constant BID_EXPIRY = 604800;\\n    uint256 public constant BID_ACCEPTANCE_THRESHOLD_BPS = 5100;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    CryptoPunksMuseum public museum;\\n\\n    function initialize(address museumAddress) public initializer {\\n        __ERC721_init(\\\"CryptoPunks Mosaic\\\", \\\"PUNKSMOSAIC\\\");\\n        museum = CryptoPunksMuseum(museumAddress);\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(DEFAULT_ADMIN_ROLE, museumAddress);\\n    }\\n\\n    modifier onlyWhenActive() {\\n        require(\\n            address(museum) != address(0) && museum.isActive(),\\n            \\\"Museum must be active\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyActiveOriginal(uint192 originalId) {\\n        require(\\n            CryptoPunksMosaicStorage.get().originals[originalId].status ==\\n                OriginalStatus.Active,\\n            \\\"Not active\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMosaicOwner(uint256 mosaicId) {\\n        require(ownerOf(mosaicId) == msg.sender, \\\"Must own the Mosaic\\\");\\n        _;\\n    }\\n\\n    //\\n    // Core\\n    //\\n\\n    function create(\\n        uint256 punkId,\\n        uint64 totalClaimableCount,\\n        uint256 purchasePrice,\\n        uint256 minReservePrice,\\n        uint256 maxReservePrice\\n    )\\n        external\\n        override\\n        onlyWhenActive\\n        onlyRole(MINTER_ROLE)\\n        returns (uint192 originalId)\\n    {\\n        require(\\n            museum.cryptoPunksMarket().punkIndexToAddress(punkId) ==\\n                address(this),\\n            \\\"The contract must own the punk\\\"\\n        );\\n        originalId = ++CryptoPunksMosaicStorage.get().latestOriginalId;\\n        ++CryptoPunksMosaicStorage.get().nextMonoIds[originalId];\\n        CryptoPunksMosaicStorage.get().originals[originalId] = Original({\\n            id: originalId,\\n            punkId: punkId,\\n            totalMonoSupply: totalClaimableCount,\\n            claimedMonoCount: 0,\\n            purchasePrice: purchasePrice,\\n            minReservePrice: minReservePrice,\\n            maxReservePrice: maxReservePrice,\\n            status: OriginalStatus.Active,\\n            activeBidId: 0,\\n            metadataBaseUri: \\\"\\\"\\n        });\\n        return originalId;\\n    }\\n\\n    function mint(\\n        address contributor,\\n        uint192 originalId\\n    )\\n        external\\n        override\\n        onlyWhenActive\\n        onlyRole(MINTER_ROLE)\\n        returns (uint256 mosaicId)\\n    {\\n        require(\\n            CryptoPunksMosaicStorage.get().nextMonoIds[originalId] > 0,\\n            \\\"Original must be initialized first\\\"\\n        );\\n        uint64 monoId = CryptoPunksMosaicStorage.get().nextMonoIds[\\n            originalId\\n        ]++;\\n        mosaicId = toMosaicId(originalId, monoId);\\n        CryptoPunksMosaicStorage.get().monos[mosaicId] = Mono({\\n            mosaicId: mosaicId,\\n            presetId: 0,\\n            governanceOptions: MonoGovernanceOptions({\\n                proposedReservePrice: 0,\\n                bidResponse: MonoBidResponse.None,\\n                bidId: 0\\n            })\\n        });\\n        CryptoPunksMosaicStorage.get().originals[originalId].claimedMonoCount++;\\n        _safeMint(contributor, mosaicId);\\n\\n        return mosaicId;\\n    }\\n\\n    //\\n    // Design: Mosaic owners\\n    //\\n\\n    function setPresetId(\\n        uint256 mosaicId,\\n        uint8 presetId\\n    ) public onlyMosaicOwner(mosaicId) {\\n        Mono storage mono = CryptoPunksMosaicStorage.get().monos[mosaicId];\\n        mono.presetId = presetId;\\n    }\\n\\n    //\\n    // Governance: Mosaic owners\\n    //\\n\\n    function proposeReservePrice(\\n        uint256 mosaicId,\\n        uint256 price\\n    ) public onlyWhenActive onlyMosaicOwner(mosaicId) {\\n        // TODO: Check the bid state requirement\\n        //  and decide whether to allow reserve price proposals\\n        //  when there is an ongoing Bid already\\n        (uint192 originalId, ) = fromMosaicId(mosaicId);\\n        Original storage original = CryptoPunksMosaicStorage.get().originals[\\n            originalId\\n        ];\\n        require(\\n            original.minReservePrice <= price &&\\n                price <= original.maxReservePrice,\\n            \\\"Must be within the range\\\"\\n        );\\n        Mono storage mono = CryptoPunksMosaicStorage.get().monos[mosaicId];\\n        mono.governanceOptions.proposedReservePrice = price;\\n    }\\n\\n    function proposeReservePriceBatch(uint192 originalId, uint256 price) public onlyWhenActive {\\n        Original storage original = CryptoPunksMosaicStorage.get().originals[originalId];\\n        require(\\n            original.minReservePrice <= price &&\\n            price <= original.maxReservePrice,\\n            \\\"Must be within the range\\\"\\n        );\\n        uint64 nextMonoId = CryptoPunksMosaicStorage.get().nextMonoIds[\\n            originalId\\n        ];\\n        for (uint64 monoId = 1; monoId < nextMonoId; monoId++) {\\n            uint256 mosaicId = toMosaicId(originalId, monoId);\\n            if (_ownerOf(mosaicId) == msg.sender) {\\n                Mono storage mono = CryptoPunksMosaicStorage.get().monos[mosaicId];\\n                mono.governanceOptions.proposedReservePrice = price;\\n            }\\n        }\\n    }\\n\\n    //\\n    // Reconstitution: bidder\\n    //\\n\\n    function bid(\\n        uint192 originalId,\\n        uint256 price\\n    )\\n        external\\n        payable\\n        onlyWhenActive\\n        onlyActiveOriginal(originalId)\\n        returns (uint256 newBidId)\\n    {\\n        Original storage original = CryptoPunksMosaicStorage.get().originals[\\n            originalId\\n        ];\\n        // TODO: Make bid respect min reserve prices decided by GovernanceOptions\\n        // TODO: Check whether the minimum requirement for initiating bids is met (turnout)\\n        require(\\n            price >= original.minReservePrice &&\\n                price >= getAverageReservePriceProposals(originalId) &&\\n                price <= original.maxReservePrice,\\n            \\\"Bid price must be within the reserve price range\\\"\\n        );\\n        require(msg.value == price, \\\"Must send the exact value as proposed\\\");\\n\\n        uint256 oldBidId = original.activeBidId;\\n        if (oldBidId != 0) {\\n            // A preceding bid exists, so its state must be updated first\\n            BidState oldBidState = finalizeProposedBid(oldBidId);\\n            require(\\n                oldBidState == BidState.Rejected,\\n                \\\"The previous bid must be rejected\\\"\\n            );\\n        }\\n        uint256 newBidId = toBidId(originalId, msg.sender, block.timestamp);\\n        CryptoPunksMosaicStorage.get().bids[newBidId] = Bid({\\n            id: newBidId,\\n            originalId: originalId,\\n            bidder: payable(msg.sender),\\n            createdAt: uint40(block.timestamp),\\n            expiry: BID_EXPIRY,\\n            price: price,\\n            state: BidState.Proposed\\n        });\\n        CryptoPunksMosaicStorage.get().bidDeposits[newBidId] = msg.value;\\n        original.activeBidId = newBidId;\\n\\n        emit BidProposed(newBidId, originalId);\\n        return newBidId;\\n    }\\n\\n    function toBidId(\\n        uint192 originalId,\\n        address bidder,\\n        uint256 blockTimestamp\\n    ) public pure returns (uint256 id) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(originalId, bidder, uint40(blockTimestamp))\\n                )\\n            );\\n    }\\n\\n    function refundBidDeposit(uint256 bidId) external onlyWhenActive {\\n        Bid storage bid = CryptoPunksMosaicStorage.get().bids[bidId];\\n        require(\\n            bid.state == BidState.Rejected,\\n            \\\"Only rejected bids can be refunded\\\"\\n        );\\n        require(\\n            bid.bidder == msg.sender,\\n            \\\"Only the bidder can retrieve its own fund\\\"\\n        );\\n\\n        uint256 deposit = CryptoPunksMosaicStorage.get().bidDeposits[bidId];\\n        (bool sent, ) = msg.sender.call{value: deposit}(\\\"\\\");\\n        require(sent, \\\"Failed to refund\\\");\\n\\n        bid.state = BidState.Refunded;\\n        emit BidRefunded(bidId, bid.originalId);\\n    }\\n\\n    //\\n    // Reconstitution: Mosaic owners\\n    //\\n\\n    function respondToBid(\\n        uint256 mosaicId,\\n        MonoBidResponse response\\n    ) public onlyWhenActive onlyMosaicOwner(mosaicId) {\\n        (uint192 originalId, ) = fromMosaicId(mosaicId);\\n        require(hasOngoingBid(originalId), \\\"No bid ongoing\\\");\\n        MonoGovernanceOptions\\n            storage governanceOptions = CryptoPunksMosaicStorage\\n                .get()\\n                .monos[mosaicId]\\n                .governanceOptions;\\n        governanceOptions.bidId = CryptoPunksMosaicStorage\\n            .get()\\n            .originals[originalId]\\n            .activeBidId;\\n        governanceOptions.bidResponse = response;\\n    }\\n\\n    //\\n    // Reconstitution: common\\n    //\\n\\n    function finalizeProposedBid(\\n        uint256 bidId\\n    ) public onlyWhenActive returns (BidState) {\\n        // TODO: Double-check the prerequisites, including Original check\\n        Bid storage bid = CryptoPunksMosaicStorage.get().bids[bidId];\\n        require(\\n            bid.state == BidState.Proposed,\\n            \\\"Only bids in proposal can be updated\\\"\\n        );\\n        require(\\n            bid.createdAt + bid.expiry < block.timestamp,\\n            \\\"Bid vote is ongoing\\\"\\n        );\\n        bid.state = isBidAcceptable(bid.originalId)\\n            ? BidState.Accepted\\n            : BidState.Rejected;\\n\\n        if (bid.state == BidState.Accepted) {\\n            emit BidAccepted(bidId, bid.originalId);\\n        } else {\\n            emit BidRejected(bidId, bid.originalId);\\n        }\\n        return bid.state;\\n    }\\n\\n    // TODO: Introduce a way for Mosaic owners to force Bid finalization to prevent limbo cases where\\n    //  the winning bidder makes no further transaction\\n    function finalizeAcceptedBid(uint256 bidId) public onlyWhenActive {\\n        Bid storage bid = CryptoPunksMosaicStorage.get().bids[bidId];\\n        require(bid.state == BidState.Accepted, \\\"Bid must be accepted\\\");\\n\\n        Original storage original = CryptoPunksMosaicStorage.get().originals[\\n            bid.originalId\\n        ];\\n        CryptoPunksMosaicStorage.get().resalePrices[original.id] = bid.price;\\n        original.status = OriginalStatus.Sold;\\n        emit OriginalSold(bid.originalId, bidId);\\n\\n        museum.cryptoPunksMarket().transferPunk(bid.bidder, original.punkId);\\n\\n        bid.state = BidState.Won;\\n        emit BidWon(bidId, bid.originalId);\\n    }\\n\\n    //\\n    // Post-reconstitution: Mosaic owners\\n    //\\n\\n    // @dev Burn all owned Monos and send refunds\\n    function refundOnSold(\\n        uint192 originalId\\n    ) public onlyWhenActive returns (uint256 totalResaleFund) {\\n        // TODO: Double-check whether arithmetic division may cause under/over-refunding\\n        uint256 burnedMonoCount = 0;\\n        uint64 nextMonoId = CryptoPunksMosaicStorage.get().nextMonoIds[\\n            originalId\\n        ];\\n        for (uint64 monoId = 1; monoId < nextMonoId; monoId++) {\\n            uint256 mosaicId = toMosaicId(originalId, monoId);\\n            if (_ownerOf(mosaicId) == msg.sender) {\\n                _burn(mosaicId);\\n                burnedMonoCount++;\\n            }\\n        }\\n        require(burnedMonoCount > 0, \\\"No Monos owned to refund\\\");\\n\\n        totalResaleFund = burnedMonoCount * getPerMonoResaleFund(originalId);\\n        (bool sent, ) = msg.sender.call{value: totalResaleFund}(\\\"\\\");\\n        require(sent, \\\"Failed to refund\\\");\\n\\n        emit MonoRefunded(originalId, msg.sender);\\n    }\\n\\n    //\\n    // Reconstitution helpers\\n    //\\n\\n    function getAverageReservePriceProposals(\\n        uint192 originalId\\n    ) public view returns (uint256 average) {\\n        // TODO: Consider governance turnout requirements and write a unit test\\n        (uint64 count, uint256 sum) = sumReservePriceProposals(originalId);\\n        return sum / count;\\n    }\\n\\n    function sumReservePriceProposals(\\n        uint192 originalId\\n    ) public view returns (uint64 validProposalCount, uint256 priceSum) {\\n        uint64 nextMonoId = CryptoPunksMosaicStorage.get().nextMonoIds[\\n            originalId\\n        ];\\n        for (uint64 monoId = 1; monoId < nextMonoId; monoId++) {\\n            Mono storage mono = CryptoPunksMosaicStorage.get().monos[\\n                toMosaicId(originalId, monoId)\\n            ];\\n            if (mono.governanceOptions.proposedReservePrice > 0) {\\n                validProposalCount++;\\n                priceSum += mono.governanceOptions.proposedReservePrice;\\n            }\\n        }\\n        return (validProposalCount, priceSum);\\n    }\\n\\n    function sumBidResponses(\\n        uint192 originalId\\n    ) public view virtual returns (uint64 yes, uint64 no) {\\n        if (!hasOngoingBid(originalId)) {\\n            return (0, 0);\\n        }\\n        uint64 nextMonoId = CryptoPunksMosaicStorage.get().nextMonoIds[\\n            originalId\\n        ];\\n        uint256 activeBidId = CryptoPunksMosaicStorage\\n            .get()\\n            .originals[originalId]\\n            .activeBidId;\\n        for (uint64 monoId = 1; monoId < nextMonoId; monoId++) {\\n            MonoGovernanceOptions storage options = CryptoPunksMosaicStorage\\n                .get()\\n                .monos[toMosaicId(originalId, monoId)]\\n                .governanceOptions;\\n            if (options.bidId == activeBidId) {\\n                if (options.bidResponse == MonoBidResponse.Yes) {\\n                    yes++;\\n                } else if (options.bidResponse == MonoBidResponse.No) {\\n                    no++;\\n                }\\n            }\\n        }\\n        return (yes, no);\\n    }\\n\\n    function isBidAcceptable(\\n        uint192 originalId\\n    ) public view virtual returns (bool) {\\n        // TODO(@jyterencekim): Revisit the bid acceptance condition with respect to the planned spec\\n        (uint64 yes, ) = sumBidResponses(originalId);\\n        uint128 totalVotable = CryptoPunksMosaicStorage\\n            .get()\\n            .originals[originalId]\\n            .totalMonoSupply;\\n        return\\n            yes >=\\n            BasisPoint.calculateBasisPoint(\\n                totalVotable,\\n                BID_ACCEPTANCE_THRESHOLD_BPS\\n            );\\n    }\\n\\n    function getPerMonoResaleFund(\\n        uint192 originalId\\n    ) public view virtual returns (uint256 perMonoResaleFund) {\\n        uint256 resalePrice = CryptoPunksMosaicStorage.get().resalePrices[\\n            originalId\\n        ];\\n        require(resalePrice > 0, \\\"No resale price set\\\");\\n        uint256 perMonoBps = BasisPoint.WHOLE_BPS /\\n            CryptoPunksMosaicStorage\\n                .get()\\n                .originals[originalId]\\n                .totalMonoSupply;\\n\\n        return BasisPoint.calculateBasisPoint(resalePrice, perMonoBps);\\n    }\\n\\n    //\\n    // Model views\\n    //\\n    function getLatestOriginalId()\\n        external\\n        view\\n        returns (uint192 latestOriginalId)\\n    {\\n        return CryptoPunksMosaicStorage.get().latestOriginalId;\\n    }\\n\\n    function getMono(\\n        uint192 originalId,\\n        uint64 monoId\\n    ) external view returns (Mono memory) {\\n        return\\n            CryptoPunksMosaicStorage.get().monos[\\n                toMosaicId(originalId, monoId)\\n            ];\\n    }\\n\\n    function getOriginal(\\n        uint192 originalId\\n    ) external view returns (Original memory) {\\n        return CryptoPunksMosaicStorage.get().originals[originalId];\\n    }\\n\\n    function getOriginalFromMosaicId(\\n        uint256 mosaicId\\n    ) external view returns (Original memory) {\\n        (uint192 originalId, ) = fromMosaicId(mosaicId);\\n        return CryptoPunksMosaicStorage.get().originals[originalId];\\n    }\\n\\n    function getMonoLifeCycle(\\n        uint256 mosaicId\\n    ) public view returns (MonoLifeCycle) {\\n        (uint192 originalId, ) = fromMosaicId(mosaicId);\\n        require(\\n            originalId <= CryptoPunksMosaicStorage.get().latestOriginalId,\\n            \\\"Invalid originalId\\\"\\n        );\\n\\n        Original storage original = CryptoPunksMosaicStorage.get().originals[\\n            originalId\\n        ];\\n        if (original.status == OriginalStatus.Sold) {\\n            return MonoLifeCycle.Dead;\\n        }\\n        if (CryptoPunksMosaicStorage.get().monos[mosaicId].presetId == 0) {\\n            return MonoLifeCycle.Raw;\\n        }\\n        return MonoLifeCycle.Active;\\n    }\\n\\n    // TODO(@jyterencekim): Revisit the conditions\\n    function hasOngoingBid(uint192 originalId) public view returns (bool) {\\n        uint256 bidId = CryptoPunksMosaicStorage\\n            .get()\\n            .originals[originalId]\\n            .activeBidId;\\n        Bid storage bid = CryptoPunksMosaicStorage.get().bids[bidId];\\n        return\\n            bidId != 0 &&\\n            bid.bidder != NO_BIDDER &&\\n            bid.createdAt + bid.expiry >= block.timestamp;\\n    }\\n\\n    //\\n    // Internal Helpers\\n    //\\n\\n    function toMosaicId(\\n        uint192 originalId,\\n        uint64 monoId\\n    ) public pure returns (uint256 mosaicId) {\\n        return (uint256(originalId) << MONO_ID_BITS) | uint256(monoId);\\n    }\\n\\n    function fromMosaicId(\\n        uint256 mosaicId\\n    ) public pure returns (uint192 originalId, uint64 monoId) {\\n        return (\\n            uint192(mosaicId >> MONO_ID_BITS),\\n            uint64(mosaicId & MONO_ID_BITMASK)\\n        );\\n    }\\n\\n    //\\n    // Implementation internals\\n    //\\n\\n    function grantMintAuthority(\\n        address addr\\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        return _grantRole(MINTER_ROLE, addr);\\n    }\\n\\n    function setInvalidMetadataUri(\\n        string calldata _uri\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        CryptoPunksMosaicStorage.get().invalidMetadataUri = _uri;\\n    }\\n\\n    function setMetadataBaseUri(\\n        uint192 originalId,\\n        string calldata _uri\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        Original storage original = CryptoPunksMosaicStorage.get().originals[\\n            originalId\\n        ];\\n        original.metadataBaseUri = _uri;\\n    }\\n\\n    //\\n    // ERC721\\n    //\\n    function tokenURI(\\n        uint256 mosaicId\\n    ) public view override returns (string memory) {\\n        (uint192 originalId, ) = fromMosaicId(mosaicId);\\n        Original storage original = CryptoPunksMosaicStorage.get().originals[\\n            originalId\\n        ];\\n        if (original.status == OriginalStatus.Sold) {\\n            return CryptoPunksMosaicStorage.get().invalidMetadataUri;\\n        }\\n        string memory baseUrl = original.metadataBaseUri;\\n        uint8 presetId = CryptoPunksMosaicStorage\\n            .get()\\n            .monos[mosaicId]\\n            .presetId;\\n        return\\n            string.concat(\\n                baseUrl,\\n                \\\"/\\\",\\n                Strings.toString(original.punkId),\\n                \\\"_\\\",\\n                Strings.toString(uint256(presetId)),\\n                \\\".json\\\"\\n            );\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(ERC721Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            ERC721Upgradeable.supportsInterface(interfaceId) ||\\n            AccessControlUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    function _authorizeUpgrade(\\n        address\\n    ) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n}\\n\",\"keccak256\":\"0xa934c13492c9dc5e05471fdaba476858981d7c096a31a04588d25c2351781851\",\"license\":\"MIT\"},\"src/CryptoPunksMosaicStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ICryptoPunksMosaicRegistry.sol\\\";\\n\\nlibrary CryptoPunksMosaicStorage {\\n    bytes32 constant POSITION = keccak256(\\\"CryptoPunksMosaicStorage\\\");\\n\\n    struct Storage {\\n        string invalidMetadataUri;\\n        //\\n        // Models\\n        //\\n\\n        // @dev used as a `originalId`, starting from 1.\\n        // TODO: Consider changing to nextOriginalId to avoid more gas consumption for the first group\\n        uint192 latestOriginalId;\\n        mapping(uint192 => UsingCryptoPunksMosaicRegistryStructs.Original) originals;\\n        // @dev 0 represents the Original; each Mono is assigned an ID starting from 1.\\n        //  The value represents the next ID to assign for a new Mono.\\n        //  originalId => nextMonoId\\n        mapping(uint192 => uint64) nextMonoIds;\\n        // @dev mosaicId (originalId + monoId) => Mono\\n        mapping(uint256 => UsingCryptoPunksMosaicRegistryStructs.Mono) monos;\\n        //\\n        // Reconstitution\\n        //\\n\\n        // @dev bidId => Bid\\n        mapping(uint256 => UsingCryptoPunksMosaicRegistryStructs.Bid) bids;\\n        mapping(uint256 => uint256) bidDeposits;\\n        // @dev originalId => value\\n        mapping(uint192 => uint256) resalePrices;\\n    }\\n\\n    function get() internal pure returns (Storage storage data) {\\n        bytes32 position = POSITION;\\n        assembly {\\n            data.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2c2198723f2cea396d0b169900ed47f457006705e504e9ed29d7299d2111f7f1\",\"license\":\"MIT\"},\"src/CryptoPunksMuseum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {AccessControl} from \\\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\\\";\\nimport \\\"./ICryptoPunksGroupRegistry.sol\\\";\\nimport \\\"./ICryptoPunksMosaicRegistry.sol\\\";\\nimport \\\"./external/ICryptoPunksMarket.sol\\\";\\n\\n// TODO: Adopt Eternal Storage in the next phase\\ncontract CryptoPunksMuseum is AccessControl {\\n    ICryptoPunksMarket public immutable cryptoPunksMarket;\\n    ICryptoPunksGroupRegistry public groupRegistry;\\n    ICryptoPunksMosaicRegistry public mosaicRegistry;\\n    // @dev true if and only if the Museum's configuration is done and all the registries are ready\\n    bool public isActive;\\n\\n    constructor(address cryptoPunksMarketAddress) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        cryptoPunksMarket = ICryptoPunksMarket(cryptoPunksMarketAddress);\\n    }\\n\\n    function setGroupRegistry(\\n        address addr\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        groupRegistry = ICryptoPunksGroupRegistry(addr);\\n    }\\n\\n    function setMosaicRegistry(\\n        address addr\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mosaicRegistry = ICryptoPunksMosaicRegistry(addr);\\n    }\\n\\n    function activate() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            address(groupRegistry) != address(0x0) &&\\n                address(mosaicRegistry) != address(0x0)\\n        );\\n        mosaicRegistry.grantMintAuthority(address(groupRegistry));\\n        isActive = true;\\n    }\\n\\n    function deactivate() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        isActive = false;\\n    }\\n}\\n\",\"keccak256\":\"0x1707a8f8939fe962914f8485225f2505f05206ed7fb3efd9d65504b9b7693f15\",\"license\":\"MIT\"},\"src/ICryptoPunksGroupRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./UsingCryptoPunksGroupRegistryStructs.sol\\\";\\n\\ninterface ICryptoPunksGroupRegistry is UsingCryptoPunksGroupRegistryStructs {\\n    function create(\\n        uint256 targetPunkId,\\n        uint256 targetMaxPrice\\n    ) external returns (uint192 groupId);\\n\\n    function contribute(\\n        uint192 groupId,\\n        uint64 ticketQuantity\\n    ) external payable;\\n\\n    function buy(uint192 groupId) external;\\n\\n    function claim(\\n        uint192 groupId\\n    ) external returns (uint256[] memory mosaicIds);\\n\\n    function refundExpired(uint192 groupId) external;\\n}\\n\",\"keccak256\":\"0xcb62cc243851dcd4a6c164596eb537efbfbf12441260d86e9371e44f2e70a648\",\"license\":\"MIT\"},\"src/ICryptoPunksMosaicRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./UsingCryptoPunksMosaicRegistryStructs.sol\\\";\\n\\ninterface ICryptoPunksMosaicRegistry is UsingCryptoPunksMosaicRegistryStructs {\\n    // TODO: fill it out\\n    function create(\\n        uint256 punkId,\\n        uint64 totalClaimableCount,\\n        uint256 purchasePrice,\\n        uint256 minReservePrice,\\n        uint256 maxReservePrice\\n    ) external returns (uint192 originalId);\\n\\n    function mint(\\n        address contributor,\\n        uint192 originalId\\n    ) external returns (uint256 mosaicId);\\n\\n    function bid(\\n        uint192 originalId,\\n        uint256 price\\n    ) external payable returns (uint256 newBidId);\\n\\n    function grantMintAuthority(address addr) external;\\n}\\n\",\"keccak256\":\"0x47fe147d7633cfc178a4c87774456d238eb99814f80d9a59563a71f4606b36ef\",\"license\":\"MIT\"},\"src/UsingCryptoPunksGroupRegistryStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface UsingCryptoPunksGroupRegistryStructs {\\n    enum GroupStatus {\\n        Invalid,\\n        Open,\\n        Claimable\\n    }\\n\\n    enum GroupLifeCycle {\\n        // the group does not exist\\n        Nonexistent,\\n        // the group is open and funding is ongoing\\n        Active,\\n        // the group has not procured the target original within the expiry\\n        Lost,\\n        // the group has successfully purchased and acquired the target original\\n        Won\\n    }\\n\\n    struct Group {\\n        uint192 id;\\n        address creator;\\n        uint256 targetPunkId;\\n        uint256 targetMaxPrice;\\n        // @dev Must be a divisor (10, 100, etc.)\\n        uint64 totalTicketSupply;\\n        uint256 unitTicketPrice;\\n        uint256 totalContribution;\\n        uint64 ticketsBought;\\n        uint40 expiresAt; // inclusive, in seconds, as in block.timestamp\\n        GroupStatus status;\\n        uint256 purchasePrice; // price at which the target is bought\\n        uint192 originalId;\\n        string metadataUri;\\n    }\\n\\n    event GroupCreated(\\n        uint192 indexed groupId,\\n        address indexed creator,\\n        uint256 targetMaxPrice,\\n        uint64 totalTicketSupply,\\n        uint256 unitTicketPrice\\n    );\\n\\n    event GroupWon(uint192 indexed groupId);\\n\\n    event Contributed(\\n        address indexed contributor,\\n        uint192 indexed groupId,\\n        uint96 indexed ticketQuantity\\n    );\\n\\n    event Claimed(\\n        address indexed claimer,\\n        uint192 indexed groupId,\\n        uint256 indexed mosaicId\\n    );\\n}\\n\",\"keccak256\":\"0xb274bf80e30a970efe4a1ddc78d7b4b72a497090c40a39dad02947602bf5cada\",\"license\":\"MIT\"},\"src/UsingCryptoPunksMosaicRegistryStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface UsingCryptoPunksMosaicRegistryStructs {\\n    struct Original {\\n        uint192 id;\\n        // @dev punkIndex\\n        uint256 punkId;\\n        /**\\n         * @dev To calculate governance quorum and token circulation.\\n         *      Corresponds to total ticket circulation per group.\\n         */\\n        uint96 totalMonoSupply;\\n        uint96 claimedMonoCount;\\n        uint256 purchasePrice;\\n        uint256 minReservePrice;\\n        uint256 maxReservePrice;\\n        string metadataBaseUri;\\n        OriginalStatus status;\\n        uint256 activeBidId;\\n    }\\n\\n    enum OriginalStatus {\\n        Active,\\n        Sold\\n    }\\n\\n    event OriginalSold(uint192 indexed originalId, uint256 indexed bidId);\\n\\n    struct Mono {\\n        uint256 mosaicId;\\n        uint8 presetId;\\n        MonoGovernanceOptions governanceOptions;\\n    }\\n\\n    enum MonoLifeCycle {\\n        // @dev pre-design, just minted\\n        Raw,\\n        // @dev post-design, valid\\n        Active,\\n        // @dev belonging to invalid/reconstituted Original\\n        Dead\\n    }\\n\\n    struct MonoGovernanceOptions {\\n        uint256 proposedReservePrice;\\n        MonoBidResponse bidResponse;\\n        // @dev Bid ID\\n        uint256 bidId;\\n    }\\n\\n    enum MonoBidResponse {\\n        None,\\n        Yes,\\n        No\\n    }\\n\\n    event MonoRefunded(uint192 indexed originalId, address indexed monoOwner);\\n\\n    // @dev There can be at most one ongoing bid per original\\n    struct Bid {\\n        // @dev keccak256(abi.encodePacked(originalId, bidder, uint40(block.timestamp))\\n        uint256 id;\\n        address payable bidder;\\n        uint192 originalId;\\n        uint256 price;\\n        // block.timestamp\\n        uint40 createdAt;\\n        // duration in block.timestamp, in seconds\\n        uint40 expiry;\\n        // @dev updated upon any following Bid's creation or explicit external state updates\\n        BidState state;\\n    }\\n\\n    enum BidState {\\n        // Initial state, awaiting the result until the bidder explicitly reconstitutes the original or admits failure\\n        Proposed,\\n        // Resulting states upon vote results\\n        Accepted,\\n        Rejected,\\n        // Final/terminal states after bidder's action\\n        Won,\\n        Refunded\\n    }\\n\\n    event BidProposed(uint256 indexed bidId, uint192 indexed originalId);\\n\\n    event BidAccepted(uint256 indexed bidId, uint192 indexed originalId);\\n\\n    event BidRejected(uint256 indexed bidId, uint192 indexed originalId);\\n\\n    event BidWon(uint256 indexed bidId, uint192 indexed originalId);\\n\\n    event BidRefunded(uint256 indexed bidId, uint192 indexed originalId);\\n}\\n\",\"keccak256\":\"0xe806c931597b9102303eb77f38e84af2427c8b65651447a4795c1138808ad823\",\"license\":\"MIT\"},\"src/external/ICryptoPunksMarket.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6. SEE SOURCE BELOW. !!\\npragma solidity ^0.8.4;\\n\\ninterface ICryptoPunksMarket {\\n    function name() external view returns (string memory);\\n\\n    function punksOfferedForSale(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (\\n            bool isForSale,\\n            uint256 punkIndex,\\n            address seller,\\n            uint256 minValue,\\n            address onlySellTo\\n        );\\n\\n    function enterBidForPunk(uint256 punkIndex) external payable;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function acceptBidForPunk(uint256 punkIndex, uint256 minPrice) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function setInitialOwners(\\n        address[] memory addresses,\\n        uint256[] memory indices\\n    ) external;\\n\\n    function withdraw() external;\\n\\n    function imageHash() external view returns (string memory);\\n\\n    function nextPunkIndexToAssign() external view returns (uint256);\\n\\n    function punkIndexToAddress(uint256) external view returns (address);\\n\\n    function standard() external view returns (string memory);\\n\\n    function punkBids(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (bool hasBid, uint256 punkIndex, address bidder, uint256 value);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function allInitialOwnersAssigned() external;\\n\\n    function allPunksAssigned() external view returns (bool);\\n\\n    function buyPunk(uint256 punkIndex) external payable;\\n\\n    function transferPunk(address to, uint256 punkIndex) external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function withdrawBidForPunk(uint256 punkIndex) external;\\n\\n    function setInitialOwner(address to, uint256 punkIndex) external;\\n\\n    function offerPunkForSaleToAddress(\\n        uint256 punkIndex,\\n        uint256 minSalePriceInWei,\\n        address toAddress\\n    ) external;\\n\\n    function punksRemainingToAssign() external view returns (uint256);\\n\\n    function offerPunkForSale(\\n        uint256 punkIndex,\\n        uint256 minSalePriceInWei\\n    ) external;\\n\\n    function getPunk(uint256 punkIndex) external;\\n\\n    function pendingWithdrawals(address) external view returns (uint256);\\n\\n    function punkNoLongerForSale(uint256 punkIndex) external;\\n\\n    event Assign(address indexed to, uint256 punkIndex);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event PunkTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 punkIndex\\n    );\\n    event PunkOffered(\\n        uint256 indexed punkIndex,\\n        uint256 minValue,\\n        address indexed toAddress\\n    );\\n    event PunkBidEntered(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBidWithdrawn(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBought(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress,\\n        address indexed toAddress\\n    );\\n    event PunkNoLongerForSale(uint256 indexed punkIndex);\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[],\\\"name\\\":\\\"name\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punksOfferedForSale\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"isForSale\\\",\\\"type\\\":\\\"bool\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"seller\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"minValue\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"onlySellTo\\\",\\\"type\\\":\\\"address\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"enterBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalSupply\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minPrice\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"acceptBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"decimals\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"addresses\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"name\\\":\\\"indices\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"setInitialOwners\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"withdraw\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"imageHash\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"nextPunkIndexToAssign\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkIndexToAddress\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"standard\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkBids\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"hasBid\\\",\\\"type\\\":\\\"bool\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"bidder\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"allInitialOwnersAssigned\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"allPunksAssigned\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"buyPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"transferPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"symbol\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"withdrawBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setInitialOwner\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minSalePriceInWei\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"offerPunkForSaleToAddress\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"punksRemainingToAssign\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minSalePriceInWei\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"offerPunkForSale\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"pendingWithdrawals\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkNoLongerForSale\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"type\\\":\\\"constructor\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Assign\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Transfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PunkTransfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"minValue\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkOffered\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBidEntered\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBidWithdrawn\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBought\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PunkNoLongerForSale\\\",\\\"type\\\":\\\"event\\\"}]\\n*/\\n\",\"keccak256\":\"0xcc8da30186c7ad45201c8960c2c97eeba37b16ead893bb2f701107c5c0c4fecf\",\"license\":\"UNLICENSED\"},\"src/lib/BasisPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary BasisPoint {\\n    // 10,000 basis points (bps) = 100%\\n    uint256 public constant WHOLE_BPS = 10_000;\\n\\n    function calculateBasisPoint(\\n        uint256 amount,\\n        uint256 basisPoints\\n    ) internal pure returns (uint256) {\\n        // Minimal precision\\n        require((amount * basisPoints) >= WHOLE_BPS);\\n        return (amount * basisPoints) / WHOLE_BPS;\\n    }\\n}\\n\",\"keccak256\":\"0x602c5e8bfbfc40649a3852e835280fca555c44598970f5aa9c39d91f2c5543a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051615be76200004d60003960008181611c3f01528181611c7f015281816122f50152818161233501526127d80152615be76000f3fe6080604052600436106103505760003560e01c80636352211e116101c6578063ac8d6168116100f7578063c87b56dd11610095578063d547741f1161006f578063d547741f14610a76578063e36977cb14610a96578063e985e9c514610ab6578063f3c340cd14610aff57600080fd5b8063c87b56dd14610a14578063d42de9aa14610a34578063d539139314610a5457600080fd5b8063b40fd56e116100d1578063b40fd56e14610974578063b88d4fde14610994578063c01efa53146109b4578063c4d66de8146109f457600080fd5b8063ac8d616814610907578063af07830614610934578063af4a6c0c1461095457600080fd5b80638902436a11610164578063970525dd1161013e578063970525dd14610885578063a217fddf146108b2578063a22cb465146108c7578063a5627d9a146108e757600080fd5b80638902436a1461083057806391d148541461085057806395d89b411461087057600080fd5b806376016f4b116101a057806376016f4b146107bd57806379c07a39146107dd57806379f5f153146107fd5780638310a7da1461081057600080fd5b80636352211e1461073e57806364f4e5ef1461075e57806370a082311461079d57600080fd5b806331e781da116102a057806345e67a8c1161023e5780634f1ef286116102185780634f1ef286146106af578063512137ed146106c257806352d1902d146106e257806354cefb23146106f757600080fd5b806345e67a8c1461064b5780634bb722c61461066c5780634c9057891461068257600080fd5b806336568abe1161027a57806336568abe146105cb5780633659cfe6146105eb5780633a0e75551461060b57806342842e0e1461062b57600080fd5b806331e781da1461055e578063326d03671461058b578063342834f7146105ab57600080fd5b80631df46de71161030d578063248a9ca3116102e7578063248a9ca3146104ce5780632594c224146104fe5780632977d6971461051e5780632f2ff15d1461053e57600080fd5b80631df46de7146104605780632062f2e41461048057806323b872dd146104ae57600080fd5b806301ffc9a714610355578063033d05f11461038a57806306fdde03146103b7578063081812fc146103d9578063095ea7b3146104115780630e6a929c14610433575b600080fd5b34801561036157600080fd5b50610375610370366004614d30565b610b1f565b60405190151581526020015b60405180910390f35b34801561039657600080fd5b5061039f610b3f565b6040516001600160c01b039091168152602001610381565b3480156103c357600080fd5b506103cc610b5b565b6040516103819190614d9d565b3480156103e557600080fd5b506103f96103f4366004614db0565b610bed565b6040516001600160a01b039091168152602001610381565b34801561041d57600080fd5b5061043161042c366004614dde565b610c14565b005b34801561043f57600080fd5b5061045361044e366004614db0565b610d2e565b6040516103819190614e30565b34801561046c57600080fd5b5061043161047b366004614e43565b610e27565b34801561048c57600080fd5b506104a061049b366004614e8e565b610fd1565b604051908152602001610381565b3480156104ba57600080fd5b506104316104c9366004614ec3565b6112d6565b3480156104da57600080fd5b506104a06104e9366004614db0565b600090815260fb602052604090206001015490565b34801561050a57600080fd5b506104a0610519366004614f04565b611307565b34801561052a57600080fd5b50610431610539366004614f1f565b6113c4565b34801561054a57600080fd5b50610431610559366004614f3b565b6115c8565b34801561056a57600080fd5b5061057e610579366004614db0565b6115ed565b6040516103819190614f74565b34801561059757600080fd5b506104316105a636600461502d565b611767565b3480156105b757600080fd5b506104316105c6366004614db0565b611908565b3480156105d757600080fd5b506104316105e6366004614f3b565b611bb7565b3480156105f757600080fd5b5061043161060636600461504f565b611c35565b34801561061757600080fd5b50610431610626366004614db0565b611d14565b34801561063757600080fd5b50610431610646366004614ec3565b612015565b34801561065757600080fd5b5061012d546103f9906001600160a01b031681565b34801561067857600080fd5b506104a06113ec81565b34801561068e57600080fd5b506106a261069d366004614db0565b612030565b604051610381919061506c565b6104316106bd366004615122565b6122eb565b3480156106ce57600080fd5b5061039f6106dd366004615188565b6123b7565b3480156106ee57600080fd5b506104a06127cb565b34801561070357600080fd5b50610717610712366004614db0565b61287e565b604080516001600160c01b0390931683526001600160401b03909116602083015201610381565b34801561074a57600080fd5b506103f9610759366004614db0565b6128ae565b34801561076a57600080fd5b5061077e610779366004614f04565b61290e565b604080516001600160401b039093168352602083019190915201610381565b3480156107a957600080fd5b506104a06107b836600461504f565b6129d0565b3480156107c957600080fd5b5061057e6107d8366004614f04565b612a56565b3480156107e957600080fd5b506104316107f83660046151ce565b612bc1565b6104a061080b366004614f1f565b612c24565b34801561081c57600080fd5b5061037561082b366004614f04565b61308a565b34801561083c57600080fd5b506104a061084b366004614f04565b6130ec565b34801561085c57600080fd5b5061037561086b366004614f3b565b61337f565b34801561087c57600080fd5b506103cc6133aa565b34801561089157600080fd5b506108a56108a03660046151f9565b6133b9565b6040516103819190615223565b3480156108be57600080fd5b506104a0600081565b3480156108d357600080fd5b506104316108e236600461527b565b613464565b3480156108f357600080fd5b506104316109023660046152f1565b61346f565b34801561091357600080fd5b5061091e62093a8081565b60405164ffffffffff9091168152602001610381565b34801561094057600080fd5b506104a061094f366004614f04565b6134b9565b34801561096057600080fd5b506104a061096f3660046151f9565b6134df565b34801561098057600080fd5b5061043161098f36600461504f565b6134fd565b3480156109a057600080fd5b506104316109af366004615343565b613520565b3480156109c057600080fd5b506109d46109cf366004614f04565b613558565b604080516001600160401b03938416815292909116602083015201610381565b348015610a0057600080fd5b50610431610a0f36600461504f565b61369d565b348015610a2057600080fd5b506103cc610a2f366004614db0565b61382f565b348015610a4057600080fd5b50610375610a4f366004614f04565b613a22565b348015610a6057600080fd5b506104a0600080516020615b9283398151915281565b348015610a8257600080fd5b50610431610a91366004614f3b565b613ac1565b348015610aa257600080fd5b506104a0610ab13660046153ae565b613ae6565b348015610ac257600080fd5b50610375610ad13660046153cc565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b348015610b0b57600080fd5b50610431610b1a3660046153fa565b613b4d565b6000610b2a82613b6e565b80610b395750610b3982613bbe565b92915050565b6000610b49613be3565b600101546001600160c01b0316919050565b606060658054610b6a9061543b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b969061543b565b8015610be35780601f10610bb857610100808354040283529160200191610be3565b820191906000526020600020905b815481529060010190602001808311610bc657829003601f168201915b5050505050905090565b6000610bf882613c07565b506000908152606960205260409020546001600160a01b031690565b6000610c1f826128ae565b9050806001600160a01b0316836001600160a01b031603610c915760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610cad5750610cad8133610ad1565b610d1f5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610c88565b610d298383613c66565b505050565b600080610d3a8361287e565b509050610d45613be3565b600101546001600160c01b039081169082161115610d9a5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081bdc9a59da5b985b125960721b6044820152606401610c88565b6000610da4613be3565b6001600160c01b03831660009081526002919091016020526040902090506001600782015460ff166001811115610ddd57610ddd614e0a565b03610dec575060029392505050565b610df4613be3565b6000858152600491909101602052604081206001015460ff169003610e1d575060009392505050565b5060019392505050565b61012d546001600160a01b031615801590610eb5575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb59190615475565b610ed15760405162461bcd60e51b8152600401610c8890615492565b8133610edc826128ae565b6001600160a01b031614610f025760405162461bcd60e51b8152600401610c88906154c1565b6000610f0d8461287e565b509050610f1981613a22565b610f565760405162461bcd60e51b815260206004820152600e60248201526d4e6f20626964206f6e676f696e6760901b6044820152606401610c88565b6000610f60613be3565b6000868152600491909101602052604090206002019050610f7f613be3565b6001600160c01b03831660009081526002918201602052604090206008015482820155600180830180548793919260ff19909116918490811115610fc557610fc5614e0a565b02179055505050505050565b61012d546000906001600160a01b031615801590611062575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561103e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110629190615475565b61107e5760405162461bcd60e51b8152600401610c8890615492565b600080516020615b9283398151915261109681613cd4565b60006110a0613be3565b6001600160c01b038516600090815260039190910160205260409020546001600160401b03161161111e5760405162461bcd60e51b815260206004820152602260248201527f4f726967696e616c206d75737420626520696e697469616c697a6564206669726044820152611cdd60f21b6064820152608401610c88565b6000611128613be3565b6001600160c01b03851660009081526003919091016020526040812080546001600160401b03169161115983615504565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550905061118984826134df565b92506040518060600160405280848152602001600060ff168152602001604051806060016040528060008152602001600060028111156111cb576111cb614e0a565b8152600060209091015290526111df613be3565b6000858152600491909101602090815260409182902083518155838201516001808301805460ff90931660ff1993841617905593850151805160028085019182559482015160038501805495979396929591949093911691849081111561124857611248614e0a565b0217905550604082015181600201555050905050611264613be3565b6001600160c01b0385166000908152600291820160205260409020018054600160601b90046001600160601b031690600c61129e8361552a565b91906101000a8154816001600160601b0302191690836001600160601b03160217905550506112cd8584613cde565b505b5092915050565b6112e03382613cf8565b6112fc5760405162461bcd60e51b8152600401610c8890615546565b610d29838383613d76565b600080611312613be3565b6001600160c01b038416600090815260079190910160205260409020549050806113745760405162461bcd60e51b8152602060048201526013602482015272139bc81c995cd85b19481c1c9a58d9481cd95d606a1b6044820152606401610c88565b600061137e613be3565b6001600160c01b038516600090815260029182016020526040902001546113b0906001600160601b0316612710615593565b90506113bc8282613ee7565b949350505050565b61012d546001600160a01b031615801590611452575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561142e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114529190615475565b61146e5760405162461bcd60e51b8152600401610c8890615492565b6000611478613be3565b6002016000846001600160c01b03166001600160c01b031681526020019081526020016000209050818160040154111580156114b8575080600501548211155b6114ff5760405162461bcd60e51b81526020600482015260186024820152774d7573742062652077697468696e207468652072616e676560401b6044820152606401610c88565b6000611509613be3565b6001600160c01b038516600090815260039190910160205260409020546001600160401b0316905060015b816001600160401b0316816001600160401b031610156115c157600061155a86836134df565b90503361157c826000908152606760205260409020546001600160a01b031690565b6001600160a01b0316036115ae576000611594613be3565b600083815260049190910160205260409020600201869055505b50806115b981615504565b915050611534565b5050505050565b600082815260fb60205260409020600101546115e381613cd4565b610d298383613f18565b6115f5614c88565b60006116008361287e565b50905061160b613be3565b6001600160c01b0380831660009081526002928301602090815260409182902082516101408101845281549094168452600181015491840191909152928301546001600160601b0380821692840192909252600160601b900416606082015260038201546080820152600482015460a0820152600582015460c082015260068201805491929160e0840191906116a09061543b565b80601f01602080910402602001604051908101604052809291908181526020018280546116cc9061543b565b80156117195780601f106116ee57610100808354040283529160200191611719565b820191906000526020600020905b8154815290600101906020018083116116fc57829003601f168201915b5050509183525050600782015460209091019060ff16600181111561174057611740614e0a565b600181111561175157611751614e0a565b8152602001600882015481525050915050919050565b61012d546001600160a01b0316158015906117f5575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f59190615475565b6118115760405162461bcd60e51b8152600401610c8890615492565b813361181c826128ae565b6001600160a01b0316146118425760405162461bcd60e51b8152600401610c88906154c1565b600061184d8461287e565b509050600061185a613be3565b6002016000836001600160c01b03166001600160c01b0316815260200190815260200160002090508381600401541115801561189a575080600501548411155b6118e15760405162461bcd60e51b81526020600482015260186024820152774d7573742062652077697468696e207468652072616e676560401b6044820152606401610c88565b60006118eb613be3565b600096875260040160205250506040909320600201919091555050565b61012d546001600160a01b031615801590611996575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119969190615475565b6119b25760405162461bcd60e51b8152600401610c8890615492565b60006119bc613be3565b60008381526005919091016020526040902090506002600482810154600160501b900460ff16908111156119f2576119f2614e0a565b14611a4a5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792072656a656374656420626964732063616e20626520726566756e64604482015261195960f21b6064820152608401610c88565b60018101546001600160a01b03163314611ab85760405162461bcd60e51b815260206004820152602960248201527f4f6e6c7920746865206269646465722063616e20726574726965766520697473604482015268081bdddb88199d5b9960ba1b6064820152608401610c88565b6000611ac2613be3565b60008481526006919091016020526040808220549051909250339083908381818185875af1925050503d8060008114611b17576040519150601f19603f3d011682016040523d82523d6000602084013e611b1c565b606091505b5050905080611b605760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b6044820152606401610c88565b60048301805460ff60501b1916600160521b17905560028301546040516001600160c01b039091169085907f45368e9994df879f0e9d3c8e00a81f2745c25f6f5c8519296d97d1992ba2233190600090a350505050565b6001600160a01b0381163314611c275760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610c88565b611c318282613f9e565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611c7d5760405162461bcd60e51b8152600401610c88906155b5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cc6600080516020615b4b833981519152546001600160a01b031690565b6001600160a01b031614611cec5760405162461bcd60e51b8152600401610c8890615601565b611cf581614005565b60408051600080825260208201909252611d1191839190614010565b50565b61012d546001600160a01b031615801590611da2575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da29190615475565b611dbe5760405162461bcd60e51b8152600401610c8890615492565b6000611dc8613be3565b60008381526005919091016020526040902090506001600482810154600160501b900460ff1690811115611dfe57611dfe614e0a565b14611e425760405162461bcd60e51b8152602060048201526014602482015273109a59081b5d5cdd081899481858d8d95c1d195960621b6044820152606401610c88565b6000611e4c613be3565b6002838101546001600160c01b031660009081529101602052604090206003830154909150611e79613be3565b82546001600160c01b0390811660009081526007928301602052604080822094909455918401805460ff19166001179055600285015492518693909116917fc8af5b62fdee6b689bb033af55802065de039199e8773211c391e2bc629f9bff91a361012d60009054906101000a90046001600160a01b03166001600160a01b031663d0d851d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f52919061564d565b600183810154908301546040516322dca8bb60e21b81526001600160a01b0392831660048201526024810191909152911690638b72a2ec90604401600060405180830381600087803b158015611fa757600080fd5b505af1158015611fbb573d6000803e3d6000fd5b5050505060048201805460ff60501b1916600360501b17905560028201546040516001600160c01b039091169084907f99df1ef09da39d623befdb16807aa77c3019cdab1513e0911a6a9b5cbeb7717190600090a3505050565b610d2983838360405180602001604052806000815250613520565b61012d546000906001600160a01b0316158015906120c1575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561209d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c19190615475565b6120dd5760405162461bcd60e51b8152600401610c8890615492565b60006120e7613be3565b6000848152600591909101602052604081209150600482810154600160501b900460ff169081111561211b5761211b614e0a565b146121745760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206269647320696e2070726f706f73616c2063616e20626520757064604482015263185d195960e21b6064820152608401610c88565b600481015442906121979064ffffffffff6501000000000082048116911661566a565b64ffffffffff16106121e15760405162461bcd60e51b815260206004820152601360248201527242696420766f7465206973206f6e676f696e6760681b6044820152606401610c88565b60028101546121f8906001600160c01b031661308a565b612203576002612206565b60015b81600401600a6101000a81548160ff0219169083600481111561222b5761222b614e0a565b02179055506001600482810154600160501b900460ff169081111561225257612252614e0a565b036122985760028101546040516001600160c01b039091169084907fb3da334e87bb12429fffd68719932238d83910609c56e8c29aa40a792ad13a2190600090a36122d5565b60028101546040516001600160c01b039091169084907fef7c1c563e3b3cbcb87042244eb19ffd95036cade90e0e582f71e3d276a8e8b990600090a35b60040154600160501b900460ff1690505b919050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036123335760405162461bcd60e51b8152600401610c88906155b5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661237c600080516020615b4b833981519152546001600160a01b031690565b6001600160a01b0316146123a25760405162461bcd60e51b8152600401610c8890615601565b6123ab82614005565b611c3182826001614010565b61012d546000906001600160a01b031615801590612448575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124489190615475565b6124645760405162461bcd60e51b8152600401610c8890615492565b600080516020615b9283398151915261247c81613cd4565b61012d5460408051630d0d851d60e41b8152905130926001600160a01b03169163d0d851d09160048083019260209291908290030181865afa1580156124c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ea919061564d565b6001600160a01b03166358178168896040518263ffffffff1660e01b815260040161251791815260200190565b602060405180830381865afa158015612534573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612558919061564d565b6001600160a01b0316146125ae5760405162461bcd60e51b815260206004820152601e60248201527f54686520636f6e7472616374206d757374206f776e207468652070756e6b00006044820152606401610c88565b6125b6613be3565b60010180546000906125d0906001600160c01b0316615688565b91906101000a8154816001600160c01b0302191690836001600160c01b03160217905591506125fd613be3565b6001600160c01b0383166000908152600391909101602052604081208054909190612630906001600160401b0316615504565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550604051806101400160405280836001600160c01b03168152602001888152602001876001600160401b03166001600160601b0316815260200160006001600160601b03168152602001868152602001858152602001848152602001604051806020016040528060008152508152602001600060018111156126d7576126d7614e0a565b815260200160008152506126e9613be3565b6001600160c01b038085166000908152600292830160209081526040918290208551815494166001600160c01b031994851617815590850151600182015590840151928101805460608601516001600160601b03908116600160601b029190941693909416929092179290921790556080820151600382015560a0820151600482015560c0820151600582015560e0820151600682019061278a90826156f2565b5061010082015160078201805460ff1916600183818111156127ae576127ae614e0a565b021790555061012082015181600801559050505095945050505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461286b5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610c88565b50600080516020615b4b83398151915290565b600080604083901c60016040600161289691906157b1565b6001901b6128a491906157c4565b9094931692915050565b6000818152606760205260408120546001600160a01b031680610b395760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610c88565b600080600061291b613be3565b6001600160c01b038516600090815260039190910160205260409020546001600160401b0316905060015b816001600160401b0316816001600160401b031610156129c957600061296a613be3565b600401600061297988856134df565b815260208101919091526040016000206002810154909150156129b657846129a081615504565b60028301549096506129b39150856157b1565b93505b50806129c181615504565b915050612946565b5050915091565b60006001600160a01b038216612a3a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610c88565b506001600160a01b031660009081526068602052604090205490565b612a5e614c88565b612a66613be3565b6001600160c01b0380841660009081526002928301602090815260409182902082516101408101845281549094168452600181015491840191909152928301546001600160601b0380821692840192909252600160601b900416606082015260038201546080820152600482015460a0820152600582015460c082015260068201805491929160e084019190612afb9061543b565b80601f0160208091040260200160405190810160405280929190818152602001828054612b279061543b565b8015612b745780601f10612b4957610100808354040283529160200191612b74565b820191906000526020600020905b815481529060010190602001808311612b5757829003601f168201915b5050509183525050600782015460209091019060ff166001811115612b9b57612b9b614e0a565b6001811115612bac57612bac614e0a565b81526020016008820154815250509050919050565b8133612bcc826128ae565b6001600160a01b031614612bf25760405162461bcd60e51b8152600401610c88906154c1565b6000612bfc613be3565b600094855260040160205250506040909120600101805460ff191660ff909216919091179055565b61012d546000906001600160a01b031615801590612cb5575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb59190615475565b612cd15760405162461bcd60e51b8152600401610c8890615492565b826000612cdc613be3565b6001600160c01b0383166000908152600291909101602052604090206007015460ff166001811115612d1057612d10614e0a565b14612d4a5760405162461bcd60e51b815260206004820152600a6024820152694e6f742061637469766560b01b6044820152606401610c88565b6000612d54613be3565b6001600160c01b03861660009081526002919091016020526040902060048101549091508410801590612d8f5750612d8b856134b9565b8410155b8015612d9f575080600501548411155b612e045760405162461bcd60e51b815260206004820152603060248201527f426964207072696365206d7573742062652077697468696e207468652072657360448201526f657276652070726963652072616e676560801b6064820152608401610c88565b833414612e615760405162461bcd60e51b815260206004820152602560248201527f4d7573742073656e64207468652065786163742076616c75652061732070726f6044820152641c1bdcd95960da1b6064820152608401610c88565b60088101548015612ee6576000612e7782612030565b90506002816004811115612e8d57612e8d614e0a565b14612ee45760405162461bcd60e51b815260206004820152602160248201527f5468652070726576696f757320626964206d7573742062652072656a656374656044820152601960fa1b6064820152608401610c88565b505b6000612ef3873342613ae6565b6040805160e0810182528281523360208201526001600160c01b038a1691810191909152606081018890524264ffffffffff16608082015262093a8060a0820152600060c0820152909150612f46613be3565b6000838152600591909101602090815260409182902083518155908301516001820180546001600160a01b039092166001600160a01b0319909216919091179055908201516002820180546001600160c01b039092166001600160c01b03199092169190911790556060820151600382015560808201516004808301805460a086015164ffffffffff908116650100000000000269ffffffffffffffffffff199092169416939093179290921780835560c0850151929160ff60501b1990911690600160501b90849081111561301e5761301e614e0a565b02179055509050503461302f613be3565b60008381526006919091016020526040808220929092556008850183905590516001600160c01b0389169183917f8533454634e1656b9e2daf5da3b90e4d937516874c552e83bec683277b6109a69190a39695505050505050565b60008061309683613558565b50905060006130a3613be3565b6001600160c01b038516600090815260029182016020526040902001546001600160601b031690506130d7816113ec613ee7565b826001600160401b0316101592505050919050565b61012d546000906001600160a01b03161580159061317d575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015613159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317d9190615475565b6131995760405162461bcd60e51b8152600401610c8890615492565b6000806131a4613be3565b6001600160c01b038516600090815260039190910160205260409020546001600160401b0316905060015b816001600160401b0316816001600160401b0316101561324f5760006131f586836134df565b905033613217826000908152606760205260409020546001600160a01b031690565b6001600160a01b03160361323c5761322e8161417b565b83613238816157d7565b9450505b508061324781615504565b9150506131cf565b50600082116132a05760405162461bcd60e51b815260206004820152601860248201527f4e6f204d6f6e6f73206f776e656420746f20726566756e6400000000000000006044820152606401610c88565b6132a984611307565b6132b390836157f0565b604051909350600090339085908381818185875af1925050503d80600081146132f8576040519150601f19603f3d011682016040523d82523d6000602084013e6132fd565b606091505b50509050806133415760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b6044820152606401610c88565b60405133906001600160c01b038716907fc6d91402e00d43c03e126a374dddd6386f8764fd6bbd8453dabf5e2e37545f0890600090a3505050919050565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060668054610b6a9061543b565b6133c1614cdc565b6133c9613be3565b60040160006133d885856134df565b8152602080820192909252604090810160002081516060808201845282548252600183015460ff908116838701528451918201855260028085018054845260038601549497959688019593949093850192169081111561343a5761343a614e0a565b600281111561344b5761344b614e0a565b8152600291909101546020909101529052509392505050565b611c3133838361421e565b600061347a81613cd4565b6000613484613be3565b6001600160c01b0386166000908152600291909101602052604090209050600681016134b1848683615807565b505050505050565b60008060006134c78461290e565b90925090506113bc6001600160401b03831682615593565b6001600160401b031660409190911b67ffffffffffffffff19161790565b600061350881613cd4565b611c31600080516020615b9283398151915283613f18565b61352a3383613cf8565b6135465760405162461bcd60e51b8152600401610c8890615546565b613552848484846142ec565b50505050565b60008061356483613a22565b61357357506000928392509050565b600061357d613be3565b6001600160c01b038516600090815260039190910160205260408120546001600160401b031691506135ad613be3565b6001600160c01b03861660009081526002919091016020526040902060080154905060015b826001600160401b0316816001600160401b031610156136955760006135f6613be3565b600401600061360589856134df565b81526020019081526020016000206002019050828160020154036136825760018082015460ff16600281111561363d5761363d614e0a565b03613654578561364c81615504565b965050613682565b6002600182015460ff16600281111561366f5761366f614e0a565b03613682578461367e81615504565b9550505b508061368d81615504565b9150506135d2565b505050915091565b600054610100900460ff16158080156136bd5750600054600160ff909116105b806136d75750303b1580156136d7575060005460ff166001145b61373a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c88565b6000805460ff19166001179055801561375d576000805461ff0019166101001790555b6137b46040518060400160405280601281526020017143727970746f50756e6b73204d6f7361696360701b8152506040518060400160405280600b81526020016a50554e4b534d4f5341494360a81b81525061431f565b61012d80546001600160a01b0319166001600160a01b0384161790556137db600033613f18565b6137e6600083613f18565b8015611c31576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6060600061383c8361287e565b5090506000613849613be3565b6001600160c01b03831660009081526002919091016020526040902090506001600782015460ff16600181111561388257613882614e0a565b036139215761388f613be3565b805461389a9061543b565b80601f01602080910402602001604051908101604052809291908181526020018280546138c69061543b565b80156139135780601f106138e857610100808354040283529160200191613913565b820191906000526020600020905b8154815290600101906020018083116138f657829003601f168201915b505050505092505050919050565b60008160060180546139329061543b565b80601f016020809104026020016040519081016040528092919081815260200182805461395e9061543b565b80156139ab5780601f10613980576101008083540402835291602001916139ab565b820191906000526020600020905b81548152906001019060200180831161398e57829003601f168201915b5050505050905060006139bc613be3565b6000878152600491909101602052604090206001908101549084015460ff909116915082906139ea90614350565b6139f68360ff16614350565b604051602001613a08939291906158c6565b604051602081830303815290604052945050505050919050565b600080613a2d613be3565b6001600160c01b038416600090815260029190910160205260408120600801549150613a57613be3565b60008381526005919091016020526040902090508115801590613a86575060018101546001600160a01b031615155b80156113bc575060048101544290613ab09064ffffffffff6501000000000082048116911661566a565b64ffffffffff161015949350505050565b600082815260fb6020526040902060010154613adc81613cd4565b610d298383613f9e565b6040805167ffffffffffffffff1985831b166020808301919091526bffffffffffffffffffffffff19606086901b1660388301526001600160d81b031960d885901b16604c83015282516031818403018152605190920190925280519101205b9392505050565b6000613b5881613cd4565b8282613b62613be3565b91613552919083615807565b60006001600160e01b031982166380ac58cd60e01b1480613b9f57506001600160e01b03198216635b5e139f60e01b145b80610b3957506301ffc9a760e01b6001600160e01b0319831614610b39565b60006001600160e01b03198216637965db0b60e01b1480610b395750610b3982613b6e565b7f5cafb8bef6ef913d32c72906048dcf5e6edbee573e07510aef7565bd03ff9d2890565b6000818152606760205260409020546001600160a01b0316611d115760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610c88565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190613c9b826128ae565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611d1181336143e2565b611c3182826040518060200160405280600081525061443b565b600080613d04836128ae565b9050806001600160a01b0316846001600160a01b03161480613d4b57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b806113bc5750836001600160a01b0316613d6484610bed565b6001600160a01b031614949350505050565b826001600160a01b0316613d89826128ae565b6001600160a01b031614613daf5760405162461bcd60e51b8152600401610c8890615937565b6001600160a01b038216613e115760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c88565b613e1e838383600161446e565b826001600160a01b0316613e31826128ae565b6001600160a01b031614613e575760405162461bcd60e51b8152600401610c8890615937565b600081815260696020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260688552838620805460001901905590871680865283862080546001019055868652606790945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000612710613ef683856157f0565b1015613f0157600080fd5b612710613f0e83856157f0565b613b469190615593565b613f22828261337f565b611c3157600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613f5a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b613fa8828261337f565b15611c3157600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611c3181613cd4565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561404357610d29836144f6565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561409d575060408051601f3d908101601f1916820190925261409a9181019061597c565b60015b6141005760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610c88565b600080516020615b4b833981519152811461416f5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610c88565b50610d29838383614592565b6000614186826128ae565b905061419681600084600161446e565b61419f826128ae565b600083815260696020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526068845282852080546000190190558785526067909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b03160361427f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c88565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6142f7848484613d76565b614303848484846145b7565b6135525760405162461bcd60e51b8152600401610c8890615995565b600054610100900460ff166143465760405162461bcd60e51b8152600401610c88906159e7565b611c3182826146b8565b6060600061435d836146f8565b60010190506000816001600160401b0381111561437c5761437c615080565b6040519080825280601f01601f1916602001820160405280156143a6576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846143b057509392505050565b6143ec828261337f565b611c31576143f9816147d0565b6144048360206147e2565b604051602001614415929190615a32565b60408051601f198184030181529082905262461bcd60e51b8252610c8891600401614d9d565b614445838361497d565b61445260008484846145b7565b610d295760405162461bcd60e51b8152600401610c8890615995565b6001811115613552576001600160a01b038416156144b4576001600160a01b038416600090815260686020526040812080548392906144ae9084906157c4565b90915550505b6001600160a01b03831615613552576001600160a01b038316600090815260686020526040812080548392906144eb9084906157b1565b909155505050505050565b6001600160a01b0381163b6145635760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610c88565b600080516020615b4b83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61459b83614b16565b6000825111806145a85750805b15610d29576135528383614b56565b60006001600160a01b0384163b156146ad57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906145fb903390899088908890600401615aa7565b6020604051808303816000875af1925050508015614636575060408051601f3d908101601f1916820190925261463391810190615ae4565b60015b614693573d808015614664576040519150601f19603f3d011682016040523d82523d6000602084013e614669565b606091505b50805160000361468b5760405162461bcd60e51b8152600401610c8890615995565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506113bc565b506001949350505050565b600054610100900460ff166146df5760405162461bcd60e51b8152600401610c88906159e7565b60656146eb83826156f2565b506066610d2982826156f2565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106147375772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614763576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061478157662386f26fc10000830492506010015b6305f5e1008310614799576305f5e100830492506008015b61271083106147ad57612710830492506004015b606483106147bf576064830492506002015b600a8310610b395760010192915050565b6060610b396001600160a01b03831660145b606060006147f18360026157f0565b6147fc9060026157b1565b6001600160401b0381111561481357614813615080565b6040519080825280601f01601f19166020018201604052801561483d576020820181803683370190505b509050600360fc1b8160008151811061485857614858615b01565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061488757614887615b01565b60200101906001600160f81b031916908160001a90535060006148ab8460026157f0565b6148b69060016157b1565b90505b600181111561492e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106148ea576148ea615b01565b1a60f81b82828151811061490057614900615b01565b60200101906001600160f81b031916908160001a90535060049490941c9361492781615b17565b90506148b9565b508315613b465760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c88565b6001600160a01b0382166149d35760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c88565b6000818152606760205260409020546001600160a01b031615614a385760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c88565b614a4660008383600161446e565b6000818152606760205260409020546001600160a01b031615614aab5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c88565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b614b1f816144f6565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b614bbe5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610c88565b600080846001600160a01b031684604051614bd99190615b2e565b600060405180830381855af49150503d8060008114614c14576040519150601f19603f3d011682016040523d82523d6000602084013e614c19565b606091505b5091509150614c418282604051806060016040528060278152602001615b6b60279139614c4a565b95945050505050565b60608315614c59575081613b46565b613b468383815115614c6e5781518083602001fd5b8060405162461bcd60e51b8152600401610c889190614d9d565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820152906101008201905b8152602001600081525090565b6040805160608101825260008082526020820152908101614cfb614d00565b905290565b604080516060810190915260008082526020820190614ccf565b6001600160e01b031981168114611d1157600080fd5b600060208284031215614d4257600080fd5b8135613b4681614d1a565b60005b83811015614d68578181015183820152602001614d50565b50506000910152565b60008151808452614d89816020860160208601614d4d565b601f01601f19169290920160200192915050565b602081526000613b466020830184614d71565b600060208284031215614dc257600080fd5b5035919050565b6001600160a01b0381168114611d1157600080fd5b60008060408385031215614df157600080fd5b8235614dfc81614dc9565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60038110611d1157611d11614e0a565b60208101614e3d83614e20565b91905290565b60008060408385031215614e5657600080fd5b82359150602083013560038110614e6c57600080fd5b809150509250929050565b80356001600160c01b03811681146122e657600080fd5b60008060408385031215614ea157600080fd5b8235614eac81614dc9565b9150614eba60208401614e77565b90509250929050565b600080600060608486031215614ed857600080fd5b8335614ee381614dc9565b92506020840135614ef381614dc9565b929592945050506040919091013590565b600060208284031215614f1657600080fd5b613b4682614e77565b60008060408385031215614f3257600080fd5b614dfc83614e77565b60008060408385031215614f4e57600080fd5b823591506020830135614e6c81614dc9565b60028110614f7057614f70614e0a565b9052565b60208152614f8e6020820183516001600160c01b03169052565b6020820151604082015260006040830151614fb460608401826001600160601b03169052565b5060608301516001600160601b038116608084015250608083015160a083015260a083015160c083015260c083015160e083015260e08301516101406101008181860152615006610160860184614d71565b9086015190925061012061501c86820183614f60565b959095015193019290925250919050565b6000806040838503121561504057600080fd5b50508035926020909101359150565b60006020828403121561506157600080fd5b8135613b4681614dc9565b6020810160058310614e3d57614e3d614e0a565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126150a757600080fd5b81356001600160401b03808211156150c1576150c1615080565b604051601f8301601f19908116603f011681019082821181831017156150e9576150e9615080565b8160405283815286602085880101111561510257600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561513557600080fd5b823561514081614dc9565b915060208301356001600160401b0381111561515b57600080fd5b61516785828601615096565b9150509250929050565b80356001600160401b03811681146122e657600080fd5b600080600080600060a086880312156151a057600080fd5b853594506151b060208701615171565b94979496505050506040830135926060810135926080909101359150565b600080604083850312156151e157600080fd5b82359150602083013560ff81168114614e6c57600080fd5b6000806040838503121561520c57600080fd5b61521583614e77565b9150614eba60208401615171565b600060a0820190508251825260ff6020840151166020830152604083015180516040840152602081015161525681614e20565b606084015260400151608090920191909152919050565b8015158114611d1157600080fd5b6000806040838503121561528e57600080fd5b823561529981614dc9565b91506020830135614e6c8161526d565b60008083601f8401126152bb57600080fd5b5081356001600160401b038111156152d257600080fd5b6020830191508360208285010111156152ea57600080fd5b9250929050565b60008060006040848603121561530657600080fd5b61530f84614e77565b925060208401356001600160401b0381111561532a57600080fd5b615336868287016152a9565b9497909650939450505050565b6000806000806080858703121561535957600080fd5b843561536481614dc9565b9350602085013561537481614dc9565b92506040850135915060608501356001600160401b0381111561539657600080fd5b6153a287828801615096565b91505092959194509250565b6000806000606084860312156153c357600080fd5b614ee384614e77565b600080604083850312156153df57600080fd5b82356153ea81614dc9565b91506020830135614e6c81614dc9565b6000806020838503121561540d57600080fd5b82356001600160401b0381111561542357600080fd5b61542f858286016152a9565b90969095509350505050565b600181811c9082168061544f57607f821691505b60208210810361546f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561548757600080fd5b8151613b468161526d565b6020808252601590820152744d757365756d206d7573742062652061637469766560581b604082015260600190565b6020808252601390820152724d757374206f776e20746865204d6f7361696360681b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b03808316818103615520576155206154ee565b6001019392505050565b60006001600160601b03808316818103615520576155206154ee565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6000826155b057634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006020828403121561565f57600080fd5b8151613b4681614dc9565b64ffffffffff8181168382160190808211156112cf576112cf6154ee565b60006001600160c01b038281166002600160c01b03198101615520576155206154ee565b601f821115610d2957600081815260208120601f850160051c810160208610156156d35750805b601f850160051c820191505b818110156134b1578281556001016156df565b81516001600160401b0381111561570b5761570b615080565b61571f81615719845461543b565b846156ac565b602080601f831160018114615754576000841561573c5750858301515b600019600386901b1c1916600185901b1785556134b1565b600085815260208120601f198616915b8281101561578357888601518255948401946001909101908401615764565b50858210156157a15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115610b3957610b396154ee565b81810381811115610b3957610b396154ee565b6000600182016157e9576157e96154ee565b5060010190565b8082028115828204841417610b3957610b396154ee565b6001600160401b0383111561581e5761581e615080565b6158328361582c835461543b565b836156ac565b6000601f841160018114615866576000851561584e5750838201355b600019600387901b1c1916600186901b1783556115c1565b600083815260209020601f19861690835b828110156158975786850135825560209485019460019092019101615877565b50868210156158b45760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600084516158d8818460208901614d4d565b602f60f81b90830190815284516158f6816001840160208901614d4d565b605f60f81b600192909101918201528351615918816002840160208801614d4d565b64173539b7b760d91b6002929091019182015260070195945050505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60006020828403121561598e57600080fd5b5051919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615a6a816017850160208801614d4d565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615a9b816028840160208801614d4d565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615ada90830184614d71565b9695505050505050565b600060208284031215615af657600080fd5b8151613b4681614d1a565b634e487b7160e01b600052603260045260246000fd5b600081615b2657615b266154ee565b506000190190565b60008251615b40818460208701614d4d565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65649f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a264697066735822122076ce93962daec37fe7de1210bd48a4447e0590f42b7c7af0884f246436f8466764736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103505760003560e01c80636352211e116101c6578063ac8d6168116100f7578063c87b56dd11610095578063d547741f1161006f578063d547741f14610a76578063e36977cb14610a96578063e985e9c514610ab6578063f3c340cd14610aff57600080fd5b8063c87b56dd14610a14578063d42de9aa14610a34578063d539139314610a5457600080fd5b8063b40fd56e116100d1578063b40fd56e14610974578063b88d4fde14610994578063c01efa53146109b4578063c4d66de8146109f457600080fd5b8063ac8d616814610907578063af07830614610934578063af4a6c0c1461095457600080fd5b80638902436a11610164578063970525dd1161013e578063970525dd14610885578063a217fddf146108b2578063a22cb465146108c7578063a5627d9a146108e757600080fd5b80638902436a1461083057806391d148541461085057806395d89b411461087057600080fd5b806376016f4b116101a057806376016f4b146107bd57806379c07a39146107dd57806379f5f153146107fd5780638310a7da1461081057600080fd5b80636352211e1461073e57806364f4e5ef1461075e57806370a082311461079d57600080fd5b806331e781da116102a057806345e67a8c1161023e5780634f1ef286116102185780634f1ef286146106af578063512137ed146106c257806352d1902d146106e257806354cefb23146106f757600080fd5b806345e67a8c1461064b5780634bb722c61461066c5780634c9057891461068257600080fd5b806336568abe1161027a57806336568abe146105cb5780633659cfe6146105eb5780633a0e75551461060b57806342842e0e1461062b57600080fd5b806331e781da1461055e578063326d03671461058b578063342834f7146105ab57600080fd5b80631df46de71161030d578063248a9ca3116102e7578063248a9ca3146104ce5780632594c224146104fe5780632977d6971461051e5780632f2ff15d1461053e57600080fd5b80631df46de7146104605780632062f2e41461048057806323b872dd146104ae57600080fd5b806301ffc9a714610355578063033d05f11461038a57806306fdde03146103b7578063081812fc146103d9578063095ea7b3146104115780630e6a929c14610433575b600080fd5b34801561036157600080fd5b50610375610370366004614d30565b610b1f565b60405190151581526020015b60405180910390f35b34801561039657600080fd5b5061039f610b3f565b6040516001600160c01b039091168152602001610381565b3480156103c357600080fd5b506103cc610b5b565b6040516103819190614d9d565b3480156103e557600080fd5b506103f96103f4366004614db0565b610bed565b6040516001600160a01b039091168152602001610381565b34801561041d57600080fd5b5061043161042c366004614dde565b610c14565b005b34801561043f57600080fd5b5061045361044e366004614db0565b610d2e565b6040516103819190614e30565b34801561046c57600080fd5b5061043161047b366004614e43565b610e27565b34801561048c57600080fd5b506104a061049b366004614e8e565b610fd1565b604051908152602001610381565b3480156104ba57600080fd5b506104316104c9366004614ec3565b6112d6565b3480156104da57600080fd5b506104a06104e9366004614db0565b600090815260fb602052604090206001015490565b34801561050a57600080fd5b506104a0610519366004614f04565b611307565b34801561052a57600080fd5b50610431610539366004614f1f565b6113c4565b34801561054a57600080fd5b50610431610559366004614f3b565b6115c8565b34801561056a57600080fd5b5061057e610579366004614db0565b6115ed565b6040516103819190614f74565b34801561059757600080fd5b506104316105a636600461502d565b611767565b3480156105b757600080fd5b506104316105c6366004614db0565b611908565b3480156105d757600080fd5b506104316105e6366004614f3b565b611bb7565b3480156105f757600080fd5b5061043161060636600461504f565b611c35565b34801561061757600080fd5b50610431610626366004614db0565b611d14565b34801561063757600080fd5b50610431610646366004614ec3565b612015565b34801561065757600080fd5b5061012d546103f9906001600160a01b031681565b34801561067857600080fd5b506104a06113ec81565b34801561068e57600080fd5b506106a261069d366004614db0565b612030565b604051610381919061506c565b6104316106bd366004615122565b6122eb565b3480156106ce57600080fd5b5061039f6106dd366004615188565b6123b7565b3480156106ee57600080fd5b506104a06127cb565b34801561070357600080fd5b50610717610712366004614db0565b61287e565b604080516001600160c01b0390931683526001600160401b03909116602083015201610381565b34801561074a57600080fd5b506103f9610759366004614db0565b6128ae565b34801561076a57600080fd5b5061077e610779366004614f04565b61290e565b604080516001600160401b039093168352602083019190915201610381565b3480156107a957600080fd5b506104a06107b836600461504f565b6129d0565b3480156107c957600080fd5b5061057e6107d8366004614f04565b612a56565b3480156107e957600080fd5b506104316107f83660046151ce565b612bc1565b6104a061080b366004614f1f565b612c24565b34801561081c57600080fd5b5061037561082b366004614f04565b61308a565b34801561083c57600080fd5b506104a061084b366004614f04565b6130ec565b34801561085c57600080fd5b5061037561086b366004614f3b565b61337f565b34801561087c57600080fd5b506103cc6133aa565b34801561089157600080fd5b506108a56108a03660046151f9565b6133b9565b6040516103819190615223565b3480156108be57600080fd5b506104a0600081565b3480156108d357600080fd5b506104316108e236600461527b565b613464565b3480156108f357600080fd5b506104316109023660046152f1565b61346f565b34801561091357600080fd5b5061091e62093a8081565b60405164ffffffffff9091168152602001610381565b34801561094057600080fd5b506104a061094f366004614f04565b6134b9565b34801561096057600080fd5b506104a061096f3660046151f9565b6134df565b34801561098057600080fd5b5061043161098f36600461504f565b6134fd565b3480156109a057600080fd5b506104316109af366004615343565b613520565b3480156109c057600080fd5b506109d46109cf366004614f04565b613558565b604080516001600160401b03938416815292909116602083015201610381565b348015610a0057600080fd5b50610431610a0f36600461504f565b61369d565b348015610a2057600080fd5b506103cc610a2f366004614db0565b61382f565b348015610a4057600080fd5b50610375610a4f366004614f04565b613a22565b348015610a6057600080fd5b506104a0600080516020615b9283398151915281565b348015610a8257600080fd5b50610431610a91366004614f3b565b613ac1565b348015610aa257600080fd5b506104a0610ab13660046153ae565b613ae6565b348015610ac257600080fd5b50610375610ad13660046153cc565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b348015610b0b57600080fd5b50610431610b1a3660046153fa565b613b4d565b6000610b2a82613b6e565b80610b395750610b3982613bbe565b92915050565b6000610b49613be3565b600101546001600160c01b0316919050565b606060658054610b6a9061543b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b969061543b565b8015610be35780601f10610bb857610100808354040283529160200191610be3565b820191906000526020600020905b815481529060010190602001808311610bc657829003601f168201915b5050505050905090565b6000610bf882613c07565b506000908152606960205260409020546001600160a01b031690565b6000610c1f826128ae565b9050806001600160a01b0316836001600160a01b031603610c915760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610cad5750610cad8133610ad1565b610d1f5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610c88565b610d298383613c66565b505050565b600080610d3a8361287e565b509050610d45613be3565b600101546001600160c01b039081169082161115610d9a5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081bdc9a59da5b985b125960721b6044820152606401610c88565b6000610da4613be3565b6001600160c01b03831660009081526002919091016020526040902090506001600782015460ff166001811115610ddd57610ddd614e0a565b03610dec575060029392505050565b610df4613be3565b6000858152600491909101602052604081206001015460ff169003610e1d575060009392505050565b5060019392505050565b61012d546001600160a01b031615801590610eb5575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb59190615475565b610ed15760405162461bcd60e51b8152600401610c8890615492565b8133610edc826128ae565b6001600160a01b031614610f025760405162461bcd60e51b8152600401610c88906154c1565b6000610f0d8461287e565b509050610f1981613a22565b610f565760405162461bcd60e51b815260206004820152600e60248201526d4e6f20626964206f6e676f696e6760901b6044820152606401610c88565b6000610f60613be3565b6000868152600491909101602052604090206002019050610f7f613be3565b6001600160c01b03831660009081526002918201602052604090206008015482820155600180830180548793919260ff19909116918490811115610fc557610fc5614e0a565b02179055505050505050565b61012d546000906001600160a01b031615801590611062575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561103e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110629190615475565b61107e5760405162461bcd60e51b8152600401610c8890615492565b600080516020615b9283398151915261109681613cd4565b60006110a0613be3565b6001600160c01b038516600090815260039190910160205260409020546001600160401b03161161111e5760405162461bcd60e51b815260206004820152602260248201527f4f726967696e616c206d75737420626520696e697469616c697a6564206669726044820152611cdd60f21b6064820152608401610c88565b6000611128613be3565b6001600160c01b03851660009081526003919091016020526040812080546001600160401b03169161115983615504565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550905061118984826134df565b92506040518060600160405280848152602001600060ff168152602001604051806060016040528060008152602001600060028111156111cb576111cb614e0a565b8152600060209091015290526111df613be3565b6000858152600491909101602090815260409182902083518155838201516001808301805460ff90931660ff1993841617905593850151805160028085019182559482015160038501805495979396929591949093911691849081111561124857611248614e0a565b0217905550604082015181600201555050905050611264613be3565b6001600160c01b0385166000908152600291820160205260409020018054600160601b90046001600160601b031690600c61129e8361552a565b91906101000a8154816001600160601b0302191690836001600160601b03160217905550506112cd8584613cde565b505b5092915050565b6112e03382613cf8565b6112fc5760405162461bcd60e51b8152600401610c8890615546565b610d29838383613d76565b600080611312613be3565b6001600160c01b038416600090815260079190910160205260409020549050806113745760405162461bcd60e51b8152602060048201526013602482015272139bc81c995cd85b19481c1c9a58d9481cd95d606a1b6044820152606401610c88565b600061137e613be3565b6001600160c01b038516600090815260029182016020526040902001546113b0906001600160601b0316612710615593565b90506113bc8282613ee7565b949350505050565b61012d546001600160a01b031615801590611452575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561142e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114529190615475565b61146e5760405162461bcd60e51b8152600401610c8890615492565b6000611478613be3565b6002016000846001600160c01b03166001600160c01b031681526020019081526020016000209050818160040154111580156114b8575080600501548211155b6114ff5760405162461bcd60e51b81526020600482015260186024820152774d7573742062652077697468696e207468652072616e676560401b6044820152606401610c88565b6000611509613be3565b6001600160c01b038516600090815260039190910160205260409020546001600160401b0316905060015b816001600160401b0316816001600160401b031610156115c157600061155a86836134df565b90503361157c826000908152606760205260409020546001600160a01b031690565b6001600160a01b0316036115ae576000611594613be3565b600083815260049190910160205260409020600201869055505b50806115b981615504565b915050611534565b5050505050565b600082815260fb60205260409020600101546115e381613cd4565b610d298383613f18565b6115f5614c88565b60006116008361287e565b50905061160b613be3565b6001600160c01b0380831660009081526002928301602090815260409182902082516101408101845281549094168452600181015491840191909152928301546001600160601b0380821692840192909252600160601b900416606082015260038201546080820152600482015460a0820152600582015460c082015260068201805491929160e0840191906116a09061543b565b80601f01602080910402602001604051908101604052809291908181526020018280546116cc9061543b565b80156117195780601f106116ee57610100808354040283529160200191611719565b820191906000526020600020905b8154815290600101906020018083116116fc57829003601f168201915b5050509183525050600782015460209091019060ff16600181111561174057611740614e0a565b600181111561175157611751614e0a565b8152602001600882015481525050915050919050565b61012d546001600160a01b0316158015906117f5575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f59190615475565b6118115760405162461bcd60e51b8152600401610c8890615492565b813361181c826128ae565b6001600160a01b0316146118425760405162461bcd60e51b8152600401610c88906154c1565b600061184d8461287e565b509050600061185a613be3565b6002016000836001600160c01b03166001600160c01b0316815260200190815260200160002090508381600401541115801561189a575080600501548411155b6118e15760405162461bcd60e51b81526020600482015260186024820152774d7573742062652077697468696e207468652072616e676560401b6044820152606401610c88565b60006118eb613be3565b600096875260040160205250506040909320600201919091555050565b61012d546001600160a01b031615801590611996575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119969190615475565b6119b25760405162461bcd60e51b8152600401610c8890615492565b60006119bc613be3565b60008381526005919091016020526040902090506002600482810154600160501b900460ff16908111156119f2576119f2614e0a565b14611a4a5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792072656a656374656420626964732063616e20626520726566756e64604482015261195960f21b6064820152608401610c88565b60018101546001600160a01b03163314611ab85760405162461bcd60e51b815260206004820152602960248201527f4f6e6c7920746865206269646465722063616e20726574726965766520697473604482015268081bdddb88199d5b9960ba1b6064820152608401610c88565b6000611ac2613be3565b60008481526006919091016020526040808220549051909250339083908381818185875af1925050503d8060008114611b17576040519150601f19603f3d011682016040523d82523d6000602084013e611b1c565b606091505b5050905080611b605760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b6044820152606401610c88565b60048301805460ff60501b1916600160521b17905560028301546040516001600160c01b039091169085907f45368e9994df879f0e9d3c8e00a81f2745c25f6f5c8519296d97d1992ba2233190600090a350505050565b6001600160a01b0381163314611c275760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610c88565b611c318282613f9e565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611c7d5760405162461bcd60e51b8152600401610c88906155b5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cc6600080516020615b4b833981519152546001600160a01b031690565b6001600160a01b031614611cec5760405162461bcd60e51b8152600401610c8890615601565b611cf581614005565b60408051600080825260208201909252611d1191839190614010565b50565b61012d546001600160a01b031615801590611da2575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da29190615475565b611dbe5760405162461bcd60e51b8152600401610c8890615492565b6000611dc8613be3565b60008381526005919091016020526040902090506001600482810154600160501b900460ff1690811115611dfe57611dfe614e0a565b14611e425760405162461bcd60e51b8152602060048201526014602482015273109a59081b5d5cdd081899481858d8d95c1d195960621b6044820152606401610c88565b6000611e4c613be3565b6002838101546001600160c01b031660009081529101602052604090206003830154909150611e79613be3565b82546001600160c01b0390811660009081526007928301602052604080822094909455918401805460ff19166001179055600285015492518693909116917fc8af5b62fdee6b689bb033af55802065de039199e8773211c391e2bc629f9bff91a361012d60009054906101000a90046001600160a01b03166001600160a01b031663d0d851d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f52919061564d565b600183810154908301546040516322dca8bb60e21b81526001600160a01b0392831660048201526024810191909152911690638b72a2ec90604401600060405180830381600087803b158015611fa757600080fd5b505af1158015611fbb573d6000803e3d6000fd5b5050505060048201805460ff60501b1916600360501b17905560028201546040516001600160c01b039091169084907f99df1ef09da39d623befdb16807aa77c3019cdab1513e0911a6a9b5cbeb7717190600090a3505050565b610d2983838360405180602001604052806000815250613520565b61012d546000906001600160a01b0316158015906120c1575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561209d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c19190615475565b6120dd5760405162461bcd60e51b8152600401610c8890615492565b60006120e7613be3565b6000848152600591909101602052604081209150600482810154600160501b900460ff169081111561211b5761211b614e0a565b146121745760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206269647320696e2070726f706f73616c2063616e20626520757064604482015263185d195960e21b6064820152608401610c88565b600481015442906121979064ffffffffff6501000000000082048116911661566a565b64ffffffffff16106121e15760405162461bcd60e51b815260206004820152601360248201527242696420766f7465206973206f6e676f696e6760681b6044820152606401610c88565b60028101546121f8906001600160c01b031661308a565b612203576002612206565b60015b81600401600a6101000a81548160ff0219169083600481111561222b5761222b614e0a565b02179055506001600482810154600160501b900460ff169081111561225257612252614e0a565b036122985760028101546040516001600160c01b039091169084907fb3da334e87bb12429fffd68719932238d83910609c56e8c29aa40a792ad13a2190600090a36122d5565b60028101546040516001600160c01b039091169084907fef7c1c563e3b3cbcb87042244eb19ffd95036cade90e0e582f71e3d276a8e8b990600090a35b60040154600160501b900460ff1690505b919050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036123335760405162461bcd60e51b8152600401610c88906155b5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661237c600080516020615b4b833981519152546001600160a01b031690565b6001600160a01b0316146123a25760405162461bcd60e51b8152600401610c8890615601565b6123ab82614005565b611c3182826001614010565b61012d546000906001600160a01b031615801590612448575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124489190615475565b6124645760405162461bcd60e51b8152600401610c8890615492565b600080516020615b9283398151915261247c81613cd4565b61012d5460408051630d0d851d60e41b8152905130926001600160a01b03169163d0d851d09160048083019260209291908290030181865afa1580156124c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ea919061564d565b6001600160a01b03166358178168896040518263ffffffff1660e01b815260040161251791815260200190565b602060405180830381865afa158015612534573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612558919061564d565b6001600160a01b0316146125ae5760405162461bcd60e51b815260206004820152601e60248201527f54686520636f6e7472616374206d757374206f776e207468652070756e6b00006044820152606401610c88565b6125b6613be3565b60010180546000906125d0906001600160c01b0316615688565b91906101000a8154816001600160c01b0302191690836001600160c01b03160217905591506125fd613be3565b6001600160c01b0383166000908152600391909101602052604081208054909190612630906001600160401b0316615504565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550604051806101400160405280836001600160c01b03168152602001888152602001876001600160401b03166001600160601b0316815260200160006001600160601b03168152602001868152602001858152602001848152602001604051806020016040528060008152508152602001600060018111156126d7576126d7614e0a565b815260200160008152506126e9613be3565b6001600160c01b038085166000908152600292830160209081526040918290208551815494166001600160c01b031994851617815590850151600182015590840151928101805460608601516001600160601b03908116600160601b029190941693909416929092179290921790556080820151600382015560a0820151600482015560c0820151600582015560e0820151600682019061278a90826156f2565b5061010082015160078201805460ff1916600183818111156127ae576127ae614e0a565b021790555061012082015181600801559050505095945050505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461286b5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610c88565b50600080516020615b4b83398151915290565b600080604083901c60016040600161289691906157b1565b6001901b6128a491906157c4565b9094931692915050565b6000818152606760205260408120546001600160a01b031680610b395760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610c88565b600080600061291b613be3565b6001600160c01b038516600090815260039190910160205260409020546001600160401b0316905060015b816001600160401b0316816001600160401b031610156129c957600061296a613be3565b600401600061297988856134df565b815260208101919091526040016000206002810154909150156129b657846129a081615504565b60028301549096506129b39150856157b1565b93505b50806129c181615504565b915050612946565b5050915091565b60006001600160a01b038216612a3a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610c88565b506001600160a01b031660009081526068602052604090205490565b612a5e614c88565b612a66613be3565b6001600160c01b0380841660009081526002928301602090815260409182902082516101408101845281549094168452600181015491840191909152928301546001600160601b0380821692840192909252600160601b900416606082015260038201546080820152600482015460a0820152600582015460c082015260068201805491929160e084019190612afb9061543b565b80601f0160208091040260200160405190810160405280929190818152602001828054612b279061543b565b8015612b745780601f10612b4957610100808354040283529160200191612b74565b820191906000526020600020905b815481529060010190602001808311612b5757829003601f168201915b5050509183525050600782015460209091019060ff166001811115612b9b57612b9b614e0a565b6001811115612bac57612bac614e0a565b81526020016008820154815250509050919050565b8133612bcc826128ae565b6001600160a01b031614612bf25760405162461bcd60e51b8152600401610c88906154c1565b6000612bfc613be3565b600094855260040160205250506040909120600101805460ff191660ff909216919091179055565b61012d546000906001600160a01b031615801590612cb5575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb59190615475565b612cd15760405162461bcd60e51b8152600401610c8890615492565b826000612cdc613be3565b6001600160c01b0383166000908152600291909101602052604090206007015460ff166001811115612d1057612d10614e0a565b14612d4a5760405162461bcd60e51b815260206004820152600a6024820152694e6f742061637469766560b01b6044820152606401610c88565b6000612d54613be3565b6001600160c01b03861660009081526002919091016020526040902060048101549091508410801590612d8f5750612d8b856134b9565b8410155b8015612d9f575080600501548411155b612e045760405162461bcd60e51b815260206004820152603060248201527f426964207072696365206d7573742062652077697468696e207468652072657360448201526f657276652070726963652072616e676560801b6064820152608401610c88565b833414612e615760405162461bcd60e51b815260206004820152602560248201527f4d7573742073656e64207468652065786163742076616c75652061732070726f6044820152641c1bdcd95960da1b6064820152608401610c88565b60088101548015612ee6576000612e7782612030565b90506002816004811115612e8d57612e8d614e0a565b14612ee45760405162461bcd60e51b815260206004820152602160248201527f5468652070726576696f757320626964206d7573742062652072656a656374656044820152601960fa1b6064820152608401610c88565b505b6000612ef3873342613ae6565b6040805160e0810182528281523360208201526001600160c01b038a1691810191909152606081018890524264ffffffffff16608082015262093a8060a0820152600060c0820152909150612f46613be3565b6000838152600591909101602090815260409182902083518155908301516001820180546001600160a01b039092166001600160a01b0319909216919091179055908201516002820180546001600160c01b039092166001600160c01b03199092169190911790556060820151600382015560808201516004808301805460a086015164ffffffffff908116650100000000000269ffffffffffffffffffff199092169416939093179290921780835560c0850151929160ff60501b1990911690600160501b90849081111561301e5761301e614e0a565b02179055509050503461302f613be3565b60008381526006919091016020526040808220929092556008850183905590516001600160c01b0389169183917f8533454634e1656b9e2daf5da3b90e4d937516874c552e83bec683277b6109a69190a39695505050505050565b60008061309683613558565b50905060006130a3613be3565b6001600160c01b038516600090815260029182016020526040902001546001600160601b031690506130d7816113ec613ee7565b826001600160401b0316101592505050919050565b61012d546000906001600160a01b03161580159061317d575061012d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015613159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317d9190615475565b6131995760405162461bcd60e51b8152600401610c8890615492565b6000806131a4613be3565b6001600160c01b038516600090815260039190910160205260409020546001600160401b0316905060015b816001600160401b0316816001600160401b0316101561324f5760006131f586836134df565b905033613217826000908152606760205260409020546001600160a01b031690565b6001600160a01b03160361323c5761322e8161417b565b83613238816157d7565b9450505b508061324781615504565b9150506131cf565b50600082116132a05760405162461bcd60e51b815260206004820152601860248201527f4e6f204d6f6e6f73206f776e656420746f20726566756e6400000000000000006044820152606401610c88565b6132a984611307565b6132b390836157f0565b604051909350600090339085908381818185875af1925050503d80600081146132f8576040519150601f19603f3d011682016040523d82523d6000602084013e6132fd565b606091505b50509050806133415760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b6044820152606401610c88565b60405133906001600160c01b038716907fc6d91402e00d43c03e126a374dddd6386f8764fd6bbd8453dabf5e2e37545f0890600090a3505050919050565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060668054610b6a9061543b565b6133c1614cdc565b6133c9613be3565b60040160006133d885856134df565b8152602080820192909252604090810160002081516060808201845282548252600183015460ff908116838701528451918201855260028085018054845260038601549497959688019593949093850192169081111561343a5761343a614e0a565b600281111561344b5761344b614e0a565b8152600291909101546020909101529052509392505050565b611c3133838361421e565b600061347a81613cd4565b6000613484613be3565b6001600160c01b0386166000908152600291909101602052604090209050600681016134b1848683615807565b505050505050565b60008060006134c78461290e565b90925090506113bc6001600160401b03831682615593565b6001600160401b031660409190911b67ffffffffffffffff19161790565b600061350881613cd4565b611c31600080516020615b9283398151915283613f18565b61352a3383613cf8565b6135465760405162461bcd60e51b8152600401610c8890615546565b613552848484846142ec565b50505050565b60008061356483613a22565b61357357506000928392509050565b600061357d613be3565b6001600160c01b038516600090815260039190910160205260408120546001600160401b031691506135ad613be3565b6001600160c01b03861660009081526002919091016020526040902060080154905060015b826001600160401b0316816001600160401b031610156136955760006135f6613be3565b600401600061360589856134df565b81526020019081526020016000206002019050828160020154036136825760018082015460ff16600281111561363d5761363d614e0a565b03613654578561364c81615504565b965050613682565b6002600182015460ff16600281111561366f5761366f614e0a565b03613682578461367e81615504565b9550505b508061368d81615504565b9150506135d2565b505050915091565b600054610100900460ff16158080156136bd5750600054600160ff909116105b806136d75750303b1580156136d7575060005460ff166001145b61373a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c88565b6000805460ff19166001179055801561375d576000805461ff0019166101001790555b6137b46040518060400160405280601281526020017143727970746f50756e6b73204d6f7361696360701b8152506040518060400160405280600b81526020016a50554e4b534d4f5341494360a81b81525061431f565b61012d80546001600160a01b0319166001600160a01b0384161790556137db600033613f18565b6137e6600083613f18565b8015611c31576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6060600061383c8361287e565b5090506000613849613be3565b6001600160c01b03831660009081526002919091016020526040902090506001600782015460ff16600181111561388257613882614e0a565b036139215761388f613be3565b805461389a9061543b565b80601f01602080910402602001604051908101604052809291908181526020018280546138c69061543b565b80156139135780601f106138e857610100808354040283529160200191613913565b820191906000526020600020905b8154815290600101906020018083116138f657829003601f168201915b505050505092505050919050565b60008160060180546139329061543b565b80601f016020809104026020016040519081016040528092919081815260200182805461395e9061543b565b80156139ab5780601f10613980576101008083540402835291602001916139ab565b820191906000526020600020905b81548152906001019060200180831161398e57829003601f168201915b5050505050905060006139bc613be3565b6000878152600491909101602052604090206001908101549084015460ff909116915082906139ea90614350565b6139f68360ff16614350565b604051602001613a08939291906158c6565b604051602081830303815290604052945050505050919050565b600080613a2d613be3565b6001600160c01b038416600090815260029190910160205260408120600801549150613a57613be3565b60008381526005919091016020526040902090508115801590613a86575060018101546001600160a01b031615155b80156113bc575060048101544290613ab09064ffffffffff6501000000000082048116911661566a565b64ffffffffff161015949350505050565b600082815260fb6020526040902060010154613adc81613cd4565b610d298383613f9e565b6040805167ffffffffffffffff1985831b166020808301919091526bffffffffffffffffffffffff19606086901b1660388301526001600160d81b031960d885901b16604c83015282516031818403018152605190920190925280519101205b9392505050565b6000613b5881613cd4565b8282613b62613be3565b91613552919083615807565b60006001600160e01b031982166380ac58cd60e01b1480613b9f57506001600160e01b03198216635b5e139f60e01b145b80610b3957506301ffc9a760e01b6001600160e01b0319831614610b39565b60006001600160e01b03198216637965db0b60e01b1480610b395750610b3982613b6e565b7f5cafb8bef6ef913d32c72906048dcf5e6edbee573e07510aef7565bd03ff9d2890565b6000818152606760205260409020546001600160a01b0316611d115760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610c88565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190613c9b826128ae565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611d1181336143e2565b611c3182826040518060200160405280600081525061443b565b600080613d04836128ae565b9050806001600160a01b0316846001600160a01b03161480613d4b57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b806113bc5750836001600160a01b0316613d6484610bed565b6001600160a01b031614949350505050565b826001600160a01b0316613d89826128ae565b6001600160a01b031614613daf5760405162461bcd60e51b8152600401610c8890615937565b6001600160a01b038216613e115760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c88565b613e1e838383600161446e565b826001600160a01b0316613e31826128ae565b6001600160a01b031614613e575760405162461bcd60e51b8152600401610c8890615937565b600081815260696020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260688552838620805460001901905590871680865283862080546001019055868652606790945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000612710613ef683856157f0565b1015613f0157600080fd5b612710613f0e83856157f0565b613b469190615593565b613f22828261337f565b611c3157600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613f5a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b613fa8828261337f565b15611c3157600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611c3181613cd4565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561404357610d29836144f6565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561409d575060408051601f3d908101601f1916820190925261409a9181019061597c565b60015b6141005760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610c88565b600080516020615b4b833981519152811461416f5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610c88565b50610d29838383614592565b6000614186826128ae565b905061419681600084600161446e565b61419f826128ae565b600083815260696020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526068845282852080546000190190558785526067909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b03160361427f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c88565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6142f7848484613d76565b614303848484846145b7565b6135525760405162461bcd60e51b8152600401610c8890615995565b600054610100900460ff166143465760405162461bcd60e51b8152600401610c88906159e7565b611c3182826146b8565b6060600061435d836146f8565b60010190506000816001600160401b0381111561437c5761437c615080565b6040519080825280601f01601f1916602001820160405280156143a6576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846143b057509392505050565b6143ec828261337f565b611c31576143f9816147d0565b6144048360206147e2565b604051602001614415929190615a32565b60408051601f198184030181529082905262461bcd60e51b8252610c8891600401614d9d565b614445838361497d565b61445260008484846145b7565b610d295760405162461bcd60e51b8152600401610c8890615995565b6001811115613552576001600160a01b038416156144b4576001600160a01b038416600090815260686020526040812080548392906144ae9084906157c4565b90915550505b6001600160a01b03831615613552576001600160a01b038316600090815260686020526040812080548392906144eb9084906157b1565b909155505050505050565b6001600160a01b0381163b6145635760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610c88565b600080516020615b4b83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61459b83614b16565b6000825111806145a85750805b15610d29576135528383614b56565b60006001600160a01b0384163b156146ad57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906145fb903390899088908890600401615aa7565b6020604051808303816000875af1925050508015614636575060408051601f3d908101601f1916820190925261463391810190615ae4565b60015b614693573d808015614664576040519150601f19603f3d011682016040523d82523d6000602084013e614669565b606091505b50805160000361468b5760405162461bcd60e51b8152600401610c8890615995565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506113bc565b506001949350505050565b600054610100900460ff166146df5760405162461bcd60e51b8152600401610c88906159e7565b60656146eb83826156f2565b506066610d2982826156f2565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106147375772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614763576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061478157662386f26fc10000830492506010015b6305f5e1008310614799576305f5e100830492506008015b61271083106147ad57612710830492506004015b606483106147bf576064830492506002015b600a8310610b395760010192915050565b6060610b396001600160a01b03831660145b606060006147f18360026157f0565b6147fc9060026157b1565b6001600160401b0381111561481357614813615080565b6040519080825280601f01601f19166020018201604052801561483d576020820181803683370190505b509050600360fc1b8160008151811061485857614858615b01565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061488757614887615b01565b60200101906001600160f81b031916908160001a90535060006148ab8460026157f0565b6148b69060016157b1565b90505b600181111561492e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106148ea576148ea615b01565b1a60f81b82828151811061490057614900615b01565b60200101906001600160f81b031916908160001a90535060049490941c9361492781615b17565b90506148b9565b508315613b465760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c88565b6001600160a01b0382166149d35760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c88565b6000818152606760205260409020546001600160a01b031615614a385760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c88565b614a4660008383600161446e565b6000818152606760205260409020546001600160a01b031615614aab5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c88565b6001600160a01b038216600081815260686020908152604080832080546001019055848352606790915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b614b1f816144f6565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b614bbe5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610c88565b600080846001600160a01b031684604051614bd99190615b2e565b600060405180830381855af49150503d8060008114614c14576040519150601f19603f3d011682016040523d82523d6000602084013e614c19565b606091505b5091509150614c418282604051806060016040528060278152602001615b6b60279139614c4a565b95945050505050565b60608315614c59575081613b46565b613b468383815115614c6e5781518083602001fd5b8060405162461bcd60e51b8152600401610c889190614d9d565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820152906101008201905b8152602001600081525090565b6040805160608101825260008082526020820152908101614cfb614d00565b905290565b604080516060810190915260008082526020820190614ccf565b6001600160e01b031981168114611d1157600080fd5b600060208284031215614d4257600080fd5b8135613b4681614d1a565b60005b83811015614d68578181015183820152602001614d50565b50506000910152565b60008151808452614d89816020860160208601614d4d565b601f01601f19169290920160200192915050565b602081526000613b466020830184614d71565b600060208284031215614dc257600080fd5b5035919050565b6001600160a01b0381168114611d1157600080fd5b60008060408385031215614df157600080fd5b8235614dfc81614dc9565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60038110611d1157611d11614e0a565b60208101614e3d83614e20565b91905290565b60008060408385031215614e5657600080fd5b82359150602083013560038110614e6c57600080fd5b809150509250929050565b80356001600160c01b03811681146122e657600080fd5b60008060408385031215614ea157600080fd5b8235614eac81614dc9565b9150614eba60208401614e77565b90509250929050565b600080600060608486031215614ed857600080fd5b8335614ee381614dc9565b92506020840135614ef381614dc9565b929592945050506040919091013590565b600060208284031215614f1657600080fd5b613b4682614e77565b60008060408385031215614f3257600080fd5b614dfc83614e77565b60008060408385031215614f4e57600080fd5b823591506020830135614e6c81614dc9565b60028110614f7057614f70614e0a565b9052565b60208152614f8e6020820183516001600160c01b03169052565b6020820151604082015260006040830151614fb460608401826001600160601b03169052565b5060608301516001600160601b038116608084015250608083015160a083015260a083015160c083015260c083015160e083015260e08301516101406101008181860152615006610160860184614d71565b9086015190925061012061501c86820183614f60565b959095015193019290925250919050565b6000806040838503121561504057600080fd5b50508035926020909101359150565b60006020828403121561506157600080fd5b8135613b4681614dc9565b6020810160058310614e3d57614e3d614e0a565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126150a757600080fd5b81356001600160401b03808211156150c1576150c1615080565b604051601f8301601f19908116603f011681019082821181831017156150e9576150e9615080565b8160405283815286602085880101111561510257600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561513557600080fd5b823561514081614dc9565b915060208301356001600160401b0381111561515b57600080fd5b61516785828601615096565b9150509250929050565b80356001600160401b03811681146122e657600080fd5b600080600080600060a086880312156151a057600080fd5b853594506151b060208701615171565b94979496505050506040830135926060810135926080909101359150565b600080604083850312156151e157600080fd5b82359150602083013560ff81168114614e6c57600080fd5b6000806040838503121561520c57600080fd5b61521583614e77565b9150614eba60208401615171565b600060a0820190508251825260ff6020840151166020830152604083015180516040840152602081015161525681614e20565b606084015260400151608090920191909152919050565b8015158114611d1157600080fd5b6000806040838503121561528e57600080fd5b823561529981614dc9565b91506020830135614e6c8161526d565b60008083601f8401126152bb57600080fd5b5081356001600160401b038111156152d257600080fd5b6020830191508360208285010111156152ea57600080fd5b9250929050565b60008060006040848603121561530657600080fd5b61530f84614e77565b925060208401356001600160401b0381111561532a57600080fd5b615336868287016152a9565b9497909650939450505050565b6000806000806080858703121561535957600080fd5b843561536481614dc9565b9350602085013561537481614dc9565b92506040850135915060608501356001600160401b0381111561539657600080fd5b6153a287828801615096565b91505092959194509250565b6000806000606084860312156153c357600080fd5b614ee384614e77565b600080604083850312156153df57600080fd5b82356153ea81614dc9565b91506020830135614e6c81614dc9565b6000806020838503121561540d57600080fd5b82356001600160401b0381111561542357600080fd5b61542f858286016152a9565b90969095509350505050565b600181811c9082168061544f57607f821691505b60208210810361546f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561548757600080fd5b8151613b468161526d565b6020808252601590820152744d757365756d206d7573742062652061637469766560581b604082015260600190565b6020808252601390820152724d757374206f776e20746865204d6f7361696360681b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b03808316818103615520576155206154ee565b6001019392505050565b60006001600160601b03808316818103615520576155206154ee565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6000826155b057634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006020828403121561565f57600080fd5b8151613b4681614dc9565b64ffffffffff8181168382160190808211156112cf576112cf6154ee565b60006001600160c01b038281166002600160c01b03198101615520576155206154ee565b601f821115610d2957600081815260208120601f850160051c810160208610156156d35750805b601f850160051c820191505b818110156134b1578281556001016156df565b81516001600160401b0381111561570b5761570b615080565b61571f81615719845461543b565b846156ac565b602080601f831160018114615754576000841561573c5750858301515b600019600386901b1c1916600185901b1785556134b1565b600085815260208120601f198616915b8281101561578357888601518255948401946001909101908401615764565b50858210156157a15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115610b3957610b396154ee565b81810381811115610b3957610b396154ee565b6000600182016157e9576157e96154ee565b5060010190565b8082028115828204841417610b3957610b396154ee565b6001600160401b0383111561581e5761581e615080565b6158328361582c835461543b565b836156ac565b6000601f841160018114615866576000851561584e5750838201355b600019600387901b1c1916600186901b1783556115c1565b600083815260209020601f19861690835b828110156158975786850135825560209485019460019092019101615877565b50868210156158b45760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600084516158d8818460208901614d4d565b602f60f81b90830190815284516158f6816001840160208901614d4d565b605f60f81b600192909101918201528351615918816002840160208801614d4d565b64173539b7b760d91b6002929091019182015260070195945050505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60006020828403121561598e57600080fd5b5051919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615a6a816017850160208801614d4d565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615a9b816028840160208801614d4d565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615ada90830184614d71565b9695505050505050565b600060208284031215615af657600080fd5b8151613b4681614d1a565b634e487b7160e01b600052603260045260246000fd5b600081615b2657615b266154ee565b506000190190565b60008251615b40818460208701614d4d565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65649f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a264697066735822122076ce93962daec37fe7de1210bd48a4447e0590f42b7c7af0884f246436f8466764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 804,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 807,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4065,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4448,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2638,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 2640,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 2644,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2648,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2652,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2658,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3578,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 786,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1101,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10346,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "museum",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(CryptoPunksMuseum)12136"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CryptoPunksMuseum)12136": {
        "encoding": "inplace",
        "label": "contract CryptoPunksMuseum",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}