{
  "address": "0x86cedcb6Fc9De54ada6Aece4b17B1C2f14C610e8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "museumAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "ticketQuantity",
          "type": "uint96"
        }
      ],
      "name": "Contributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetMaxPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "totalTicketSupply",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitTicketPrice",
          "type": "uint256"
        }
      ],
      "name": "GroupCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "GroupWon",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CURATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_RESERVE_PRICE_BPS",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_RESERVE_PRICE_BPS",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TICKET_SUPPLY_PER_GROUP",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "purchasePrice",
          "type": "uint256"
        }
      ],
      "name": "calculateMaxReservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxReservePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "purchasePrice",
          "type": "uint256"
        }
      ],
      "name": "calculateMinReservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minReservePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "mosaicIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        },
        {
          "internalType": "uint64",
          "name": "ticketQuantity",
          "type": "uint64"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetPunkId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetMaxPrice",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "getGroup",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint192",
              "name": "id",
              "type": "uint192"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "targetPunkId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetMaxPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "totalTicketSupply",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "unitTicketPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalContribution",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "ticketsBought",
              "type": "uint64"
            },
            {
              "internalType": "uint40",
              "name": "expiresAt",
              "type": "uint40"
            },
            {
              "internalType": "enum UsingCryptoPunksGroupRegistryStructs.GroupStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "purchasePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint192",
              "name": "originalId",
              "type": "uint192"
            },
            {
              "internalType": "string",
              "name": "metadataUri",
              "type": "string"
            }
          ],
          "internalType": "struct UsingCryptoPunksGroupRegistryStructs.Group",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "getGroupLifeCycle",
      "outputs": [
        {
          "internalType": "enum UsingCryptoPunksGroupRegistryStructs.GroupLifeCycle",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "getGroupTotalContribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalContribution",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inquired",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "getTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inquired",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "hasContribution",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inquired",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "isCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestGroupId",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "museum",
      "outputs": [
        {
          "internalType": "contract CryptoPunksMuseum",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "refundExpired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4326542ea666749da9d3d0da21c291b1bd8511c87810d5742bb5785758860e99",
  "receipt": {
    "to": null,
    "from": "0x4eF26a3129b91Ee21d5E9Ed963e6549B531C3744",
    "contractAddress": "0x86cedcb6Fc9De54ada6Aece4b17B1C2f14C610e8",
    "transactionIndex": 36,
    "gasUsed": "3756535",
    "logsBloom": "0x
    "blockHash": "0x9505b209cf387f2a965ad8e9696f42aa037eb8bda51b9f89f7f14fae744226f1",
    "transactionHash": "0x4326542ea666749da9d3d0da21c291b1bd8511c87810d5742bb5785758860e99",
    "logs": [
      {
        "transactionIndex": 36,
        "blockNumber": 8517470,
        "transactionHash": "0x4326542ea666749da9d3d0da21c291b1bd8511c87810d5742bb5785758860e99",
        "address": "0x86cedcb6Fc9De54ada6Aece4b17B1C2f14C610e8",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ef26a3129b91ee21d5e9ed963e6549b531c3744",
          "0x0000000000000000000000004ef26a3129b91ee21d5e9ed963e6549b531c3744"
        ],
        "data": "0x",
        "logIndex": 121,
        "blockHash": "0x9505b209cf387f2a965ad8e9696f42aa037eb8bda51b9f89f7f14fae744226f1"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 8517470,
        "transactionHash": "0x4326542ea666749da9d3d0da21c291b1bd8511c87810d5742bb5785758860e99",
        "address": "0x86cedcb6Fc9De54ada6Aece4b17B1C2f14C610e8",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x850d585eb7f024ccee5e68e55f2c26cc72e1e6ee456acf62135757a5eb9d4a10",
          "0x0000000000000000000000004ef26a3129b91ee21d5e9ed963e6549b531c3744",
          "0x0000000000000000000000004ef26a3129b91ee21d5e9ed963e6549b531c3744"
        ],
        "data": "0x",
        "logIndex": 122,
        "blockHash": "0x9505b209cf387f2a965ad8e9696f42aa037eb8bda51b9f89f7f14fae744226f1"
      }
    ],
    "blockNumber": 8517470,
    "cumulativeGasUsed": "12563382",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb74a26889865E48cFa95dA4024b8aD087319d959"
  ],
  "numDeployments": 1,
  "solcInputHash": "b6bcd038630f18c266b259c7b1274b08",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"museumAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"ticketQuantity\",\"type\":\"uint96\"}],\"name\":\"Contributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetMaxPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"totalTicketSupply\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitTicketPrice\",\"type\":\"uint256\"}],\"name\":\"GroupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"GroupWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CURATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RESERVE_PRICE_BPS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RESERVE_PRICE_BPS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TICKET_SUPPLY_PER_GROUP\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"}],\"name\":\"calculateMaxReservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxReservePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"}],\"name\":\"calculateMinReservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minReservePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"mosaicIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"ticketQuantity\",\"type\":\"uint64\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetPunkId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetMaxPrice\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"getGroup\",\"outputs\":[{\"components\":[{\"internalType\":\"uint192\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetPunkId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetMaxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"totalTicketSupply\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"unitTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"ticketsBought\",\"type\":\"uint64\"},{\"internalType\":\"uint40\",\"name\":\"expiresAt\",\"type\":\"uint40\"},{\"internalType\":\"enum UsingCryptoPunksGroupRegistryStructs.GroupStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"}],\"internalType\":\"struct UsingCryptoPunksGroupRegistryStructs.Group\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"getGroupLifeCycle\",\"outputs\":[{\"internalType\":\"enum UsingCryptoPunksGroupRegistryStructs.GroupLifeCycle\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"getGroupTotalContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalContribution\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inquired\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"getTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inquired\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"hasContribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inquired\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"isCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestGroupId\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museum\",\"outputs\":[{\"internalType\":\"contract CryptoPunksMuseum\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"refundExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"buy(uint192)\":{\"details\":\"Can be tried as long as the group is OPEN\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"}},\"stateVariables\":{\"CURATOR_ROLE\":{\"details\":\"can create and curate the active group\"},\"latestGroupId\":{\"details\":\"Starts from 1.  Must increment this first when creating a new group.\"},\"refundableTickets\":{\"details\":\"groupId -> address -> shares (= the number of tickets bought)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MIN_RESERVE_PRICE_BPS()\":{\"notice\":\"Arithmetic constants\"},\"TICKET_SUPPLY_PER_GROUP()\":{\"notice\":\"Business logic constants\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CryptoPunksGroupRegistry.sol\":\"CryptoPunksGroupRegistry\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363736373835383333363630\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"src/CryptoPunksGroupRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Strings} from \\\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\\\";\\nimport {ERC1155} from \\\"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {IERC721} from \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\nimport {AccessControl} from \\\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./lib/BasisPoint.sol\\\";\\nimport \\\"./external/ICryptoPunksMarket.sol\\\";\\nimport \\\"./ICryptoPunksGroupRegistry.sol\\\";\\nimport \\\"./ICryptoPunksMosaicRegistry.sol\\\";\\nimport \\\"./CryptoPunksMuseum.sol\\\";\\n\\n// TODO: Migrate custom revert error messages to byte constants\\ncontract CryptoPunksGroupRegistry is\\n    ICryptoPunksGroupRegistry,\\n    ERC1155,\\n    AccessControl,\\n    ReentrancyGuard\\n{\\n    /**\\n     * Arithmetic constants\\n     */\\n    uint64 public constant MIN_RESERVE_PRICE_BPS = 7000; // 70%\\n    uint64 public constant MAX_RESERVE_PRICE_BPS = 50000; // 500%\\n\\n    /**\\n     * Business logic constants\\n     */\\n    uint64 public constant TICKET_SUPPLY_PER_GROUP = 100;\\n    /**\\n     * @dev can create and curate the active group\\n     */\\n    bytes32 public constant CURATOR_ROLE = keccak256(\\\"CURATOR_ROLE\\\");\\n\\n    CryptoPunksMuseum public immutable museum;\\n\\n    /**\\n     * @dev Starts from 1.\\n     *  Must increment this first when creating a new group.\\n     */\\n    uint192 public latestGroupId;\\n    mapping(uint192 => Group) private groups;\\n\\n    /**\\n     * @dev groupId -> address -> shares (= the number of tickets bought)\\n     */\\n    mapping(uint192 => mapping(address => uint256)) private refundableTickets;\\n\\n    constructor(address museumAddress) ERC1155(\\\"CryptoPunks Mosaic Ticket\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(CURATOR_ROLE, msg.sender);\\n        museum = CryptoPunksMuseum(museumAddress);\\n    }\\n\\n    modifier onlyWhenActive() {\\n        require(museum.isActive(), \\\"Museum must be active\\\");\\n        _;\\n    }\\n\\n    modifier onlyValidGroup(uint192 groupId) {\\n        require(groupId <= latestGroupId, \\\"Invalid groupId\\\");\\n        _;\\n    }\\n\\n    function create(\\n        uint256 targetPunkId,\\n        uint256 targetMaxPrice\\n    ) external onlyRole(CURATOR_ROLE) onlyWhenActive returns (uint192 groupId) {\\n        require(\\n            getGroupLifeCycle(latestGroupId) != GroupLifeCycle.Active,\\n            \\\"Ongoing group exists\\\"\\n        );\\n\\n        ++latestGroupId;\\n        uint64 totalTicketSupply = TICKET_SUPPLY_PER_GROUP;\\n        uint256 unitTicketPrice = targetMaxPrice / totalTicketSupply;\\n\\n        Group storage newGroup = groups[latestGroupId];\\n        newGroup.id = latestGroupId;\\n        newGroup.creator = msg.sender;\\n        newGroup.targetPunkId = targetPunkId;\\n        newGroup.targetMaxPrice = targetMaxPrice;\\n        newGroup.totalTicketSupply = totalTicketSupply;\\n        newGroup.unitTicketPrice = unitTicketPrice;\\n        newGroup.status = GroupStatus.Open;\\n        // TODO: Make it configurable\\n        newGroup.expiresAt = uint40(block.timestamp + 604800);\\n\\n        emit GroupCreated(\\n            latestGroupId,\\n            msg.sender,\\n            targetMaxPrice,\\n            totalTicketSupply,\\n            unitTicketPrice\\n        );\\n        return latestGroupId;\\n    }\\n\\n    function contribute(\\n        uint192 groupId,\\n        uint64 ticketQuantity\\n    ) external payable onlyValidGroup(groupId) onlyWhenActive {\\n        Group storage group = groups[groupId];\\n\\n        uint256 ticketsLeft = group.totalTicketSupply - group.ticketsBought;\\n        require(\\n            ticketQuantity <= ticketsLeft,\\n            \\\"Fewer tickets remaining than requested\\\"\\n        );\\n\\n        uint256 ethReceived = msg.value;\\n        uint256 ethRequired = group.unitTicketPrice * ticketQuantity;\\n        require(ethReceived == ethRequired, \\\"Contribution must be exact\\\");\\n\\n        address contributor = msg.sender;\\n        group.totalContribution += ethReceived;\\n        group.ticketsBought += ticketQuantity;\\n        refundableTickets[groupId][contributor] += ticketQuantity;\\n\\n        _mint(contributor, groupId, ticketQuantity, \\\"\\\");\\n\\n        emit Contributed(contributor, groupId, ticketQuantity);\\n    }\\n\\n    /**\\n     * @dev Can be tried as long as the group is OPEN\\n     */\\n    function buy(\\n        uint192 groupId\\n    ) external nonReentrant onlyValidGroup(groupId) onlyWhenActive {\\n        // Internal prerequisites\\n        require(\\n            address(museum.mosaicRegistry()) != address(0x0),\\n            \\\"Exhibit registry must be set\\\"\\n        );\\n\\n        // Stakeholder and group status prerequisites\\n        Group storage group = groups[groupId];\\n        require(\\n            hasContribution(msg.sender, groupId),\\n            \\\"Only ticket holders can initiate a buy\\\"\\n        );\\n        uint256 punkId = group.targetPunkId;\\n        (, , , uint256 offeredPrice, ) = museum\\n            .cryptoPunksMarket()\\n            .punksOfferedForSale(punkId);\\n        require(group.ticketsBought == TICKET_SUPPLY_PER_GROUP, \\\"Not sold out\\\");\\n        require(\\n            group.totalContribution >= offeredPrice,\\n            \\\"Offered price is greater than the current contribution\\\"\\n        );\\n\\n        // Purchase\\n        museum.cryptoPunksMarket().buyPunk{value: offeredPrice}(punkId);\\n        require(\\n            museum.cryptoPunksMarket().punkIndexToAddress(punkId) ==\\n                address(this),\\n            \\\"Unexpected ownership\\\"\\n        );\\n\\n        // TODO: Double-check the possibility of reentrancy attacks when the same punk ID is used again later\\n        museum.cryptoPunksMarket().transferPunk(\\n            address(museum.mosaicRegistry()),\\n            group.targetPunkId\\n        );\\n\\n        group.purchasePrice = offeredPrice;\\n        group.originalId = museum.mosaicRegistry().create(\\n            group.targetPunkId,\\n            group.ticketsBought,\\n            group.purchasePrice,\\n            calculateMinReservePrice(group.purchasePrice),\\n            calculateMaxReservePrice(group.purchasePrice)\\n        );\\n        group.status = GroupStatus.Claimable;\\n\\n        emit GroupWon(groupId);\\n    }\\n\\n    // @dev Batch claim-refund as many Mosaic Monos as tickets held\\n    function claim(\\n        uint192 groupId\\n    )\\n        external\\n        nonReentrant\\n        onlyValidGroup(groupId)\\n        onlyWhenActive\\n        returns (uint256[] memory mosaicIds)\\n    {\\n        Group storage group = groups[groupId];\\n        require(\\n            group.status == GroupStatus.Claimable,\\n            \\\"The group is not finalized\\\"\\n        );\\n        uint256 ticketsHeld = getTickets(msg.sender, groupId);\\n        require(ticketsHeld > 0, \\\"Only ticket holders can claim tokens\\\");\\n        _burn(msg.sender, groupId, ticketsHeld);\\n\\n        // Refund\\n        uint256 owed = getRefundPerTicket(group) * ticketsHeld;\\n        // TODO: Define a library for ETH sending with gas considerations\\n        (bool sent, ) = msg.sender.call{value: owed}(\\\"\\\");\\n        require(sent, \\\"Failed to refund\\\");\\n\\n        // Mint\\n        uint256[] memory mosaicIds = new uint256[](ticketsHeld);\\n        for (uint256 i = 0; i < ticketsHeld; i++) {\\n            uint256 mosaicId = museum.mosaicRegistry().mint(\\n                msg.sender,\\n                group.originalId\\n            );\\n            mosaicIds[i] = mosaicId;\\n            emit Claimed(msg.sender, groupId, mosaicId);\\n        }\\n\\n        return mosaicIds;\\n    }\\n\\n    // @dev only for lost/expired groups to invoke explicitly\\n    function refundExpired(\\n        uint192 groupId\\n    ) public nonReentrant onlyValidGroup(groupId) onlyWhenActive {\\n        address payable contributor = payable(msg.sender);\\n        Group storage group = groups[groupId];\\n        require(\\n            getGroupLifeCycle(groupId) == GroupLifeCycle.Expired,\\n            \\\"The group must be expired\\\"\\n        );\\n        uint256 ticketsHeld = getTickets(msg.sender, groupId);\\n        require(ticketsHeld > 0, \\\"Only ticket holders can get refunds\\\");\\n\\n        _burn(msg.sender, groupId, ticketsHeld);\\n\\n        uint256 owed = getRefundPerTicket(group) * ticketsHeld;\\n        (bool sent, ) = contributor.call{value: owed}(\\\"\\\");\\n        require(sent, \\\"Failed to refund\\\");\\n    }\\n\\n    function getRefundPerTicket(\\n        Group storage group\\n    ) private view returns (uint256 refundPerTicket) {\\n        if (group.totalContribution <= group.purchasePrice) {\\n            return 0;\\n        }\\n        uint256 surplus = group.totalContribution - group.purchasePrice;\\n        return surplus / group.ticketsBought;\\n    }\\n\\n    //\\n    // Registry-related views\\n    //\\n\\n    function uri(uint256 groupId) public view override returns (string memory) {\\n        Group storage group = groups[uint192(groupId)];\\n        return group.metadataUri;\\n    }\\n\\n    //\\n    // Group-related views\\n    //\\n\\n    function getGroup(\\n        uint192 groupId\\n    ) public view onlyValidGroup(groupId) returns (Group memory) {\\n        return groups[groupId];\\n    }\\n\\n    function getGroupLifeCycle(\\n        uint192 groupId\\n    ) public view onlyValidGroup(groupId) returns (GroupLifeCycle) {\\n        Group storage group = groups[groupId];\\n        if (group.status == GroupStatus.Claimable) {\\n            return GroupLifeCycle.Won;\\n        }\\n        if (group.status == GroupStatus.Open) {\\n            if (group.expiresAt >= block.timestamp) {\\n                return GroupLifeCycle.Active;\\n            }\\n            return GroupLifeCycle.Expired;\\n        }\\n        return GroupLifeCycle.Nonexistent;\\n    }\\n\\n    function getGroupTotalContribution(\\n        uint192 groupId\\n    ) public view onlyValidGroup(groupId) returns (uint256 totalContribution) {\\n        return groups[groupId].totalContribution;\\n    }\\n\\n    //\\n    // Ticket\\n    //\\n\\n    function getTickets(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (uint256) {\\n        return balanceOf(inquired, uint256(groupId));\\n    }\\n\\n    function isCreator(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (bool) {\\n        return groups[groupId].creator == inquired;\\n    }\\n\\n    function hasContribution(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (bool) {\\n        return getTickets(inquired, groupId) > 0;\\n    }\\n\\n    //\\n    // Constitution\\n    //\\n\\n    function calculateMinReservePrice(\\n        uint256 purchasePrice\\n    ) public pure returns (uint256 minReservePrice) {\\n        return\\n            BasisPoint.calculateBasisPoint(\\n                purchasePrice,\\n                MIN_RESERVE_PRICE_BPS\\n            );\\n    }\\n\\n    function calculateMaxReservePrice(\\n        uint256 purchasePrice\\n    ) public pure returns (uint256 maxReservePrice) {\\n        return\\n            BasisPoint.calculateBasisPoint(\\n                purchasePrice,\\n                MAX_RESERVE_PRICE_BPS\\n            );\\n    }\\n\\n    //\\n    // Admin\\n    //\\n\\n    function airdrop(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _mintBatch(to, ids, amounts, \\\"\\\");\\n    }\\n\\n    //\\n    // Internals\\n    //\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC1155, AccessControl) returns (bool) {\\n        return\\n            ERC1155.supportsInterface(interfaceId) ||\\n            AccessControl.supportsInterface(interfaceId);\\n    }\\n\\n    // TODO: fallback\\n}\\n\",\"keccak256\":\"0x23c8275fefdfb03095e4ad7908049faf9797557b550e33b99c9d51b3c4e653dd\",\"license\":\"MIT\"},\"src/CryptoPunksMuseum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {AccessControl} from \\\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\\\";\\nimport \\\"./ICryptoPunksGroupRegistry.sol\\\";\\nimport \\\"./ICryptoPunksMosaicRegistry.sol\\\";\\nimport \\\"./external/ICryptoPunksMarket.sol\\\";\\n\\n// TODO: Adopt Eternal Storage in the next phase\\ncontract CryptoPunksMuseum is AccessControl {\\n    ICryptoPunksMarket public immutable cryptoPunksMarket;\\n    ICryptoPunksGroupRegistry public groupRegistry;\\n    ICryptoPunksMosaicRegistry public mosaicRegistry;\\n    // @dev true if and only if the Museum's configuration is done and all the registries are ready\\n    bool public isActive;\\n\\n    constructor(address cryptoPunksMarketAddress) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        cryptoPunksMarket = ICryptoPunksMarket(cryptoPunksMarketAddress);\\n    }\\n\\n    function setGroupRegistry(\\n        address addr\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        groupRegistry = ICryptoPunksGroupRegistry(addr);\\n    }\\n\\n    function setMosaicRegistry(\\n        address addr\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mosaicRegistry = ICryptoPunksMosaicRegistry(addr);\\n    }\\n\\n    function activate() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            address(groupRegistry) != address(0x0) &&\\n                address(mosaicRegistry) != address(0x0)\\n        );\\n        mosaicRegistry.grantMintAuthority(address(groupRegistry));\\n        isActive = true;\\n    }\\n\\n    function deactivate() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        isActive = false;\\n    }\\n}\\n\",\"keccak256\":\"0x1707a8f8939fe962914f8485225f2505f05206ed7fb3efd9d65504b9b7693f15\",\"license\":\"MIT\"},\"src/ICryptoPunksGroupRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./UsingCryptoPunksGroupRegistryStructs.sol\\\";\\n\\ninterface ICryptoPunksGroupRegistry is UsingCryptoPunksGroupRegistryStructs {\\n    // TODO: Add signatures; consider `forfeit`\\n}\\n\",\"keccak256\":\"0xfa92d64639a5fc6d07ff24fe1deb12d4a00fa5c1b62696ec8d844d9183c6c47b\",\"license\":\"MIT\"},\"src/ICryptoPunksMosaicRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./UsingCryptoPunksMosaicRegistryStructs.sol\\\";\\n\\ninterface ICryptoPunksMosaicRegistry is UsingCryptoPunksMosaicRegistryStructs {\\n    // TODO: fill it out\\n    function create(\\n        uint256 punkId,\\n        uint64 totalClaimableCount,\\n        uint256 purchasePrice,\\n        uint256 minReservePrice,\\n        uint256 maxReservePrice\\n    ) external returns (uint192 originalId);\\n\\n    function mint(\\n        address contributor,\\n        uint192 originalId\\n    ) external returns (uint256 mosaicId);\\n\\n    function bid(\\n        uint192 originalId,\\n        uint256 price\\n    ) external payable returns (uint256 newBidId);\\n\\n    function grantMintAuthority(address addr) external;\\n}\\n\",\"keccak256\":\"0x47fe147d7633cfc178a4c87774456d238eb99814f80d9a59563a71f4606b36ef\",\"license\":\"MIT\"},\"src/UsingCryptoPunksGroupRegistryStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface UsingCryptoPunksGroupRegistryStructs {\\n    enum GroupStatus {\\n        Invalid,\\n        Open,\\n        Claimable\\n    }\\n\\n    enum GroupLifeCycle {\\n        // the group does not exist\\n        Nonexistent,\\n        // the group is open and funding is ongoing\\n        Active,\\n        // the group has not procured the target original within the expiry\\n        Expired,\\n        // the group has successfully purchased and acquired the target original\\n        Won\\n    }\\n\\n    struct Group {\\n        uint192 id;\\n        address creator;\\n        uint256 targetPunkId;\\n        uint256 targetMaxPrice;\\n        uint64 totalTicketSupply;\\n        uint256 unitTicketPrice;\\n        uint256 totalContribution;\\n        uint64 ticketsBought;\\n        uint40 expiresAt; // inclusive, in seconds, as in block.timestamp\\n        GroupStatus status;\\n        uint256 purchasePrice; // price at which the target is bought\\n        uint192 originalId;\\n        string metadataUri;\\n    }\\n\\n    event GroupCreated(\\n        uint192 indexed groupId,\\n        address indexed creator,\\n        uint256 targetMaxPrice,\\n        uint64 totalTicketSupply,\\n        uint256 unitTicketPrice\\n    );\\n\\n    event GroupWon(uint192 indexed groupId);\\n\\n    event Contributed(\\n        address indexed contributor,\\n        uint192 indexed groupId,\\n        uint96 indexed ticketQuantity\\n    );\\n\\n    event Claimed(\\n        address indexed claimer,\\n        uint192 indexed groupId,\\n        uint256 indexed mosaicId\\n    );\\n}\\n\",\"keccak256\":\"0xfc944d07fa7eeb30b563416918ec7a0981518d6c186389293ebc80037497fcf2\",\"license\":\"MIT\"},\"src/UsingCryptoPunksMosaicRegistryStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface UsingCryptoPunksMosaicRegistryStructs {\\n    struct Original {\\n        uint192 id;\\n        // @dev punkIndex\\n        uint256 punkId;\\n        /**\\n         * @dev To calculate governance quorum and token circulation.\\n         *      Corresponds to total ticket circulation per group.\\n         */\\n        uint128 totalMonoSupply;\\n        uint128 claimedMonoCount;\\n        uint256 purchasePrice;\\n        uint256 minReservePrice;\\n        uint256 maxReservePrice;\\n        string metadataBaseUri;\\n        OriginalStatus status;\\n        uint256 activeBidId;\\n    }\\n\\n    enum OriginalStatus {\\n        Active,\\n        Sold\\n    }\\n\\n    struct Mono {\\n        uint256 mosaicId;\\n        uint8 presetId;\\n        MonoGovernanceOptions governanceOptions;\\n    }\\n\\n    enum MonoLifeCycle {\\n        // @dev pre-design, just minted\\n        Raw,\\n        // @dev post-design, valid\\n        Active,\\n        // @dev belonging to invalid/reconstituted Original\\n        Dead\\n    }\\n\\n    struct MonoGovernanceOptions {\\n        uint256 proposedReservePrice;\\n        MonoBidResponse bidResponse;\\n        // @dev Bid ID\\n        uint256 bidId;\\n    }\\n\\n    enum MonoBidResponse {\\n        None,\\n        Yes,\\n        No\\n    }\\n\\n    // @dev There can be at most one ongoing bid per original\\n    struct Bid {\\n        // @dev keccak256(abi.encodePacked(originalId, bidder, uint40(block.timestamp))\\n        uint256 id;\\n        address payable bidder;\\n        uint192 originalId;\\n        uint256 price;\\n        // block.timestamp\\n        uint40 createdAt;\\n        // duration in block.timestamp, in seconds\\n        uint40 expiry;\\n        // @dev updated upon any following Bid's creation or explicit external state updates\\n        BidState state;\\n    }\\n\\n    enum BidState {\\n        // Initial state, awaiting the result until the bidder explicitly reconstitutes the original or admits failure\\n        Proposed,\\n        // Resulting states upon vote results\\n        Accepted,\\n        Rejected,\\n        // Final/terminal states after bidder's action\\n        Won,\\n        Refunded\\n    }\\n}\\n\",\"keccak256\":\"0x3fb55c212d2a03d8c7e89a57232a87e64a5fcd598094e2a28e4c74328e5bfeca\",\"license\":\"MIT\"},\"src/external/ICryptoPunksMarket.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6. SEE SOURCE BELOW. !!\\npragma solidity ^0.8.4;\\n\\ninterface ICryptoPunksMarket {\\n    function name() external view returns (string memory);\\n\\n    function punksOfferedForSale(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (\\n            bool isForSale,\\n            uint256 punkIndex,\\n            address seller,\\n            uint256 minValue,\\n            address onlySellTo\\n        );\\n\\n    function enterBidForPunk(uint256 punkIndex) external payable;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function acceptBidForPunk(uint256 punkIndex, uint256 minPrice) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function setInitialOwners(\\n        address[] memory addresses,\\n        uint256[] memory indices\\n    ) external;\\n\\n    function withdraw() external;\\n\\n    function imageHash() external view returns (string memory);\\n\\n    function nextPunkIndexToAssign() external view returns (uint256);\\n\\n    function punkIndexToAddress(uint256) external view returns (address);\\n\\n    function standard() external view returns (string memory);\\n\\n    function punkBids(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (bool hasBid, uint256 punkIndex, address bidder, uint256 value);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function allInitialOwnersAssigned() external;\\n\\n    function allPunksAssigned() external view returns (bool);\\n\\n    function buyPunk(uint256 punkIndex) external payable;\\n\\n    function transferPunk(address to, uint256 punkIndex) external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function withdrawBidForPunk(uint256 punkIndex) external;\\n\\n    function setInitialOwner(address to, uint256 punkIndex) external;\\n\\n    function offerPunkForSaleToAddress(\\n        uint256 punkIndex,\\n        uint256 minSalePriceInWei,\\n        address toAddress\\n    ) external;\\n\\n    function punksRemainingToAssign() external view returns (uint256);\\n\\n    function offerPunkForSale(\\n        uint256 punkIndex,\\n        uint256 minSalePriceInWei\\n    ) external;\\n\\n    function getPunk(uint256 punkIndex) external;\\n\\n    function pendingWithdrawals(address) external view returns (uint256);\\n\\n    function punkNoLongerForSale(uint256 punkIndex) external;\\n\\n    event Assign(address indexed to, uint256 punkIndex);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event PunkTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 punkIndex\\n    );\\n    event PunkOffered(\\n        uint256 indexed punkIndex,\\n        uint256 minValue,\\n        address indexed toAddress\\n    );\\n    event PunkBidEntered(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBidWithdrawn(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBought(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress,\\n        address indexed toAddress\\n    );\\n    event PunkNoLongerForSale(uint256 indexed punkIndex);\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[],\\\"name\\\":\\\"name\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punksOfferedForSale\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"isForSale\\\",\\\"type\\\":\\\"bool\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"seller\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"minValue\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"onlySellTo\\\",\\\"type\\\":\\\"address\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"enterBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalSupply\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minPrice\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"acceptBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"decimals\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"addresses\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"name\\\":\\\"indices\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"setInitialOwners\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"withdraw\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"imageHash\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"nextPunkIndexToAssign\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkIndexToAddress\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"standard\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkBids\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"hasBid\\\",\\\"type\\\":\\\"bool\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"bidder\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"allInitialOwnersAssigned\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"allPunksAssigned\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"buyPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"transferPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"symbol\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"withdrawBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setInitialOwner\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minSalePriceInWei\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"offerPunkForSaleToAddress\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"punksRemainingToAssign\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minSalePriceInWei\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"offerPunkForSale\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"pendingWithdrawals\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkNoLongerForSale\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"type\\\":\\\"constructor\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Assign\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Transfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PunkTransfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"minValue\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkOffered\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBidEntered\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBidWithdrawn\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBought\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PunkNoLongerForSale\\\",\\\"type\\\":\\\"event\\\"}]\\n*/\\n\",\"keccak256\":\"0xcc8da30186c7ad45201c8960c2c97eeba37b16ead893bb2f701107c5c0c4fecf\",\"license\":\"UNLICENSED\"},\"src/lib/BasisPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary BasisPoint {\\n    // 10,000 basis points (bps) = 100%\\n    uint256 public constant WHOLE_BPS = 10_000;\\n\\n    function calculateBasisPoint(\\n        uint256 amount,\\n        uint256 basisPoints\\n    ) internal pure returns (uint256) {\\n        // Minimal precision\\n        require((amount * basisPoints) >= WHOLE_BPS);\\n        return (amount * basisPoints) / WHOLE_BPS;\\n    }\\n}\\n\",\"keccak256\":\"0x602c5e8bfbfc40649a3852e835280fca555c44598970f5aa9c39d91f2c5543a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620044b4380380620044b483398101604081905262000034916200017a565b60408051808201909152601981527f43727970746f50756e6b73204d6f73616963205469636b65740000000000000060208201526200007381620000c4565b50600160045562000086600033620000d6565b620000b27f850d585eb7f024ccee5e68e55f2c26cc72e1e6ee456acf62135757a5eb9d4a1033620000d6565b6001600160a01b03166080526200031d565b6002620000d2828262000251565b5050565b60008281526003602090815260408083206001600160a01b038516845290915290205460ff16620000d25760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001363390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000602082840312156200018d57600080fd5b81516001600160a01b0381168114620001a557600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001d757607f821691505b602082108103620001f857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200024c57600081815260208120601f850160051c81016020861015620002275750805b601f850160051c820191505b81811015620002485782815560010162000233565b5050505b505050565b81516001600160401b038111156200026d576200026d620001ac565b62000285816200027e8454620001c2565b84620001fe565b602080601f831160018114620002bd5760008415620002a45750858301515b600019600386901b1c1916600185901b17855562000248565b600085815260208120601f198616915b82811015620002ee57888601518255948401946001909101908401620002cd565b50858210156200030d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805161412062000394600039600081816104300152818161081d01528181610c4801528181610ee20152818161132a015281816118c301528181611c2101528181611cca01528181611e2a01528181611fe2015281816120ce0152818161220b0152818161229b015261238901526141206000f3fe6080604052600436106101f85760003560e01c806357ab7f8d1161010d578063b4ce873b116100a0578063d547741f1161006f578063d547741f14610673578063ddcef2b614610693578063e985e9c5146106a6578063f242432a146106ef578063f77e17591461070f57600080fd5b8063b4ce873b146105e6578063bafb0ebc14610606578063bdd99cdf14610626578063c02a209e1461064657600080fd5b80639f7b4579116100dc5780639f7b45791461057b578063a217fddf1461059b578063a22cb465146105b0578063aaad804b146105d057600080fd5b806357ab7f8d1461050557806391d1485414610525578063962fc1aa146105455780639bad761f1461056557600080fd5b8063248a9ca31161019057806344b955711161015f57806344b95571146103fe57806345e67a8c1461041e5780634a2cfb541461046a5780634e1273f41461049e57806353b92d09146104be57600080fd5b8063248a9ca31461036e5780632eb2c2d61461039e5780632f2ff15d146103be57806336568abe146103de57600080fd5b80630e89341c116101cc5780630e89341c146102ba57806319cd758f146102e75780632368a9541461031457806323b8b46d1461034157600080fd5b8062fdd58e146101fd57806301ffc9a71461023057806304d2c170146102605780630ac4573914610298575b600080fd5b34801561020957600080fd5b5061021d61021836600461333d565b61072f565b6040519081526020015b60405180910390f35b34801561023c57600080fd5b5061025061024b36600461337f565b6107c8565b6040519015158152602001610227565b34801561026c57600080fd5b50600554610280906001600160c01b031681565b6040516001600160c01b039091168152602001610227565b3480156102a457600080fd5b506102b86102b33660046133b1565b6107e2565b005b3480156102c657600080fd5b506102da6102d53660046133ce565b610a7b565b6040516102279190613437565b3480156102f357600080fd5b506103076103023660046133b1565b610b2d565b6040516102279190613460565b34801561032057600080fd5b5061033461032f3660046133b1565b610c0b565b60405161022791906134b5565b34801561034d57600080fd5b50610356606481565b6040516001600160401b039091168152602001610227565b34801561037a57600080fd5b5061021d6103893660046133ce565b60009081526003602052604090206001015490565b3480156103aa57600080fd5b506102b86103b9366004613611565b611065565b3480156103ca57600080fd5b506102b86103d93660046136be565b6110b1565b3480156103ea57600080fd5b506102b86103f93660046136be565b6110db565b34801561040a57600080fd5b506102506104193660046136ee565b611159565b34801561042a57600080fd5b506104527f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610227565b34801561047657600080fd5b5061021d7f850d585eb7f024ccee5e68e55f2c26cc72e1e6ee456acf62135757a5eb9d4a1081565b3480156104aa57600080fd5b506103346104b936600461371c565b61116e565b3480156104ca57600080fd5b506102506104d93660046136ee565b6001600160c01b03166000908152600660205260409020600101546001600160a01b0391821691161490565b34801561051157600080fd5b506102b86105203660046137e8565b611297565b34801561053157600080fd5b506102506105403660046136be565b6112c3565b34801561055157600080fd5b5061021d6105603660046133ce565b6112ee565b34801561057157600080fd5b50610356611b5881565b34801561058757600080fd5b5061028061059636600461385d565b6112fc565b3480156105a757600080fd5b5061021d600081565b3480156105bc57600080fd5b506102b86105cb36600461388d565b6115b3565b3480156105dc57600080fd5b5061035661c35081565b3480156105f257600080fd5b5061021d6106013660046136ee565b6115be565b34801561061257600080fd5b5061021d6106213660046133ce565b6115da565b34801561063257600080fd5b5061021d6106413660046133b1565b6115e8565b34801561065257600080fd5b506106666106613660046133b1565b61163d565b60405161022791906138cf565b34801561067f57600080fd5b506102b861068e3660046136be565b61186b565b6102b86106a13660046139de565b611890565b3480156106b257600080fd5b506102506106c1366004613a18565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156106fb57600080fd5b506102b861070a366004613a46565b611ba1565b34801561071b57600080fd5b506102b861072a3660046133b1565b611be6565b60006001600160a01b03831661079f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006107d38261253e565b806107c257506107c28261258e565b6107ea6125b3565b60055481906001600160c01b03908116908216111561081b5760405162461bcd60e51b815260040161079690613aae565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190613ad7565b6108b95760405162461bcd60e51b815260040161079690613af4565b6001600160c01b0382166000908152600660205260409020339060026108de85610b2d565b60038111156108ef576108ef61344a565b1461093c5760405162461bcd60e51b815260206004820152601960248201527f5468652067726f7570206d7573742062652065787069726564000000000000006044820152606401610796565b600061094833866115be565b9050600081116109a65760405162461bcd60e51b815260206004820152602360248201527f4f6e6c79207469636b657420686f6c646572732063616e2067657420726566756044820152626e647360e81b6064820152608401610796565b6109ba33866001600160c01b03168361260c565b6000816109c68461278d565b6109d09190613b39565b90506000846001600160a01b03168260405160006040518083038185875af1925050503d8060008114610a1f576040519150601f19603f3d011682016040523d82523d6000602084013e610a24565b606091505b5050905080610a685760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b6044820152606401610796565b505050505050610a786001600455565b50565b6001600160c01b0381166000908152600660205260409020600a810180546060929190610aa790613b50565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad390613b50565b8015610b205780601f10610af557610100808354040283529160200191610b20565b820191906000526020600020905b815481529060010190602001808311610b0357829003601f168201915b5050505050915050919050565b60055460009082906001600160c01b039081169082161115610b615760405162461bcd60e51b815260040161079690613aae565b6001600160c01b038316600090815260066020526040902060026007820154600160681b900460ff166002811115610b9b57610b9b61344a565b03610baa576003925050610c05565b60016007820154600160681b900460ff166002811115610bcc57610bcc61344a565b03610bff57600781015442600160401b90910464ffffffffff1610610bf5576001925050610c05565b6002925050610c05565b60009250505b50919050565b6060610c156125b3565b60055482906001600160c01b039081169082161115610c465760405162461bcd60e51b815260040161079690613aae565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc89190613ad7565b610ce45760405162461bcd60e51b815260040161079690613af4565b6001600160c01b038316600090815260066020526040902060026007820154600160681b900460ff166002811115610d1e57610d1e61344a565b14610d6b5760405162461bcd60e51b815260206004820152601a60248201527f5468652067726f7570206973206e6f742066696e616c697a65640000000000006044820152606401610796565b6000610d7733866115be565b905060008111610dd55760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79207469636b657420686f6c646572732063616e20636c61696d20746f6044820152636b656e7360e01b6064820152608401610796565b610de933866001600160c01b03168361260c565b600081610df58461278d565b610dff9190613b39565b604051909150600090339083908381818185875af1925050503d8060008114610e44576040519150601f19603f3d011682016040523d82523d6000602084013e610e49565b606091505b5050905080610e8d5760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b6044820152606401610796565b6000836001600160401b03811115610ea757610ea76134c8565b604051908082528060200260200182016040528015610ed0578160200160208202803683370190505b50905060005b8481101561104e5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166319e525826040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f629190613b84565b6009880154604051630818bcb960e21b81523360048201526001600160c01b0390911660248201526001600160a01b039190911690632062f2e4906044016020604051808303816000875af1158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe39190613ba1565b905080838381518110610ff857610ff8613bba565b602090810291909101015260405181906001600160c01b038c169033907f4c1be2553fae8261d25ff0ad45198f755781d31ad84c58a526837480b4d7fece90600090a4508061104681613bd0565b915050610ed6565b50955050505050506110606001600455565b919050565b6001600160a01b038516331480611081575061108185336106c1565b61109d5760405162461bcd60e51b815260040161079690613be9565b6110aa85858585856127d7565b5050505050565b6000828152600360205260409020600101546110cc81612973565b6110d6838361297d565b505050565b6001600160a01b038116331461114b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610796565b6111558282612a03565b5050565b60008061116684846115be565b119392505050565b606081518351146111d35760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610796565b600083516001600160401b038111156111ee576111ee6134c8565b604051908082528060200260200182016040528015611217578160200160208202803683370190505b50905060005b845181101561128f5761126285828151811061123b5761123b613bba565b602002602001015185838151811061125557611255613bba565b602002602001015161072f565b82828151811061127457611274613bba565b602090810291909101015261128881613bd0565b905061121d565b509392505050565b60006112a281612973565b6112bd84848460405180602001604052806000815250612a6a565b50505050565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006107c28261c350612bb5565b60007f850d585eb7f024ccee5e68e55f2c26cc72e1e6ee456acf62135757a5eb9d4a1061132881612973565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113aa9190613ad7565b6113c65760405162461bcd60e51b815260040161079690613af4565b60016005546113dd906001600160c01b0316610b2d565b60038111156113ee576113ee61344a565b036114325760405162461bcd60e51b81526020600482015260146024820152734f6e676f696e672067726f75702065786973747360601b6044820152606401610796565b6005805460009061144b906001600160c01b0316613c37565b82546001600160c01b039182166101009390930a92830291909202199091161790556064600061147b8286613c65565b600580546001600160c01b0316600081815260066020526040902080546001600160c01b03191690911781556001810180546001600160a01b0319163317905560028101899055600381018890556004810180546001600160401b03871667ffffffffffffffff1990911617905590810182905560078101805460ff60681b1916600160681b1790559091506115144262093a80613c87565b60078201805464ffffffffff92909216600160401b026cffffffffff000000000000000019909216919091179055600554604080518881526001600160401b038616602082015290810184905233916001600160c01b0316907f6c41f680bd5046e7b94552360a6d353c3d90e84424808396eb845cb2f0b059da9060600160405180910390a350506005546001600160c01b03169250505b5092915050565b611155338383612be6565b60006115d383836001600160c01b031661072f565b9392505050565b60006107c282611b58612bb5565b60055460009082906001600160c01b03908116908216111561161c5760405162461bcd60e51b815260040161079690613aae565b50506001600160c01b03166000908152600660208190526040909120015490565b6116a8604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052906101208201908152600060208201819052604082015260609081015290565b60055482906001600160c01b0390811690821611156116d95760405162461bcd60e51b815260040161079690613aae565b6001600160c01b0383811660009081526006602081815260409283902083516101a0810185528154909516855260018101546001600160a01b031691850191909152600280820154938501939093526003810154606085015260048101546001600160401b039081166080860152600582015460a08601529181015460c0850152600781015491821660e0850152600160401b820464ffffffffff1661010085015291610120840191600160681b900460ff169081111561179c5761179c61344a565b60028111156117ad576117ad61344a565b81526008820154602082015260098201546001600160c01b03166040820152600a820180546060909201916117e190613b50565b80601f016020809104026020016040519081016040528092919081815260200182805461180d90613b50565b801561185a5780601f1061182f5761010080835404028352916020019161185a565b820191906000526020600020905b81548152906001019060200180831161183d57829003601f168201915b505050505081525050915050919050565b60008281526003602052604090206001015461188681612973565b6110d68383612a03565b60055482906001600160c01b0390811690821611156118c15760405162461bcd60e51b815260040161079690613aae565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561191f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119439190613ad7565b61195f5760405162461bcd60e51b815260040161079690613af4565b6001600160c01b03831660009081526006602052604081206007810154600482015491929161199a916001600160401b039081169116613c9a565b6001600160401b0316905080846001600160401b03161115611a0d5760405162461bcd60e51b815260206004820152602660248201527f4665776572207469636b6574732072656d61696e696e67207468616e207265716044820152651d595cdd195960d21b6064820152608401610796565b60058201543490600090611a2b906001600160401b03881690613b39565b9050808214611a7c5760405162461bcd60e51b815260206004820152601a60248201527f436f6e747269627574696f6e206d7573742062652065786163740000000000006044820152606401610796565b600033905082856006016000828254611a959190613c87565b9091555050600785018054889190600090611aba9084906001600160401b0316613cba565b82546101009290920a6001600160401b038181021990931691831602179091556001600160c01b038a1660009081526007602090815260408083206001600160a01b038716845290915281208054928b16935091611b19908490613c87565b92505081905550611b4d81896001600160c01b0316896001600160401b031660405180602001604052806000815250612cc6565b866001600160401b0316886001600160c01b0316826001600160a01b03167fe666172e6168732cfedfefcdfc03bf3faf2588416f76c21085a3d731dfa9c8a160405160405180910390a45050505050505050565b6001600160a01b038516331480611bbd5750611bbd85336106c1565b611bd95760405162461bcd60e51b815260040161079690613be9565b6110aa8585858585612d97565b611bee6125b3565b60055481906001600160c01b039081169082161115611c1f5760405162461bcd60e51b815260040161079690613aae565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca19190613ad7565b611cbd5760405162461bcd60e51b815260040161079690613af4565b60006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166319e525826040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4a9190613b84565b6001600160a01b031603611da05760405162461bcd60e51b815260206004820152601c60248201527f45786869626974207265676973747279206d75737420626520736574000000006044820152606401610796565b6001600160c01b0382166000908152600660205260409020611dc23384611159565b611e1d5760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207469636b657420686f6c646572732063616e20696e69746961746560448201526520612062757960d01b6064820152608401610796565b60008160020154905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0d851d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eaa9190613b84565b6001600160a01b031663088f11f3836040518263ffffffff1660e01b8152600401611ed791815260200190565b60a060405180830381865afa158015611ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f189190613cda565b5060078701549094506001600160401b03166064149250611f6d9150505760405162461bcd60e51b815260206004820152600c60248201526b139bdd081cdbdb19081bdd5d60a21b6044820152606401610796565b8083600601541015611fe05760405162461bcd60e51b815260206004820152603660248201527f4f6666657265642070726963652069732067726561746572207468616e207468604482015275329031bab93932b73a1031b7b73a3934b13aba34b7b760511b6064820152608401610796565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0d851d06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561203e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120629190613b84565b6001600160a01b0316638264fe9882846040518363ffffffff1660e01b815260040161209091815260200190565b6000604051808303818588803b1580156120a957600080fd5b505af11580156120bd573d6000803e3d6000fd5b5050505050306001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0d851d06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561212a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214e9190613b84565b6001600160a01b03166358178168846040518263ffffffff1660e01b815260040161217b91815260200190565b602060405180830381865afa158015612198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bc9190613b84565b6001600160a01b0316146122095760405162461bcd60e51b81526020600482015260146024820152730556e6578706563746564206f776e6572736869760641b6044820152606401610796565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0d851d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015612267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228b9190613b84565b6001600160a01b0316638b72a2ec7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166319e525826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231b9190613b84565b60028601546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561236657600080fd5b505af115801561237a573d6000803e3d6000fd5b505050508083600801819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166319e525826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124099190613b84565b6002840154600785015460088601546001600160a01b03939093169263512137ed92916001600160401b03169061243f816115da565b61244c89600801546112ee565b6040516001600160e01b031960e088901b16815260048101959095526001600160401b03909316602485015260448401919091526064830152608482015260a4016020604051808303816000875af11580156124ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d09190613d3b565b6009840180546001600160c01b0319166001600160c01b0392831617905560078401805460ff60681b1916600160691b179055604051908616907fa55364f4cf304b1309b80ba955214c6192d2c9ba9fc0aa3c4b3bc0f11c941d7290600090a250505050610a786001600455565b60006001600160e01b03198216636cdb3d1360e11b148061256f57506001600160e01b031982166303a24d0760e21b145b806107c257506301ffc9a760e01b6001600160e01b03198316146107c2565b60006001600160e01b03198216637965db0b60e01b14806107c257506107c28261253e565b6002600454036126055760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610796565b6002600455565b6001600160a01b03831661266e5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610796565b33600061267a84612ec1565b9050600061268784612ec1565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156127105760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610796565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b600081600801548260060154116127a657506000919050565b6000826008015483600601546127bc9190613d58565b60078401549091506115d3906001600160401b031682613c65565b81518351146127f85760405162461bcd60e51b815260040161079690613d6b565b6001600160a01b03841661281e5760405162461bcd60e51b815260040161079690613db3565b3360005b845181101561290557600085828151811061283f5761283f613bba565b60200260200101519050600085838151811061285d5761285d613bba565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156128ad5760405162461bcd60e51b815260040161079690613df8565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906128ea908490613c87565b92505081905550505050806128fe90613bd0565b9050612822565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612955929190613e42565b60405180910390a461296b818787878787612f0c565b505050505050565b610a788133613067565b61298782826112c3565b6111555760008281526003602090815260408083206001600160a01b03851684529091529020805460ff191660011790556129bf3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612a0d82826112c3565b156111555760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b038416612a905760405162461bcd60e51b815260040161079690613e70565b8151835114612ab15760405162461bcd60e51b815260040161079690613d6b565b3360005b8451811015612b4d57838181518110612ad057612ad0613bba565b6020026020010151600080878481518110612aed57612aed613bba565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254612b359190613c87565b90915550819050612b4581613bd0565b915050612ab5565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612b9e929190613e42565b60405180910390a46110aa81600087878787612f0c565b6000612710612bc48385613b39565b1015612bcf57600080fd5b612710612bdc8385613b39565b6115d39190613c65565b816001600160a01b0316836001600160a01b031603612c595760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610796565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416612cec5760405162461bcd60e51b815260040161079690613e70565b336000612cf885612ec1565b90506000612d0585612ec1565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290612d37908490613c87565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612784836000898989896130c0565b6001600160a01b038416612dbd5760405162461bcd60e51b815260040161079690613db3565b336000612dc985612ec1565b90506000612dd685612ec1565b90506000868152602081815260408083206001600160a01b038c16845290915290205485811015612e195760405162461bcd60e51b815260040161079690613df8565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612e56908490613c87565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612eb6848a8a8a8a8a6130c0565b505050505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612efb57612efb613bba565b602090810291909101015292915050565b6001600160a01b0384163b1561296b5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612f509089908990889088908890600401613eb1565b6020604051808303816000875af1925050508015612f8b575060408051601f3d908101601f19168201909252612f8891810190613f0f565b60015b61303757612f97613f2c565b806308c379a003612fd05750612fab613f48565b80612fb65750612fd2565b8060405162461bcd60e51b81526004016107969190613437565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610796565b6001600160e01b0319811663bc197c8160e01b146127845760405162461bcd60e51b815260040161079690613fd1565b61307182826112c3565b6111555761307e8161317b565b61308983602061318d565b60405160200161309a929190614019565b60408051601f198184030181529082905262461bcd60e51b825261079691600401613437565b6001600160a01b0384163b1561296b5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190613104908990899088908890889060040161408e565b6020604051808303816000875af192505050801561313f575060408051601f3d908101601f1916820190925261313c91810190613f0f565b60015b61314b57612f97613f2c565b6001600160e01b0319811663f23a6e6160e01b146127845760405162461bcd60e51b815260040161079690613fd1565b60606107c26001600160a01b03831660145b6060600061319c836002613b39565b6131a7906002613c87565b6001600160401b038111156131be576131be6134c8565b6040519080825280601f01601f1916602001820160405280156131e8576020820181803683370190505b509050600360fc1b8160008151811061320357613203613bba565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061323257613232613bba565b60200101906001600160f81b031916908160001a9053506000613256846002613b39565b613261906001613c87565b90505b60018111156132d9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061329557613295613bba565b1a60f81b8282815181106132ab576132ab613bba565b60200101906001600160f81b031916908160001a90535060049490941c936132d2816140d3565b9050613264565b5083156115d35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610796565b6001600160a01b0381168114610a7857600080fd5b6000806040838503121561335057600080fd5b823561335b81613328565b946020939093013593505050565b6001600160e01b031981168114610a7857600080fd5b60006020828403121561339157600080fd5b81356115d381613369565b6001600160c01b0381168114610a7857600080fd5b6000602082840312156133c357600080fd5b81356115d38161339c565b6000602082840312156133e057600080fd5b5035919050565b60005b838110156134025781810151838201526020016133ea565b50506000910152565b600081518084526134238160208601602086016133e7565b601f01601f19169290920160200192915050565b6020815260006115d3602083018461340b565b634e487b7160e01b600052602160045260246000fd5b60208101600483106134745761347461344a565b91905290565b600081518084526020808501945080840160005b838110156134aa5781518752958201959082019060010161348e565b509495945050505050565b6020815260006115d3602083018461347a565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715613503576135036134c8565b6040525050565b60006001600160401b03821115613523576135236134c8565b5060051b60200190565b600082601f83011261353e57600080fd5b8135602061354b8261350a565b60405161355882826134de565b83815260059390931b850182019282810191508684111561357857600080fd5b8286015b84811015613593578035835291830191830161357c565b509695505050505050565b600082601f8301126135af57600080fd5b81356001600160401b038111156135c8576135c86134c8565b6040516135df601f8301601f1916602001826134de565b8181528460208386010111156135f457600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561362957600080fd5b853561363481613328565b9450602086013561364481613328565b935060408601356001600160401b038082111561366057600080fd5b61366c89838a0161352d565b9450606088013591508082111561368257600080fd5b61368e89838a0161352d565b935060808801359150808211156136a457600080fd5b506136b18882890161359e565b9150509295509295909350565b600080604083850312156136d157600080fd5b8235915060208301356136e381613328565b809150509250929050565b6000806040838503121561370157600080fd5b823561370c81613328565b915060208301356136e38161339c565b6000806040838503121561372f57600080fd5b82356001600160401b038082111561374657600080fd5b818501915085601f83011261375a57600080fd5b813560206137678261350a565b60405161377482826134de565b83815260059390931b850182019282810191508984111561379457600080fd5b948201945b838610156137bb5785356137ac81613328565b82529482019490820190613799565b965050860135925050808211156137d157600080fd5b506137de8582860161352d565b9150509250929050565b6000806000606084860312156137fd57600080fd5b833561380881613328565b925060208401356001600160401b038082111561382457600080fd5b6138308783880161352d565b9350604086013591508082111561384657600080fd5b506138538682870161352d565b9150509250925092565b6000806040838503121561387057600080fd5b50508035926020909101359150565b8015158114610a7857600080fd5b600080604083850312156138a057600080fd5b82356138ab81613328565b915060208301356136e38161387f565b600381106138cb576138cb61344a565b9052565b602081526138e96020820183516001600160c01b03169052565b6000602083015161390560408401826001600160a01b03169052565b506040830151606083015260608301516080830152608083015161393460a08401826001600160401b03169052565b5060a083015160c083015260c083015160e083015260e0830151610100613965818501836001600160401b03169052565b840151905061012061397f8482018364ffffffffff169052565b8401519050610140613993848201836138bb565b8401516101608481019190915284015190506101806139bc818501836001600160c01b03169052565b8401516101a08481015290506139d66101c084018261340b565b949350505050565b600080604083850312156139f157600080fd5b82356139fc8161339c565b915060208301356001600160401b03811681146136e357600080fd5b60008060408385031215613a2b57600080fd5b8235613a3681613328565b915060208301356136e381613328565b600080600080600060a08688031215613a5e57600080fd5b8535613a6981613328565b94506020860135613a7981613328565b9350604086013592506060860135915060808601356001600160401b03811115613aa257600080fd5b6136b18882890161359e565b6020808252600f908201526e125b9d985b1a590819dc9bdd5c1259608a1b604082015260600190565b600060208284031215613ae957600080fd5b81516115d38161387f565b6020808252601590820152744d757365756d206d7573742062652061637469766560581b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176107c2576107c2613b23565b600181811c90821680613b6457607f821691505b602082108103610c0557634e487b7160e01b600052602260045260246000fd5b600060208284031215613b9657600080fd5b81516115d381613328565b600060208284031215613bb357600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060018201613be257613be2613b23565b5060010190565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60006001600160c01b038281166002600160c01b03198101613c5b57613c5b613b23565b6001019392505050565b600082613c8257634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156107c2576107c2613b23565b6001600160401b038281168282160390808211156115ac576115ac613b23565b6001600160401b038181168382160190808211156115ac576115ac613b23565b600080600080600060a08688031215613cf257600080fd5b8551613cfd8161387f565b602087015160408801519196509450613d1581613328565b606087015160808801519194509250613d2d81613328565b809150509295509295909350565b600060208284031215613d4d57600080fd5b81516115d38161339c565b818103818111156107c2576107c2613b23565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000613e55604083018561347a565b8281036020840152613e67818561347a565b95945050505050565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090613edd9083018661347a565b8281036060840152613eef818661347a565b90508281036080840152613f03818561340b565b98975050505050505050565b600060208284031215613f2157600080fd5b81516115d381613369565b600060033d1115613f455760046000803e5060005160e01c5b90565b600060443d1015613f565790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613f8557505050505090565b8285019150815181811115613f9d5750505050505090565b843d8701016020828501011115613fb75750505050505090565b613fc6602082860101876134de565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516140518160178501602088016133e7565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516140828160288401602088016133e7565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906140c89083018461340b565b979650505050505050565b6000816140e2576140e2613b23565b50600019019056fea2646970667358221220a33c423366e1078dc6e46294803e0e1d5529837dec6a50be6cfc3e8e14ccf55d64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "buy(uint192)": {
        "details": "Can be tried as long as the group is OPEN"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      }
    },
    "stateVariables": {
      "CURATOR_ROLE": {
        "details": "can create and curate the active group"
      },
      "latestGroupId": {
        "details": "Starts from 1.  Must increment this first when creating a new group."
      },
      "refundableTickets": {
        "details": "groupId -> address -> shares (= the number of tickets bought)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MIN_RESERVE_PRICE_BPS()": {
        "notice": "Arithmetic constants"
      },
      "TICKET_SUPPLY_PER_GROUP()": {
        "notice": "Business logic constants"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 468,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 474,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 476,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 24,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 399,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5966,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "latestGroupId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint192"
      },
      {
        "astId": 5971,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "groups",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint192,t_struct(Group)8484_storage)"
      },
      {
        "astId": 5978,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "refundableTickets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint192,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(GroupStatus)8451": {
        "encoding": "inplace",
        "label": "enum UsingCryptoPunksGroupRegistryStructs.GroupStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint192,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint192",
        "label": "mapping(uint192 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint192,t_struct(Group)8484_storage)": {
        "encoding": "mapping",
        "key": "t_uint192",
        "label": "mapping(uint192 => struct UsingCryptoPunksGroupRegistryStructs.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)8484_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Group)8484_storage": {
        "encoding": "inplace",
        "label": "struct UsingCryptoPunksGroupRegistryStructs.Group",
        "members": [
          {
            "astId": 8458,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint192"
          },
          {
            "astId": 8460,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8462,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "targetPunkId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8464,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "targetMaxPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8466,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "totalTicketSupply",
            "offset": 0,
            "slot": "4",
            "type": "t_uint64"
          },
          {
            "astId": 8468,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "unitTicketPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8470,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "totalContribution",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8472,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "ticketsBought",
            "offset": 0,
            "slot": "7",
            "type": "t_uint64"
          },
          {
            "astId": 8474,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "expiresAt",
            "offset": 8,
            "slot": "7",
            "type": "t_uint40"
          },
          {
            "astId": 8477,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "status",
            "offset": 13,
            "slot": "7",
            "type": "t_enum(GroupStatus)8451"
          },
          {
            "astId": 8479,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "purchasePrice",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 8481,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "originalId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint192"
          },
          {
            "astId": 8483,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "metadataUri",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}