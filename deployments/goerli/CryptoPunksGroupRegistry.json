{
  "address": "0x333Dd7080A2Bd375405FD2a446E598C1D876785F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cryptoPunksMarketAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mosaicRegistryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "ticketQuantity",
          "type": "uint96"
        }
      ],
      "name": "Contributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetMaxPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "totalTicketSupply",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitTicketPrice",
          "type": "uint256"
        }
      ],
      "name": "GroupCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "GroupWon",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINT_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_RESERVE_PRICE_BASIS_POINT",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_RESERVE_PRICE_BASIS_POINT",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TICKET_SUPPLY_PER_GROUP",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "basisPoints",
          "type": "uint256"
        }
      ],
      "name": "calculateBasisPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        },
        {
          "internalType": "string",
          "name": "metadataUri",
          "type": "string"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        },
        {
          "internalType": "uint64",
          "name": "ticketQuantity",
          "type": "uint64"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetPunkId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetMaxPrice",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cryptoPunksMarket",
      "outputs": [
        {
          "internalType": "contract ICryptoPunksMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "finalizeOnWon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "getGroup",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint192",
              "name": "id",
              "type": "uint192"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "targetPunkId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetMaxPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "totalTicketSupply",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "unitTicketPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalContribution",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "ticketsBought",
              "type": "uint64"
            },
            {
              "internalType": "uint40",
              "name": "expiry",
              "type": "uint40"
            },
            {
              "internalType": "enum UsingCryptoPunksGroupRegistryStructs.GroupStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "purchasePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint192",
              "name": "originalId",
              "type": "uint192"
            }
          ],
          "internalType": "struct UsingCryptoPunksGroupRegistryStructs.Group",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "getGroupTotalContribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalContribution",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inquired",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "getTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "grantCuratorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inquired",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "hasContribution",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inquired",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "isCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestGroupId",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x926f5191bee345b1641de17f2d13800250e77251a01aeabfb993b9ca08705fa6",
  "receipt": {
    "to": null,
    "from": "0x9675e17451FEB900280FC84D2eE44D114f629C96",
    "contractAddress": "0x333Dd7080A2Bd375405FD2a446E598C1D876785F",
    "transactionIndex": 9,
    "gasUsed": "3365596",
    "logsBloom": "0x
    "blockHash": "0xa9e03be5800c63e5d1e4a81d72fa118bbb4dbe3aca2913f0c489ca2503ce0f2b",
    "transactionHash": "0x926f5191bee345b1641de17f2d13800250e77251a01aeabfb993b9ca08705fa6",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 8389778,
        "transactionHash": "0x926f5191bee345b1641de17f2d13800250e77251a01aeabfb993b9ca08705fa6",
        "address": "0x333Dd7080A2Bd375405FD2a446E598C1D876785F",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009675e17451feb900280fc84d2ee44d114f629c96",
          "0x0000000000000000000000009675e17451feb900280fc84d2ee44d114f629c96"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0xa9e03be5800c63e5d1e4a81d72fa118bbb4dbe3aca2913f0c489ca2503ce0f2b"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 8389778,
        "transactionHash": "0x926f5191bee345b1641de17f2d13800250e77251a01aeabfb993b9ca08705fa6",
        "address": "0x333Dd7080A2Bd375405FD2a446E598C1D876785F",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8b8b3fd2ff17638092aa002125df632689f3f241d0a395d3601646fb8c9ed982",
          "0x0000000000000000000000009675e17451feb900280fc84d2ee44d114f629c96",
          "0x0000000000000000000000009675e17451feb900280fc84d2ee44d114f629c96"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0xa9e03be5800c63e5d1e4a81d72fa118bbb4dbe3aca2913f0c489ca2503ce0f2b"
      }
    ],
    "blockNumber": 8389778,
    "cumulativeGasUsed": "6961914",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcAa3c23aeEF417b00208e150ad04fD6A1878e474",
    "0x77f07731646fbE448F252d8bF211fF112B11330B"
  ],
  "numDeployments": 2,
  "solcInputHash": "4d7e8a7732b9e2cd7036091cf237a612",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cryptoPunksMarketAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mosaicRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"ticketQuantity\",\"type\":\"uint96\"}],\"name\":\"Contributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetMaxPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"totalTicketSupply\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitTicketPrice\",\"type\":\"uint256\"}],\"name\":\"GroupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"GroupWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RESERVE_PRICE_BASIS_POINT\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RESERVE_PRICE_BASIS_POINT\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TICKET_SUPPLY_PER_GROUP\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basisPoints\",\"type\":\"uint256\"}],\"name\":\"calculateBasisPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"},{\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"ticketQuantity\",\"type\":\"uint64\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetPunkId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetMaxPrice\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoPunksMarket\",\"outputs\":[{\"internalType\":\"contract ICryptoPunksMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"finalizeOnWon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"getGroup\",\"outputs\":[{\"components\":[{\"internalType\":\"uint192\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetPunkId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetMaxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"totalTicketSupply\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"unitTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"ticketsBought\",\"type\":\"uint64\"},{\"internalType\":\"uint40\",\"name\":\"expiry\",\"type\":\"uint40\"},{\"internalType\":\"enum UsingCryptoPunksGroupRegistryStructs.GroupStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"internalType\":\"struct UsingCryptoPunksGroupRegistryStructs.Group\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"getGroupTotalContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalContribution\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inquired\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"getTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"grantCuratorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inquired\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"hasContribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inquired\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"isCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestGroupId\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"buy(uint192)\":{\"details\":\"Can be tried as long as the group is OPEN\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"}},\"stateVariables\":{\"CURATOR_ROLE\":{\"details\":\"can create and curate the active group\"},\"latestGroupId\":{\"details\":\"also used as a `groupId`, starting from 1.\"},\"refundableTickets\":{\"details\":\"groupId -> address -> shares (= the number of tickets bought)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MIN_RESERVE_PRICE_BASIS_POINT()\":{\"notice\":\"Arithmetic constants\"},\"TICKET_SUPPLY_PER_GROUP()\":{\"notice\":\"Business logic constants TODO: Introduce a global explicit storage contract\"},\"refund(uint192)\":{\"notice\":\"Refunds any remaining contributions pro rata after finalization\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CryptoPunksGroupRegistry.sol\":\"CryptoPunksGroupRegistry\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363734383834343738323534\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"src/CryptoPunksGroupRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Strings} from \\\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\\\";\\nimport {ERC1155} from \\\"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {IERC721} from \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\nimport {AccessControl} from \\\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./external/ICryptoPunksMarket.sol\\\";\\nimport \\\"./ICryptoPunksGroupRegistry.sol\\\";\\nimport \\\"./ICryptoPunksMosaicRegistry.sol\\\";\\n\\n// TODO: Wire with Museum\\n// TODO: Migrate custom revert error messages to byte constants\\ncontract CryptoPunksGroupRegistry is\\n    ICryptoPunksGroupRegistry,\\n    ERC1155,\\n    AccessControl,\\n    ReentrancyGuard\\n{\\n    /**\\n     * Arithmetic constants\\n     */\\n    uint64 public constant MIN_RESERVE_PRICE_BASIS_POINT = 8000; // 80%\\n    uint64 public constant MAX_RESERVE_PRICE_BASIS_POINT = 30000; // 300%\\n    uint64 public constant BASIS_POINT_DENOMINATOR = 10000;\\n\\n    /**\\n     * Business logic constants\\n     *\\n     * TODO: Introduce a global explicit storage contract\\n     */\\n    uint64 public constant TICKET_SUPPLY_PER_GROUP = 100;\\n    /**\\n     * @dev can create and curate the active group\\n     */\\n    bytes32 private constant CURATOR_ROLE =\\n        bytes32(uint256(keccak256(\\\"curator\\\")));\\n\\n    ICryptoPunksMarket public immutable cryptoPunksMarket;\\n    ICryptoPunksMosaicRegistry private mosaicRegistry;\\n\\n    /**\\n     * @dev also used as a `groupId`, starting from 1.\\n     */\\n    uint192 public latestGroupId;\\n    mapping(uint192 => Group) private groups;\\n\\n    /**\\n     * @dev groupId -> address -> shares (= the number of tickets bought)\\n     */\\n    mapping(uint192 => mapping(address => uint256)) private refundableTickets;\\n\\n    constructor(\\n        address cryptoPunksMarketAddress,\\n        address mosaicRegistryAddress\\n    ) ERC1155(\\\"CryptoPunks Mosaic Ticket\\\") {\\n        // TODO: Inherit a configuration storage from a Museum\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(CURATOR_ROLE, msg.sender);\\n        // TODO: code it up with config passing\\n        cryptoPunksMarket = ICryptoPunksMarket(cryptoPunksMarketAddress);\\n        mosaicRegistry = ICryptoPunksMosaicRegistry(mosaicRegistryAddress);\\n    }\\n\\n    modifier onlyValidGroup(uint192 groupId) {\\n        require(groupId <= latestGroupId, \\\"Invalid groupId\\\");\\n        _;\\n    }\\n\\n    function create(\\n        uint256 targetPunkId,\\n        uint256 targetMaxPrice\\n    ) external onlyRole(CURATOR_ROLE) returns (uint192 groupId) {\\n        ++latestGroupId;\\n        uint64 totalTicketSupply = TICKET_SUPPLY_PER_GROUP;\\n        uint256 unitTicketPrice = targetMaxPrice / totalTicketSupply;\\n\\n        Group storage newGroup = groups[latestGroupId];\\n        newGroup.id = latestGroupId;\\n        newGroup.creator = msg.sender;\\n        newGroup.targetPunkId = targetPunkId;\\n        newGroup.targetMaxPrice = targetMaxPrice;\\n        newGroup.totalTicketSupply = totalTicketSupply;\\n        newGroup.unitTicketPrice = unitTicketPrice;\\n        newGroup.status = GroupStatus.Open;\\n        // TODO: Make it configurable\\n        newGroup.expiry = uint40(block.timestamp + 604800);\\n\\n        emit GroupCreated(\\n            latestGroupId,\\n            msg.sender,\\n            targetMaxPrice,\\n            totalTicketSupply,\\n            unitTicketPrice\\n        );\\n        return latestGroupId;\\n    }\\n\\n    function contribute(\\n        uint192 groupId,\\n        uint64 ticketQuantity\\n    ) external payable onlyValidGroup(groupId) {\\n        Group storage group = groups[groupId];\\n\\n        uint256 ticketsLeft = group.totalTicketSupply - group.ticketsBought;\\n        require(\\n            ticketQuantity <= ticketsLeft,\\n            \\\"Fewer tickets remaining than requested\\\"\\n        );\\n\\n        uint256 ethReceived = msg.value;\\n        uint256 ethRequired = group.unitTicketPrice * ticketQuantity;\\n        require(ethReceived == ethRequired, \\\"Contribution must be exact\\\");\\n\\n        address contributor = msg.sender;\\n        group.totalContribution += ethReceived;\\n        group.ticketsBought += ticketQuantity;\\n        refundableTickets[groupId][contributor] += ticketQuantity;\\n\\n        _mint(contributor, groupId, ticketQuantity, \\\"\\\");\\n\\n        emit Contributed(contributor, groupId, ticketQuantity);\\n    }\\n\\n    /**\\n     * @dev Can be tried as long as the group is OPEN\\n     */\\n    function buy(\\n        uint192 groupId\\n    ) external nonReentrant onlyValidGroup(groupId) {\\n        Group storage group = groups[groupId];\\n        require(\\n            hasContribution(msg.sender, groupId),\\n            \\\"Only ticket holders can initiate a buy\\\"\\n        );\\n        uint256 punkId = group.targetPunkId;\\n        (, , , uint256 offeredPrice, ) = cryptoPunksMarket.punksOfferedForSale(\\n            punkId\\n        );\\n        require(group.ticketsBought == TICKET_SUPPLY_PER_GROUP, \\\"Not sold out\\\");\\n        require(\\n            group.totalContribution >= offeredPrice,\\n            \\\"Offered price is greater than the current contribution\\\"\\n        );\\n        cryptoPunksMarket.buyPunk{value: offeredPrice}(punkId);\\n        require(\\n            cryptoPunksMarket.punkIndexToAddress(punkId) == address(this),\\n            \\\"Unexpected ownership\\\"\\n        );\\n        group.purchasePrice = offeredPrice;\\n        group.status = GroupStatus.Won;\\n        emit GroupWon(groupId);\\n        finalizeOnWon(groupId);\\n    }\\n\\n    // Separated for retry after any partial failure\\n    function finalizeOnWon(uint192 groupId) public onlyValidGroup(groupId) {\\n        // TODO: Consider removing `getValidGroup` invocation if it costs too much gas\\n        Group storage group = groups[groupId];\\n        require(group.status == GroupStatus.Won, \\\"The group has not won\\\");\\n        require(\\n            address(mosaicRegistry) != address(0x0),\\n            \\\"Exhibit registry must be set\\\"\\n        );\\n\\n        // FIXME: Defend against reentrancy attacks in edge cases where the same cryptopunk ID is used later\\n        cryptoPunksMarket.transferPunk(\\n            address(mosaicRegistry),\\n            group.targetPunkId\\n        );\\n        group.originalId = mosaicRegistry.create(\\n            group.targetPunkId,\\n            group.ticketsBought,\\n            group.purchasePrice,\\n            calculateBasisPoint(\\n                group.purchasePrice,\\n                MIN_RESERVE_PRICE_BASIS_POINT\\n            ),\\n            calculateBasisPoint(\\n                group.purchasePrice,\\n                MAX_RESERVE_PRICE_BASIS_POINT\\n            )\\n        );\\n        // TODO: Consider whether to explicitly mark other competing groups as LOST\\n        group.status = GroupStatus.Claimable;\\n    }\\n\\n    function claim(\\n        uint192 groupId,\\n        string calldata metadataUri\\n    ) external nonReentrant onlyValidGroup(groupId) returns (uint256 mosaicId) {\\n        Group storage group = groups[groupId];\\n        require(\\n            group.status == GroupStatus.Claimable,\\n            \\\"The group is not finalized\\\"\\n        );\\n        require(\\n            hasContribution(msg.sender, groupId) || msg.sender == group.creator,\\n            \\\"Only ticket holders can claim tokens\\\"\\n        );\\n\\n        _burn(msg.sender, groupId, 1);\\n\\n        // TODO: take metadata\\n        mosaicId = mosaicRegistry.mint(\\n            msg.sender,\\n            group.originalId,\\n            metadataUri\\n        );\\n\\n        emit Claimed(msg.sender, groupId, mosaicId);\\n        return mosaicId;\\n    }\\n\\n    /**\\n     * Refunds any remaining contributions pro rata after finalization\\n     */\\n    function refund(\\n        uint192 groupId\\n    ) external nonReentrant onlyValidGroup(groupId) {\\n        address payable contributor = payable(msg.sender);\\n        Group storage group = groups[groupId];\\n        require(\\n            group.status == GroupStatus.Claimable ||\\n                group.expiry > block.timestamp,\\n            \\\"The group is not finalized\\\"\\n        );\\n        require(\\n            refundableTickets[groupId][contributor] > 0,\\n            \\\"Only refundable ticket holders can get refunds\\\"\\n        );\\n        uint256 owed = getRefundPerTicket(group) *\\n            refundableTickets[groupId][contributor];\\n        (bool sent, ) = contributor.call{value: owed}(\\\"\\\");\\n        require(sent, \\\"Failed to refund\\\");\\n        refundableTickets[groupId][contributor] = 0;\\n    }\\n\\n    function getRefundPerTicket(\\n        Group storage group\\n    ) private view returns (uint256 refundPerTicket) {\\n        if (group.totalContribution <= group.purchasePrice) {\\n            return 0;\\n        }\\n        uint256 surplus = group.totalContribution - group.purchasePrice;\\n        return surplus / group.ticketsBought;\\n    }\\n\\n    //\\n    // Registry-related views\\n    //\\n\\n    function uri(uint256 id) public view override returns (string memory) {\\n        // TODO: Implement this\\n        return Strings.toString(id);\\n    }\\n\\n    //\\n    // Group-related views\\n    //\\n\\n    function getGroup(\\n        uint192 groupId\\n    ) public view onlyValidGroup(groupId) returns (Group memory) {\\n        return groups[groupId];\\n    }\\n\\n    function getGroupTotalContribution(\\n        uint192 groupId\\n    ) public view onlyValidGroup(groupId) returns (uint256 totalContribution) {\\n        return groups[groupId].totalContribution;\\n    }\\n\\n    //\\n    // Ticket\\n    //\\n\\n    function getTickets(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (uint256) {\\n        return balanceOf(inquired, uint256(groupId));\\n    }\\n\\n    function isCreator(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (bool) {\\n        return groups[groupId].creator == inquired;\\n    }\\n\\n    function hasContribution(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (bool) {\\n        return getTickets(inquired, groupId) > 0;\\n    }\\n\\n    //\\n    // Admin\\n    //\\n\\n    function airdrop(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _mintBatch(to, ids, amounts, \\\"\\\");\\n    }\\n\\n    function grantCuratorRole(\\n        address to\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _grantRole(CURATOR_ROLE, to);\\n    }\\n\\n    //\\n    // Internals\\n    //\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC1155, AccessControl) returns (bool) {\\n        return\\n            ERC1155.supportsInterface(interfaceId) ||\\n            AccessControl.supportsInterface(interfaceId);\\n    }\\n\\n    // Basis point calculation\\n    function calculateBasisPoint(\\n        uint256 amount,\\n        uint256 basisPoints\\n    ) public pure returns (uint256) {\\n        require((amount * basisPoints) >= 10_000);\\n        return (amount * basisPoints) / 10_000;\\n    }\\n\\n    // TODO: fallback\\n}\\n\",\"keccak256\":\"0xcec79aa2acc3af9ad1564a7cfd16d64dd61784d60ef92a3f26ebf1b7d93f6a35\",\"license\":\"MIT\"},\"src/ICryptoPunksGroupRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./UsingCryptoPunksGroupRegistryStructs.sol\\\";\\n\\ninterface ICryptoPunksGroupRegistry is UsingCryptoPunksGroupRegistryStructs {\\n    // TODO: Add signatures; consider `forfeit`\\n}\\n\",\"keccak256\":\"0xfa92d64639a5fc6d07ff24fe1deb12d4a00fa5c1b62696ec8d844d9183c6c47b\",\"license\":\"MIT\"},\"src/ICryptoPunksMosaicRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./UsingCryptoPunksMosaicRegistryStructs.sol\\\";\\n\\ninterface ICryptoPunksMosaicRegistry is UsingCryptoPunksMosaicRegistryStructs {\\n    // TODO: fill it out\\n    function create(\\n        uint256 punkId,\\n        uint64 totalClaimableCount,\\n        uint256 purchasePrice,\\n        uint256 minReservePrice,\\n        uint256 maxReservePrice\\n    ) external returns (uint192 originalId);\\n\\n    function mint(\\n        address contributor,\\n        uint192 originalId,\\n        string calldata metadataUri\\n    ) external returns (uint256 mosaicId);\\n\\n    function bid(uint192 originalId, uint256 price) external;\\n}\\n\",\"keccak256\":\"0x32092298b78aec05bdeecab565cee21af6698436365b908835b44a1b5f92f566\",\"license\":\"MIT\"},\"src/UsingCryptoPunksGroupRegistryStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface UsingCryptoPunksGroupRegistryStructs {\\n    /**\\n     * @dev WON if the group has successfully purchased and acquired the target original;\\n     *  LOST if the group has not procured the target original within the expiry.\\n     */\\n    enum GroupStatus {\\n        Open,\\n        Won,\\n        Lost,\\n        Claimable\\n    }\\n\\n    struct Group {\\n        uint192 id;\\n        address creator;\\n        uint256 targetPunkId;\\n        uint256 targetMaxPrice;\\n        uint64 totalTicketSupply;\\n        uint256 unitTicketPrice;\\n        uint256 totalContribution;\\n        uint64 ticketsBought;\\n        uint40 expiry; // in seconds, with respect to block.timestamp\\n        GroupStatus status;\\n        uint256 purchasePrice; // price at which the target is bought\\n        uint192 originalId;\\n    }\\n\\n    event GroupCreated(\\n        uint192 indexed groupId,\\n        address indexed creator,\\n        uint256 targetMaxPrice,\\n        uint64 totalTicketSupply,\\n        uint256 unitTicketPrice\\n    );\\n\\n    event GroupWon(uint192 indexed groupId);\\n\\n    event Contributed(\\n        address indexed contributor,\\n        uint192 indexed groupId,\\n        uint96 indexed ticketQuantity\\n    );\\n\\n    event Claimed(\\n        address indexed claimer,\\n        uint192 indexed groupId,\\n        uint256 indexed mosaicId\\n    );\\n}\\n\",\"keccak256\":\"0xda998874888dfaccd295e7396b0622181f61494047bf06daab7c27d8933bc673\",\"license\":\"MIT\"},\"src/UsingCryptoPunksMosaicRegistryStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface UsingCryptoPunksMosaicRegistryStructs {\\n    struct Original {\\n        uint192 id;\\n        uint256 punkId;\\n        /**\\n         * @dev To calculate governance quorum and token circulation.\\n         *      Corresponds to total ticket circulation per group.\\n         */\\n        uint128 totalMonoCount;\\n        uint128 claimedMonoCount;\\n        uint256 purchasePrice;\\n        uint256 minReservePrice;\\n        uint256 maxReservePrice;\\n        OriginalStatus status;\\n        Bid bid;\\n    }\\n\\n    enum OriginalStatus {\\n        Active,\\n        Bid,\\n        Sold\\n    }\\n\\n    struct Mono {\\n        uint256 mosaicId;\\n        /**\\n         * @dev mosaicId (originalId + monoId) => uri\\n         *\\n         * TODO: Decide whether to use URI or JSON data\\n         */\\n        string metadataUri;\\n        MonoGovernanceOptions governanceOptions;\\n    }\\n\\n    struct MonoGovernanceOptions {\\n        uint256 proposedReservePrice;\\n        MonoBidResponse bidResponse;\\n    }\\n\\n    enum MonoBidResponse {\\n        None,\\n        Yes,\\n        No\\n    }\\n\\n    struct Bid {\\n        address bidder;\\n        uint40 expiry; // block.timestamp, in seconds\\n        uint256 price;\\n    }\\n}\\n\",\"keccak256\":\"0xe7373ff703374dbdab00e68c267794dcb10bdb37b497f4adc8af79e207cc4ace\",\"license\":\"MIT\"},\"src/external/ICryptoPunksMarket.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6. SEE SOURCE BELOW. !!\\npragma solidity ^0.8.4;\\n\\ninterface ICryptoPunksMarket {\\n    function name() external view returns (string memory);\\n\\n    function punksOfferedForSale(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (\\n            bool isForSale,\\n            uint256 punkIndex,\\n            address seller,\\n            uint256 minValue,\\n            address onlySellTo\\n        );\\n\\n    function enterBidForPunk(uint256 punkIndex) external payable;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function acceptBidForPunk(uint256 punkIndex, uint256 minPrice) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function setInitialOwners(\\n        address[] memory addresses,\\n        uint256[] memory indices\\n    ) external;\\n\\n    function withdraw() external;\\n\\n    function imageHash() external view returns (string memory);\\n\\n    function nextPunkIndexToAssign() external view returns (uint256);\\n\\n    function punkIndexToAddress(uint256) external view returns (address);\\n\\n    function standard() external view returns (string memory);\\n\\n    function punkBids(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (bool hasBid, uint256 punkIndex, address bidder, uint256 value);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function allInitialOwnersAssigned() external;\\n\\n    function allPunksAssigned() external view returns (bool);\\n\\n    function buyPunk(uint256 punkIndex) external payable;\\n\\n    function transferPunk(address to, uint256 punkIndex) external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function withdrawBidForPunk(uint256 punkIndex) external;\\n\\n    function setInitialOwner(address to, uint256 punkIndex) external;\\n\\n    function offerPunkForSaleToAddress(\\n        uint256 punkIndex,\\n        uint256 minSalePriceInWei,\\n        address toAddress\\n    ) external;\\n\\n    function punksRemainingToAssign() external view returns (uint256);\\n\\n    function offerPunkForSale(\\n        uint256 punkIndex,\\n        uint256 minSalePriceInWei\\n    ) external;\\n\\n    function getPunk(uint256 punkIndex) external;\\n\\n    function pendingWithdrawals(address) external view returns (uint256);\\n\\n    function punkNoLongerForSale(uint256 punkIndex) external;\\n\\n    event Assign(address indexed to, uint256 punkIndex);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event PunkTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 punkIndex\\n    );\\n    event PunkOffered(\\n        uint256 indexed punkIndex,\\n        uint256 minValue,\\n        address indexed toAddress\\n    );\\n    event PunkBidEntered(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBidWithdrawn(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBought(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress,\\n        address indexed toAddress\\n    );\\n    event PunkNoLongerForSale(uint256 indexed punkIndex);\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[],\\\"name\\\":\\\"name\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punksOfferedForSale\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"isForSale\\\",\\\"type\\\":\\\"bool\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"seller\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"minValue\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"onlySellTo\\\",\\\"type\\\":\\\"address\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"enterBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalSupply\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minPrice\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"acceptBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"decimals\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"addresses\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"name\\\":\\\"indices\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"setInitialOwners\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"withdraw\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"imageHash\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"nextPunkIndexToAssign\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkIndexToAddress\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"standard\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkBids\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"hasBid\\\",\\\"type\\\":\\\"bool\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"bidder\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"allInitialOwnersAssigned\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"allPunksAssigned\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"buyPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"transferPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"symbol\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"withdrawBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setInitialOwner\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minSalePriceInWei\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"offerPunkForSaleToAddress\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"punksRemainingToAssign\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minSalePriceInWei\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"offerPunkForSale\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"pendingWithdrawals\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkNoLongerForSale\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"type\\\":\\\"constructor\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Assign\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Transfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PunkTransfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"minValue\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkOffered\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBidEntered\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBidWithdrawn\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBought\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PunkNoLongerForSale\\\",\\\"type\\\":\\\"event\\\"}]\\n*/\\n\",\"keccak256\":\"0xcc8da30186c7ad45201c8960c2c97eeba37b16ead893bb2f701107c5c0c4fecf\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003d2738038062003d278339810160408190526200003491620001ae565b60408051808201909152601981527f43727970746f50756e6b73204d6f73616963205469636b65740000000000000060208201526200007381620000db565b50600160045562000086600033620000ed565b620000b27f8b8b3fd2ff17638092aa002125df632689f3f241d0a395d3601646fb8c9ed98233620000ed565b6001600160a01b03918216608052600580546001600160a01b0319169190921617905562000357565b6002620000e982826200028b565b5050565b60008281526003602090815260408083206001600160a01b038516845290915290205460ff16620000e95760008281526003602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200014d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b0381168114620001a957600080fd5b919050565b60008060408385031215620001c257600080fd5b620001cd8362000191565b9150620001dd6020840162000191565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200021157607f821691505b6020821081036200023257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200028657600081815260208120601f850160051c81016020861015620002615750805b601f850160051c820191505b8181101562000282578281556001016200026d565b5050505b505050565b81516001600160401b03811115620002a757620002a7620001e6565b620002bf81620002b88454620001fc565b8462000238565b602080601f831160018114620002f75760008415620002de5750858301515b600019600386901b1c1916600185901b17855562000282565b600085815260208120601f198616915b82811015620003285788860151825594840194600190910190840162000307565b5085821015620003475787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080516139986200038f600039600081816105f8015281816108f90152818161195901528181611aaa0152611b2e01526139986000f3fe6080604052600436106101f85760003560e01c80638e9c0fe21161010d578063c02a209e116100a0578063ddcef2b61161006f578063ddcef2b614610652578063e985e9c514610665578063f242432a146106ae578063f77e1759146106ce578063fd81b366146106ee57600080fd5b8063c02a209e14610599578063cdcd57c6146105c6578063d0d851d0146105e6578063d547741f1461063257600080fd5b8063a22cb465116100dc578063a22cb46514610519578063ad64908314610539578063b4ce873b14610559578063bdd99cdf1461057957600080fd5b80638e9c0fe2146104a457806391d14854146104c45780639f7b4579146104e4578063a217fddf1461050457600080fd5b80632cc433d61161019057806344b955711161015f57806344b95571146103d05780634e1273f4146103f057806353b92d091461041d57806357ab7f8d146104645780637f26550d1461048457600080fd5b80632cc433d61461035a5780632eb2c2d6146103705780632f2ff15d1461039057806336568abe146103b057600080fd5b80632269bd1f116101cc5780632269bd1f146102c557806323b8b46d146102f3578063248a9ca314610308578063264bcc571461033857600080fd5b8062fdd58e146101fd57806301ffc9a71461023057806304d2c170146102605780630e89341c14610298575b600080fd5b34801561020957600080fd5b5061021d610218366004612b87565b610704565b6040519081526020015b60405180910390f35b34801561023c57600080fd5b5061025061024b366004612bc9565b61079d565b6040519015158152602001610227565b34801561026c57600080fd5b50600654610280906001600160c01b031681565b6040516001600160c01b039091168152602001610227565b3480156102a457600080fd5b506102b86102b3366004612be6565b6107b7565b6040516102279190612c4f565b3480156102d157600080fd5b506102db61271081565b6040516001600160401b039091168152602001610227565b3480156102ff57600080fd5b506102db606481565b34801561031457600080fd5b5061021d610323366004612be6565b60009081526003602052604090206001015490565b34801561034457600080fd5b50610358610353366004612c77565b6107c2565b005b34801561036657600080fd5b506102db611f4081565b34801561037c57600080fd5b5061035861038b366004612ddd565b610a64565b34801561039c57600080fd5b506103586103ab366004612e8a565b610ab0565b3480156103bc57600080fd5b506103586103cb366004612e8a565b610ada565b3480156103dc57600080fd5b506102506103eb366004612eba565b610b58565b3480156103fc57600080fd5b5061041061040b366004612ee8565b610b6d565b6040516102279190612fef565b34801561042957600080fd5b50610250610438366004612eba565b6001600160c01b03166000908152600760205260409020600101546001600160a01b0391821691161490565b34801561047057600080fd5b5061035861047f366004613002565b610c96565b34801561049057600080fd5b5061021d61049f366004613077565b610cc2565b3480156104b057600080fd5b506103586104bf366004613099565b610cfa565b3480156104d057600080fd5b506102506104df366004612e8a565b610d2f565b3480156104f057600080fd5b506102806104ff366004613077565b610d5a565b34801561051057600080fd5b5061021d600081565b34801561052557600080fd5b506103586105343660046130c4565b610f02565b34801561054557600080fd5b50610358610554366004612c77565b610f0d565b34801561056557600080fd5b5061021d610574366004612eba565b611194565b34801561058557600080fd5b5061021d610594366004612c77565b6111a9565b3480156105a557600080fd5b506105b96105b4366004612c77565b6111fd565b604051610227919061312a565b3480156105d257600080fd5b5061021d6105e1366004613202565b61138a565b3480156105f257600080fd5b5061061a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610227565b34801561063e57600080fd5b5061035861064d366004612e8a565b6115a7565b610358610660366004613286565b6115cc565b34801561067157600080fd5b506102506106803660046132c0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156106ba57600080fd5b506103586106c93660046132ee565b611840565b3480156106da57600080fd5b506103586106e9366004612c77565b611885565b3480156106fa57600080fd5b506102db61753081565b60006001600160a01b0383166107745760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006107a882611c4f565b80610797575061079782611c9f565b606061079782611cc4565b60065481906001600160c01b0390811690821611156107f35760405162461bcd60e51b815260040161076b90613356565b6001600160c01b038216600090815260076020526040902060016007820154600160681b900460ff16600381111561082d5761082d6130f2565b146108725760405162461bcd60e51b81526020600482015260156024820152742a34329033b937bab8103430b9903737ba103bb7b760591b604482015260640161076b565b6005546001600160a01b03166108ca5760405162461bcd60e51b815260206004820152601c60248201527f45786869626974207265676973747279206d7573742062652073657400000000604482015260640161076b565b60055460028201546040516322dca8bb60e21b81526001600160a01b03928316600482015260248101919091527f000000000000000000000000000000000000000000000000000000000000000090911690638b72a2ec90604401600060405180830381600087803b15801561093f57600080fd5b505af1158015610953573d6000803e3d6000fd5b50506005546002840154600785015460088601546001600160a01b03909316945063512137ed935090916001600160401b039091169061099581611f40610cc2565b60088701546109a690617530610cc2565b6040516001600160e01b031960e088901b16815260048101959095526001600160401b03909316602485015260448401919091526064830152608482015260a4016020604051808303816000875af1158015610a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2a919061337f565b6009820180546001600160c01b0319166001600160c01b0392909216919091179055600701805460ff60681b1916600360681b1790555050565b6001600160a01b038516331480610a805750610a808533610680565b610a9c5760405162461bcd60e51b815260040161076b9061339c565b610aa98585858585611d56565b5050505050565b600082815260036020526040902060010154610acb81611ef2565b610ad58383611efc565b505050565b6001600160a01b0381163314610b4a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161076b565b610b548282611f82565b5050565b600080610b658484611194565b119392505050565b60608151835114610bd25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161076b565b600083516001600160401b03811115610bed57610bed612c94565b604051908082528060200260200182016040528015610c16578160200160208202803683370190505b50905060005b8451811015610c8e57610c61858281518110610c3a57610c3a6133ea565b6020026020010151858381518110610c5457610c546133ea565b6020026020010151610704565b828281518110610c7357610c736133ea565b6020908102919091010152610c8781613416565b9050610c1c565b509392505050565b6000610ca181611ef2565b610cbc84848460405180602001604052806000815250611fe9565b50505050565b6000612710610cd1838561342f565b1015610cdc57600080fd5b612710610ce9838561342f565b610cf39190613446565b9392505050565b6000610d0581611ef2565b610b547f8b8b3fd2ff17638092aa002125df632689f3f241d0a395d3601646fb8c9ed98283611efc565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60007f8b8b3fd2ff17638092aa002125df632689f3f241d0a395d3601646fb8c9ed982610d8681611ef2565b60068054600090610d9f906001600160c01b0316613468565b82546001600160c01b039182166101009390930a928302919092021990911617905560646000610dcf8286613446565b6006546001600160c01b0316600081815260076020819052604090912080546001600160c01b0319169092178255600182018054336001600160a01b0319909116179055600282018990556003820188905560048201805467ffffffffffffffff19166001600160401b038716179055600582018390558101805460ff60681b19169055909150610e634262093a80613496565b60078201805464ffffffffff92909216600160401b026cffffffffff000000000000000019909216919091179055600654604080518881526001600160401b038616602082015290810184905233916001600160c01b0316907f6c41f680bd5046e7b94552360a6d353c3d90e84424808396eb845cb2f0b059da9060600160405180910390a350506006546001600160c01b03169250505b5092915050565b610b54338383612134565b610f15612214565b60065481906001600160c01b039081169082161115610f465760405162461bcd60e51b815260040161076b90613356565b6001600160c01b0382166000908152600760205260409020339060036007820154600160681b900460ff166003811115610f8257610f826130f2565b1480610fa05750600781015442600160401b90910464ffffffffff16115b610fec5760405162461bcd60e51b815260206004820152601a60248201527f5468652067726f7570206973206e6f742066696e616c697a6564000000000000604482015260640161076b565b6001600160c01b03841660009081526008602090815260408083206001600160a01b038616845290915290205461107c5760405162461bcd60e51b815260206004820152602e60248201527f4f6e6c7920726566756e6461626c65207469636b657420686f6c64657273206360448201526d616e2067657420726566756e647360901b606482015260840161076b565b6001600160c01b03841660009081526008602090815260408083206001600160a01b03861684529091528120546110b28361226d565b6110bc919061342f565b90506000836001600160a01b03168260405160006040518083038185875af1925050503d806000811461110b576040519150601f19603f3d011682016040523d82523d6000602084013e611110565b606091505b50509050806111545760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b604482015260640161076b565b5050506001600160c01b03831660009081526008602090815260408083206001600160a01b03909416835292905290812055506111916001600455565b50565b6000610cf383836001600160c01b0316610704565b60065460009082906001600160c01b0390811690821611156111dd5760405162461bcd60e51b815260040161076b90613356565b50506001600160c01b031660009081526007602052604090206006015490565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915260065482906001600160c01b03908116908216111561128f5760405162461bcd60e51b815260040161076b90613356565b6001600160c01b038381166000908152600760208181526040928390208351610180810185528154909516855260018101546001600160a01b031691850191909152600281015492840192909252600380830154606085015260048301546001600160401b039081166080860152600584015460a0860152600684015460c08601529183015491821660e0850152600160401b820464ffffffffff16610100850152610120840191600160681b900460ff1690811115611351576113516130f2565b6003811115611362576113626130f2565b8152600882015460208201526009909101546001600160c01b03166040909101529392505050565b6000611394612214565b60065484906001600160c01b0390811690821611156113c55760405162461bcd60e51b815260040161076b90613356565b6001600160c01b038516600090815260076020526040902060036007820154600160681b900460ff1660038111156113ff576113ff6130f2565b1461144c5760405162461bcd60e51b815260206004820152601a60248201527f5468652067726f7570206973206e6f742066696e616c697a6564000000000000604482015260640161076b565b6114563387610b58565b8061146d575060018101546001600160a01b031633145b6114c55760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79207469636b657420686f6c646572732063616e20636c61696d20746f6044820152636b656e7360e01b606482015260840161076b565b6114da33876001600160c01b031660016122b7565b600554600982015460405163adea6f3b60e01b81526001600160a01b039092169163adea6f3b9161151d9133916001600160c01b0316908a908a906004016134a9565b6020604051808303816000875af115801561153c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156091906134f9565b60405190935083906001600160c01b0388169033907f4c1be2553fae8261d25ff0ad45198f755781d31ad84c58a526837480b4d7fece90600090a45050610cf36001600455565b6000828152600360205260409020600101546115c281611ef2565b610ad58383611f82565b60065482906001600160c01b0390811690821611156115fd5760405162461bcd60e51b815260040161076b90613356565b6001600160c01b03831660009081526007602081905260408220908101546004820154919291611639916001600160401b039081169116613512565b6001600160401b0316905080846001600160401b031611156116ac5760405162461bcd60e51b815260206004820152602660248201527f4665776572207469636b6574732072656d61696e696e67207468616e207265716044820152651d595cdd195960d21b606482015260840161076b565b600582015434906000906116ca906001600160401b0388169061342f565b905080821461171b5760405162461bcd60e51b815260206004820152601a60248201527f436f6e747269627574696f6e206d757374206265206578616374000000000000604482015260640161076b565b6000339050828560060160008282546117349190613496565b90915550506007850180548891906000906117599084906001600160401b0316613532565b82546101009290920a6001600160401b038181021990931691831602179091556001600160c01b038a1660009081526008602090815260408083206001600160a01b038716845290915281208054928b169350916117b8908490613496565b925050819055506117ec81896001600160c01b0316896001600160401b031660405180602001604052806000815250612438565b866001600160401b0316886001600160c01b0316826001600160a01b03167fe666172e6168732cfedfefcdfc03bf3faf2588416f76c21085a3d731dfa9c8a160405160405180910390a45050505050505050565b6001600160a01b03851633148061185c575061185c8533610680565b6118785760405162461bcd60e51b815260040161076b9061339c565b610aa98585858585612509565b61188d612214565b60065481906001600160c01b0390811690821611156118be5760405162461bcd60e51b815260040161076b90613356565b6001600160c01b03821660009081526007602052604090206118e03384610b58565b61193b5760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207469636b657420686f6c646572732063616e20696e69746961746560448201526520612062757960d01b606482015260840161076b565b600281015460405163088f11f360e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063088f11f39060240160a060405180830381865afa1580156119a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cc9190613552565b5060078701549094506001600160401b03166064149250611a219150505760405162461bcd60e51b815260206004820152600c60248201526b139bdd081cdbdb19081bdd5d60a21b604482015260640161076b565b8083600601541015611a945760405162461bcd60e51b815260206004820152603660248201527f4f6666657265642070726963652069732067726561746572207468616e207468604482015275329031bab93932b73a1031b7b73a3934b13aba34b7b760511b606482015260840161076b565b60405163104c9fd360e31b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638264fe989083906024016000604051808303818588803b158015611af757600080fd5b505af1158015611b0b573d6000803e3d6000fd5b5050604051630b02f02d60e31b8152600481018690523093506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063581781689150602401602060405180830381865afa158015611b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9b91906135b3565b6001600160a01b031614611be85760405162461bcd60e51b81526020600482015260146024820152730556e6578706563746564206f776e6572736869760641b604482015260640161076b565b6008830181905560078301805460ff60681b1916600160681b1790556040516001600160c01b038616907fa55364f4cf304b1309b80ba955214c6192d2c9ba9fc0aa3c4b3bc0f11c941d7290600090a2611c41856107c2565b505050506111916001600455565b60006001600160e01b03198216636cdb3d1360e11b1480611c8057506001600160e01b031982166303a24d0760e21b145b8061079757506301ffc9a760e01b6001600160e01b0319831614610797565b60006001600160e01b03198216637965db0b60e01b1480610797575061079782611c4f565b60606000611cd183612633565b60010190506000816001600160401b03811115611cf057611cf0612c94565b6040519080825280601f01601f191660200182016040528015611d1a576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611d2457509392505050565b8151835114611d775760405162461bcd60e51b815260040161076b906135d0565b6001600160a01b038416611d9d5760405162461bcd60e51b815260040161076b90613618565b3360005b8451811015611e84576000858281518110611dbe57611dbe6133ea565b602002602001015190506000858381518110611ddc57611ddc6133ea565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611e2c5760405162461bcd60e51b815260040161076b9061365d565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611e69908490613496565b9250508190555050505080611e7d90613416565b9050611da1565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611ed49291906136a7565b60405180910390a4611eea81878787878761270b565b505050505050565b6111918133612866565b611f068282610d2f565b610b545760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f3e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f8c8282610d2f565b15610b545760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b03841661200f5760405162461bcd60e51b815260040161076b906136d5565b81518351146120305760405162461bcd60e51b815260040161076b906135d0565b3360005b84518110156120cc5783818151811061204f5761204f6133ea565b602002602001015160008087848151811061206c5761206c6133ea565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546120b49190613496565b909155508190506120c481613416565b915050612034565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161211d9291906136a7565b60405180910390a4610aa98160008787878761270b565b816001600160a01b0316836001600160a01b0316036121a75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161076b565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6002600454036122665760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161076b565b6002600455565b6000816008015482600601541161228657506000919050565b60008260080154836006015461229c9190613716565b6007840154909150610cf3906001600160401b031682613446565b6001600160a01b0383166123195760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161076b565b336000612325846128bf565b90506000612332846128bf565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156123bb5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161076b565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b6001600160a01b03841661245e5760405162461bcd60e51b815260040161076b906136d5565b33600061246a856128bf565b90506000612477856128bf565b90506000868152602081815260408083206001600160a01b038b168452909152812080548792906124a9908490613496565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461242f8360008989898961290a565b6001600160a01b03841661252f5760405162461bcd60e51b815260040161076b90613618565b33600061253b856128bf565b90506000612548856128bf565b90506000868152602081815260408083206001600160a01b038c1684529091529020548581101561258b5760405162461bcd60e51b815260040161076b9061365d565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906125c8908490613496565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612628848a8a8a8a8a61290a565b505050505050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106126725772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061269e576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106126bc57662386f26fc10000830492506010015b6305f5e10083106126d4576305f5e100830492506008015b61271083106126e857612710830492506004015b606483106126fa576064830492506002015b600a83106107975760010192915050565b6001600160a01b0384163b15611eea5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061274f9089908990889088908890600401613729565b6020604051808303816000875af192505050801561278a575060408051601f3d908101601f1916820190925261278791810190613787565b60015b612836576127966137a4565b806308c379a0036127cf57506127aa6137c0565b806127b557506127d1565b8060405162461bcd60e51b815260040161076b9190612c4f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161076b565b6001600160e01b0319811663bc197c8160e01b1461242f5760405162461bcd60e51b815260040161076b90613849565b6128708282610d2f565b610b545761287d816129c5565b6128888360206129d7565b604051602001612899929190613891565b60408051601f198184030181529082905262461bcd60e51b825261076b91600401612c4f565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106128f9576128f96133ea565b602090810291909101015292915050565b6001600160a01b0384163b15611eea5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061294e9089908990889088908890600401613906565b6020604051808303816000875af1925050508015612989575060408051601f3d908101601f1916820190925261298691810190613787565b60015b612995576127966137a4565b6001600160e01b0319811663f23a6e6160e01b1461242f5760405162461bcd60e51b815260040161076b90613849565b60606107976001600160a01b03831660145b606060006129e683600261342f565b6129f1906002613496565b6001600160401b03811115612a0857612a08612c94565b6040519080825280601f01601f191660200182016040528015612a32576020820181803683370190505b509050600360fc1b81600081518110612a4d57612a4d6133ea565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612a7c57612a7c6133ea565b60200101906001600160f81b031916908160001a9053506000612aa084600261342f565b612aab906001613496565b90505b6001811115612b23576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612adf57612adf6133ea565b1a60f81b828281518110612af557612af56133ea565b60200101906001600160f81b031916908160001a90535060049490941c93612b1c8161394b565b9050612aae565b508315610cf35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161076b565b6001600160a01b038116811461119157600080fd5b60008060408385031215612b9a57600080fd5b8235612ba581612b72565b946020939093013593505050565b6001600160e01b03198116811461119157600080fd5b600060208284031215612bdb57600080fd5b8135610cf381612bb3565b600060208284031215612bf857600080fd5b5035919050565b60005b83811015612c1a578181015183820152602001612c02565b50506000910152565b60008151808452612c3b816020860160208601612bff565b601f01601f19169290920160200192915050565b602081526000610cf36020830184612c23565b6001600160c01b038116811461119157600080fd5b600060208284031215612c8957600080fd5b8135610cf381612c62565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612ccf57612ccf612c94565b6040525050565b60006001600160401b03821115612cef57612cef612c94565b5060051b60200190565b600082601f830112612d0a57600080fd5b81356020612d1782612cd6565b604051612d248282612caa565b83815260059390931b8501820192828101915086841115612d4457600080fd5b8286015b84811015612d5f5780358352918301918301612d48565b509695505050505050565b600082601f830112612d7b57600080fd5b81356001600160401b03811115612d9457612d94612c94565b604051612dab601f8301601f191660200182612caa565b818152846020838601011115612dc057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612df557600080fd5b8535612e0081612b72565b94506020860135612e1081612b72565b935060408601356001600160401b0380821115612e2c57600080fd5b612e3889838a01612cf9565b94506060880135915080821115612e4e57600080fd5b612e5a89838a01612cf9565b93506080880135915080821115612e7057600080fd5b50612e7d88828901612d6a565b9150509295509295909350565b60008060408385031215612e9d57600080fd5b823591506020830135612eaf81612b72565b809150509250929050565b60008060408385031215612ecd57600080fd5b8235612ed881612b72565b91506020830135612eaf81612c62565b60008060408385031215612efb57600080fd5b82356001600160401b0380821115612f1257600080fd5b818501915085601f830112612f2657600080fd5b81356020612f3382612cd6565b604051612f408282612caa565b83815260059390931b8501820192828101915089841115612f6057600080fd5b948201945b83861015612f87578535612f7881612b72565b82529482019490820190612f65565b96505086013592505080821115612f9d57600080fd5b50612faa85828601612cf9565b9150509250929050565b600081518084526020808501945080840160005b83811015612fe457815187529582019590820190600101612fc8565b509495945050505050565b602081526000610cf36020830184612fb4565b60008060006060848603121561301757600080fd5b833561302281612b72565b925060208401356001600160401b038082111561303e57600080fd5b61304a87838801612cf9565b9350604086013591508082111561306057600080fd5b5061306d86828701612cf9565b9150509250925092565b6000806040838503121561308a57600080fd5b50508035926020909101359150565b6000602082840312156130ab57600080fd5b8135610cf381612b72565b801515811461119157600080fd5b600080604083850312156130d757600080fd5b82356130e281612b72565b91506020830135612eaf816130b6565b634e487b7160e01b600052602160045260246000fd5b6004811061312657634e487b7160e01b600052602160045260246000fd5b9052565b81516001600160c01b031681526101808101602083015161315660208401826001600160a01b03169052565b506040830151604083015260608301516060830152608083015161318560808401826001600160401b03169052565b5060a083015160a083015260c083015160c083015260e08301516131b460e08401826001600160401b03169052565b506101008381015164ffffffffff1690830152610120808401516131da82850182613108565b50506101408381015190830152610160928301516001600160c01b0316929091019190915290565b60008060006040848603121561321757600080fd5b833561322281612c62565b925060208401356001600160401b038082111561323e57600080fd5b818601915086601f83011261325257600080fd5b81358181111561326157600080fd5b87602082850101111561327357600080fd5b6020830194508093505050509250925092565b6000806040838503121561329957600080fd5b82356132a481612c62565b915060208301356001600160401b0381168114612eaf57600080fd5b600080604083850312156132d357600080fd5b82356132de81612b72565b91506020830135612eaf81612b72565b600080600080600060a0868803121561330657600080fd5b853561331181612b72565b9450602086013561332181612b72565b9350604086013592506060860135915060808601356001600160401b0381111561334a57600080fd5b612e7d88828901612d6a565b6020808252600f908201526e125b9d985b1a590819dc9bdd5c1259608a1b604082015260600190565b60006020828403121561339157600080fd5b8151610cf381612c62565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161342857613428613400565b5060010190565b808202811582820484141761079757610797613400565b60008261346357634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160c01b038281166002600160c01b0319810161348c5761348c613400565b6001019392505050565b8082018082111561079757610797613400565b6001600160a01b03851681526001600160c01b03841660208201526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b60006020828403121561350b57600080fd5b5051919050565b6001600160401b03828116828216039080821115610efb57610efb613400565b6001600160401b03818116838216019080821115610efb57610efb613400565b600080600080600060a0868803121561356a57600080fd5b8551613575816130b6565b60208701516040880151919650945061358d81612b72565b6060870151608088015191945092506135a581612b72565b809150509295509295909350565b6000602082840312156135c557600080fd5b8151610cf381612b72565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006136ba6040830185612fb4565b82810360208401526136cc8185612fb4565b95945050505050565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b8181038181111561079757610797613400565b6001600160a01b0386811682528516602082015260a06040820181905260009061375590830186612fb4565b82810360608401526137678186612fb4565b9050828103608084015261377b8185612c23565b98975050505050505050565b60006020828403121561379957600080fd5b8151610cf381612bb3565b600060033d11156137bd5760046000803e5060005160e01c5b90565b600060443d10156137ce5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156137fd57505050505090565b82850191508151818111156138155750505050505090565b843d870101602082850101111561382f5750505050505090565b61383e60208286010187612caa565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516138c9816017850160208801612bff565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516138fa816028840160208801612bff565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061394090830184612c23565b979650505050505050565b60008161395a5761395a613400565b50600019019056fea2646970667358221220aea3522559b2b1aede1b613afdc32350ebeffeeb2411e777ccf0700422aaa9c564736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101f85760003560e01c80638e9c0fe21161010d578063c02a209e116100a0578063ddcef2b61161006f578063ddcef2b614610652578063e985e9c514610665578063f242432a146106ae578063f77e1759146106ce578063fd81b366146106ee57600080fd5b8063c02a209e14610599578063cdcd57c6146105c6578063d0d851d0146105e6578063d547741f1461063257600080fd5b8063a22cb465116100dc578063a22cb46514610519578063ad64908314610539578063b4ce873b14610559578063bdd99cdf1461057957600080fd5b80638e9c0fe2146104a457806391d14854146104c45780639f7b4579146104e4578063a217fddf1461050457600080fd5b80632cc433d61161019057806344b955711161015f57806344b95571146103d05780634e1273f4146103f057806353b92d091461041d57806357ab7f8d146104645780637f26550d1461048457600080fd5b80632cc433d61461035a5780632eb2c2d6146103705780632f2ff15d1461039057806336568abe146103b057600080fd5b80632269bd1f116101cc5780632269bd1f146102c557806323b8b46d146102f3578063248a9ca314610308578063264bcc571461033857600080fd5b8062fdd58e146101fd57806301ffc9a71461023057806304d2c170146102605780630e89341c14610298575b600080fd5b34801561020957600080fd5b5061021d610218366004612b87565b610704565b6040519081526020015b60405180910390f35b34801561023c57600080fd5b5061025061024b366004612bc9565b61079d565b6040519015158152602001610227565b34801561026c57600080fd5b50600654610280906001600160c01b031681565b6040516001600160c01b039091168152602001610227565b3480156102a457600080fd5b506102b86102b3366004612be6565b6107b7565b6040516102279190612c4f565b3480156102d157600080fd5b506102db61271081565b6040516001600160401b039091168152602001610227565b3480156102ff57600080fd5b506102db606481565b34801561031457600080fd5b5061021d610323366004612be6565b60009081526003602052604090206001015490565b34801561034457600080fd5b50610358610353366004612c77565b6107c2565b005b34801561036657600080fd5b506102db611f4081565b34801561037c57600080fd5b5061035861038b366004612ddd565b610a64565b34801561039c57600080fd5b506103586103ab366004612e8a565b610ab0565b3480156103bc57600080fd5b506103586103cb366004612e8a565b610ada565b3480156103dc57600080fd5b506102506103eb366004612eba565b610b58565b3480156103fc57600080fd5b5061041061040b366004612ee8565b610b6d565b6040516102279190612fef565b34801561042957600080fd5b50610250610438366004612eba565b6001600160c01b03166000908152600760205260409020600101546001600160a01b0391821691161490565b34801561047057600080fd5b5061035861047f366004613002565b610c96565b34801561049057600080fd5b5061021d61049f366004613077565b610cc2565b3480156104b057600080fd5b506103586104bf366004613099565b610cfa565b3480156104d057600080fd5b506102506104df366004612e8a565b610d2f565b3480156104f057600080fd5b506102806104ff366004613077565b610d5a565b34801561051057600080fd5b5061021d600081565b34801561052557600080fd5b506103586105343660046130c4565b610f02565b34801561054557600080fd5b50610358610554366004612c77565b610f0d565b34801561056557600080fd5b5061021d610574366004612eba565b611194565b34801561058557600080fd5b5061021d610594366004612c77565b6111a9565b3480156105a557600080fd5b506105b96105b4366004612c77565b6111fd565b604051610227919061312a565b3480156105d257600080fd5b5061021d6105e1366004613202565b61138a565b3480156105f257600080fd5b5061061a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610227565b34801561063e57600080fd5b5061035861064d366004612e8a565b6115a7565b610358610660366004613286565b6115cc565b34801561067157600080fd5b506102506106803660046132c0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156106ba57600080fd5b506103586106c93660046132ee565b611840565b3480156106da57600080fd5b506103586106e9366004612c77565b611885565b3480156106fa57600080fd5b506102db61753081565b60006001600160a01b0383166107745760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006107a882611c4f565b80610797575061079782611c9f565b606061079782611cc4565b60065481906001600160c01b0390811690821611156107f35760405162461bcd60e51b815260040161076b90613356565b6001600160c01b038216600090815260076020526040902060016007820154600160681b900460ff16600381111561082d5761082d6130f2565b146108725760405162461bcd60e51b81526020600482015260156024820152742a34329033b937bab8103430b9903737ba103bb7b760591b604482015260640161076b565b6005546001600160a01b03166108ca5760405162461bcd60e51b815260206004820152601c60248201527f45786869626974207265676973747279206d7573742062652073657400000000604482015260640161076b565b60055460028201546040516322dca8bb60e21b81526001600160a01b03928316600482015260248101919091527f000000000000000000000000000000000000000000000000000000000000000090911690638b72a2ec90604401600060405180830381600087803b15801561093f57600080fd5b505af1158015610953573d6000803e3d6000fd5b50506005546002840154600785015460088601546001600160a01b03909316945063512137ed935090916001600160401b039091169061099581611f40610cc2565b60088701546109a690617530610cc2565b6040516001600160e01b031960e088901b16815260048101959095526001600160401b03909316602485015260448401919091526064830152608482015260a4016020604051808303816000875af1158015610a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2a919061337f565b6009820180546001600160c01b0319166001600160c01b0392909216919091179055600701805460ff60681b1916600360681b1790555050565b6001600160a01b038516331480610a805750610a808533610680565b610a9c5760405162461bcd60e51b815260040161076b9061339c565b610aa98585858585611d56565b5050505050565b600082815260036020526040902060010154610acb81611ef2565b610ad58383611efc565b505050565b6001600160a01b0381163314610b4a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161076b565b610b548282611f82565b5050565b600080610b658484611194565b119392505050565b60608151835114610bd25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161076b565b600083516001600160401b03811115610bed57610bed612c94565b604051908082528060200260200182016040528015610c16578160200160208202803683370190505b50905060005b8451811015610c8e57610c61858281518110610c3a57610c3a6133ea565b6020026020010151858381518110610c5457610c546133ea565b6020026020010151610704565b828281518110610c7357610c736133ea565b6020908102919091010152610c8781613416565b9050610c1c565b509392505050565b6000610ca181611ef2565b610cbc84848460405180602001604052806000815250611fe9565b50505050565b6000612710610cd1838561342f565b1015610cdc57600080fd5b612710610ce9838561342f565b610cf39190613446565b9392505050565b6000610d0581611ef2565b610b547f8b8b3fd2ff17638092aa002125df632689f3f241d0a395d3601646fb8c9ed98283611efc565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60007f8b8b3fd2ff17638092aa002125df632689f3f241d0a395d3601646fb8c9ed982610d8681611ef2565b60068054600090610d9f906001600160c01b0316613468565b82546001600160c01b039182166101009390930a928302919092021990911617905560646000610dcf8286613446565b6006546001600160c01b0316600081815260076020819052604090912080546001600160c01b0319169092178255600182018054336001600160a01b0319909116179055600282018990556003820188905560048201805467ffffffffffffffff19166001600160401b038716179055600582018390558101805460ff60681b19169055909150610e634262093a80613496565b60078201805464ffffffffff92909216600160401b026cffffffffff000000000000000019909216919091179055600654604080518881526001600160401b038616602082015290810184905233916001600160c01b0316907f6c41f680bd5046e7b94552360a6d353c3d90e84424808396eb845cb2f0b059da9060600160405180910390a350506006546001600160c01b03169250505b5092915050565b610b54338383612134565b610f15612214565b60065481906001600160c01b039081169082161115610f465760405162461bcd60e51b815260040161076b90613356565b6001600160c01b0382166000908152600760205260409020339060036007820154600160681b900460ff166003811115610f8257610f826130f2565b1480610fa05750600781015442600160401b90910464ffffffffff16115b610fec5760405162461bcd60e51b815260206004820152601a60248201527f5468652067726f7570206973206e6f742066696e616c697a6564000000000000604482015260640161076b565b6001600160c01b03841660009081526008602090815260408083206001600160a01b038616845290915290205461107c5760405162461bcd60e51b815260206004820152602e60248201527f4f6e6c7920726566756e6461626c65207469636b657420686f6c64657273206360448201526d616e2067657420726566756e647360901b606482015260840161076b565b6001600160c01b03841660009081526008602090815260408083206001600160a01b03861684529091528120546110b28361226d565b6110bc919061342f565b90506000836001600160a01b03168260405160006040518083038185875af1925050503d806000811461110b576040519150601f19603f3d011682016040523d82523d6000602084013e611110565b606091505b50509050806111545760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b604482015260640161076b565b5050506001600160c01b03831660009081526008602090815260408083206001600160a01b03909416835292905290812055506111916001600455565b50565b6000610cf383836001600160c01b0316610704565b60065460009082906001600160c01b0390811690821611156111dd5760405162461bcd60e51b815260040161076b90613356565b50506001600160c01b031660009081526007602052604090206006015490565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915260065482906001600160c01b03908116908216111561128f5760405162461bcd60e51b815260040161076b90613356565b6001600160c01b038381166000908152600760208181526040928390208351610180810185528154909516855260018101546001600160a01b031691850191909152600281015492840192909252600380830154606085015260048301546001600160401b039081166080860152600584015460a0860152600684015460c08601529183015491821660e0850152600160401b820464ffffffffff16610100850152610120840191600160681b900460ff1690811115611351576113516130f2565b6003811115611362576113626130f2565b8152600882015460208201526009909101546001600160c01b03166040909101529392505050565b6000611394612214565b60065484906001600160c01b0390811690821611156113c55760405162461bcd60e51b815260040161076b90613356565b6001600160c01b038516600090815260076020526040902060036007820154600160681b900460ff1660038111156113ff576113ff6130f2565b1461144c5760405162461bcd60e51b815260206004820152601a60248201527f5468652067726f7570206973206e6f742066696e616c697a6564000000000000604482015260640161076b565b6114563387610b58565b8061146d575060018101546001600160a01b031633145b6114c55760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79207469636b657420686f6c646572732063616e20636c61696d20746f6044820152636b656e7360e01b606482015260840161076b565b6114da33876001600160c01b031660016122b7565b600554600982015460405163adea6f3b60e01b81526001600160a01b039092169163adea6f3b9161151d9133916001600160c01b0316908a908a906004016134a9565b6020604051808303816000875af115801561153c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156091906134f9565b60405190935083906001600160c01b0388169033907f4c1be2553fae8261d25ff0ad45198f755781d31ad84c58a526837480b4d7fece90600090a45050610cf36001600455565b6000828152600360205260409020600101546115c281611ef2565b610ad58383611f82565b60065482906001600160c01b0390811690821611156115fd5760405162461bcd60e51b815260040161076b90613356565b6001600160c01b03831660009081526007602081905260408220908101546004820154919291611639916001600160401b039081169116613512565b6001600160401b0316905080846001600160401b031611156116ac5760405162461bcd60e51b815260206004820152602660248201527f4665776572207469636b6574732072656d61696e696e67207468616e207265716044820152651d595cdd195960d21b606482015260840161076b565b600582015434906000906116ca906001600160401b0388169061342f565b905080821461171b5760405162461bcd60e51b815260206004820152601a60248201527f436f6e747269627574696f6e206d757374206265206578616374000000000000604482015260640161076b565b6000339050828560060160008282546117349190613496565b90915550506007850180548891906000906117599084906001600160401b0316613532565b82546101009290920a6001600160401b038181021990931691831602179091556001600160c01b038a1660009081526008602090815260408083206001600160a01b038716845290915281208054928b169350916117b8908490613496565b925050819055506117ec81896001600160c01b0316896001600160401b031660405180602001604052806000815250612438565b866001600160401b0316886001600160c01b0316826001600160a01b03167fe666172e6168732cfedfefcdfc03bf3faf2588416f76c21085a3d731dfa9c8a160405160405180910390a45050505050505050565b6001600160a01b03851633148061185c575061185c8533610680565b6118785760405162461bcd60e51b815260040161076b9061339c565b610aa98585858585612509565b61188d612214565b60065481906001600160c01b0390811690821611156118be5760405162461bcd60e51b815260040161076b90613356565b6001600160c01b03821660009081526007602052604090206118e03384610b58565b61193b5760405162461bcd60e51b815260206004820152602660248201527f4f6e6c79207469636b657420686f6c646572732063616e20696e69746961746560448201526520612062757960d01b606482015260840161076b565b600281015460405163088f11f360e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063088f11f39060240160a060405180830381865afa1580156119a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cc9190613552565b5060078701549094506001600160401b03166064149250611a219150505760405162461bcd60e51b815260206004820152600c60248201526b139bdd081cdbdb19081bdd5d60a21b604482015260640161076b565b8083600601541015611a945760405162461bcd60e51b815260206004820152603660248201527f4f6666657265642070726963652069732067726561746572207468616e207468604482015275329031bab93932b73a1031b7b73a3934b13aba34b7b760511b606482015260840161076b565b60405163104c9fd360e31b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638264fe989083906024016000604051808303818588803b158015611af757600080fd5b505af1158015611b0b573d6000803e3d6000fd5b5050604051630b02f02d60e31b8152600481018690523093506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063581781689150602401602060405180830381865afa158015611b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9b91906135b3565b6001600160a01b031614611be85760405162461bcd60e51b81526020600482015260146024820152730556e6578706563746564206f776e6572736869760641b604482015260640161076b565b6008830181905560078301805460ff60681b1916600160681b1790556040516001600160c01b038616907fa55364f4cf304b1309b80ba955214c6192d2c9ba9fc0aa3c4b3bc0f11c941d7290600090a2611c41856107c2565b505050506111916001600455565b60006001600160e01b03198216636cdb3d1360e11b1480611c8057506001600160e01b031982166303a24d0760e21b145b8061079757506301ffc9a760e01b6001600160e01b0319831614610797565b60006001600160e01b03198216637965db0b60e01b1480610797575061079782611c4f565b60606000611cd183612633565b60010190506000816001600160401b03811115611cf057611cf0612c94565b6040519080825280601f01601f191660200182016040528015611d1a576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611d2457509392505050565b8151835114611d775760405162461bcd60e51b815260040161076b906135d0565b6001600160a01b038416611d9d5760405162461bcd60e51b815260040161076b90613618565b3360005b8451811015611e84576000858281518110611dbe57611dbe6133ea565b602002602001015190506000858381518110611ddc57611ddc6133ea565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611e2c5760405162461bcd60e51b815260040161076b9061365d565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611e69908490613496565b9250508190555050505080611e7d90613416565b9050611da1565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611ed49291906136a7565b60405180910390a4611eea81878787878761270b565b505050505050565b6111918133612866565b611f068282610d2f565b610b545760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f3e3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f8c8282610d2f565b15610b545760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b03841661200f5760405162461bcd60e51b815260040161076b906136d5565b81518351146120305760405162461bcd60e51b815260040161076b906135d0565b3360005b84518110156120cc5783818151811061204f5761204f6133ea565b602002602001015160008087848151811061206c5761206c6133ea565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546120b49190613496565b909155508190506120c481613416565b915050612034565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161211d9291906136a7565b60405180910390a4610aa98160008787878761270b565b816001600160a01b0316836001600160a01b0316036121a75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161076b565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6002600454036122665760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161076b565b6002600455565b6000816008015482600601541161228657506000919050565b60008260080154836006015461229c9190613716565b6007840154909150610cf3906001600160401b031682613446565b6001600160a01b0383166123195760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161076b565b336000612325846128bf565b90506000612332846128bf565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156123bb5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161076b565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b6001600160a01b03841661245e5760405162461bcd60e51b815260040161076b906136d5565b33600061246a856128bf565b90506000612477856128bf565b90506000868152602081815260408083206001600160a01b038b168452909152812080548792906124a9908490613496565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461242f8360008989898961290a565b6001600160a01b03841661252f5760405162461bcd60e51b815260040161076b90613618565b33600061253b856128bf565b90506000612548856128bf565b90506000868152602081815260408083206001600160a01b038c1684529091529020548581101561258b5760405162461bcd60e51b815260040161076b9061365d565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906125c8908490613496565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612628848a8a8a8a8a61290a565b505050505050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106126725772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061269e576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106126bc57662386f26fc10000830492506010015b6305f5e10083106126d4576305f5e100830492506008015b61271083106126e857612710830492506004015b606483106126fa576064830492506002015b600a83106107975760010192915050565b6001600160a01b0384163b15611eea5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061274f9089908990889088908890600401613729565b6020604051808303816000875af192505050801561278a575060408051601f3d908101601f1916820190925261278791810190613787565b60015b612836576127966137a4565b806308c379a0036127cf57506127aa6137c0565b806127b557506127d1565b8060405162461bcd60e51b815260040161076b9190612c4f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161076b565b6001600160e01b0319811663bc197c8160e01b1461242f5760405162461bcd60e51b815260040161076b90613849565b6128708282610d2f565b610b545761287d816129c5565b6128888360206129d7565b604051602001612899929190613891565b60408051601f198184030181529082905262461bcd60e51b825261076b91600401612c4f565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106128f9576128f96133ea565b602090810291909101015292915050565b6001600160a01b0384163b15611eea5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061294e9089908990889088908890600401613906565b6020604051808303816000875af1925050508015612989575060408051601f3d908101601f1916820190925261298691810190613787565b60015b612995576127966137a4565b6001600160e01b0319811663f23a6e6160e01b1461242f5760405162461bcd60e51b815260040161076b90613849565b60606107976001600160a01b03831660145b606060006129e683600261342f565b6129f1906002613496565b6001600160401b03811115612a0857612a08612c94565b6040519080825280601f01601f191660200182016040528015612a32576020820181803683370190505b509050600360fc1b81600081518110612a4d57612a4d6133ea565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612a7c57612a7c6133ea565b60200101906001600160f81b031916908160001a9053506000612aa084600261342f565b612aab906001613496565b90505b6001811115612b23576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612adf57612adf6133ea565b1a60f81b828281518110612af557612af56133ea565b60200101906001600160f81b031916908160001a90535060049490941c93612b1c8161394b565b9050612aae565b508315610cf35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161076b565b6001600160a01b038116811461119157600080fd5b60008060408385031215612b9a57600080fd5b8235612ba581612b72565b946020939093013593505050565b6001600160e01b03198116811461119157600080fd5b600060208284031215612bdb57600080fd5b8135610cf381612bb3565b600060208284031215612bf857600080fd5b5035919050565b60005b83811015612c1a578181015183820152602001612c02565b50506000910152565b60008151808452612c3b816020860160208601612bff565b601f01601f19169290920160200192915050565b602081526000610cf36020830184612c23565b6001600160c01b038116811461119157600080fd5b600060208284031215612c8957600080fd5b8135610cf381612c62565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715612ccf57612ccf612c94565b6040525050565b60006001600160401b03821115612cef57612cef612c94565b5060051b60200190565b600082601f830112612d0a57600080fd5b81356020612d1782612cd6565b604051612d248282612caa565b83815260059390931b8501820192828101915086841115612d4457600080fd5b8286015b84811015612d5f5780358352918301918301612d48565b509695505050505050565b600082601f830112612d7b57600080fd5b81356001600160401b03811115612d9457612d94612c94565b604051612dab601f8301601f191660200182612caa565b818152846020838601011115612dc057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612df557600080fd5b8535612e0081612b72565b94506020860135612e1081612b72565b935060408601356001600160401b0380821115612e2c57600080fd5b612e3889838a01612cf9565b94506060880135915080821115612e4e57600080fd5b612e5a89838a01612cf9565b93506080880135915080821115612e7057600080fd5b50612e7d88828901612d6a565b9150509295509295909350565b60008060408385031215612e9d57600080fd5b823591506020830135612eaf81612b72565b809150509250929050565b60008060408385031215612ecd57600080fd5b8235612ed881612b72565b91506020830135612eaf81612c62565b60008060408385031215612efb57600080fd5b82356001600160401b0380821115612f1257600080fd5b818501915085601f830112612f2657600080fd5b81356020612f3382612cd6565b604051612f408282612caa565b83815260059390931b8501820192828101915089841115612f6057600080fd5b948201945b83861015612f87578535612f7881612b72565b82529482019490820190612f65565b96505086013592505080821115612f9d57600080fd5b50612faa85828601612cf9565b9150509250929050565b600081518084526020808501945080840160005b83811015612fe457815187529582019590820190600101612fc8565b509495945050505050565b602081526000610cf36020830184612fb4565b60008060006060848603121561301757600080fd5b833561302281612b72565b925060208401356001600160401b038082111561303e57600080fd5b61304a87838801612cf9565b9350604086013591508082111561306057600080fd5b5061306d86828701612cf9565b9150509250925092565b6000806040838503121561308a57600080fd5b50508035926020909101359150565b6000602082840312156130ab57600080fd5b8135610cf381612b72565b801515811461119157600080fd5b600080604083850312156130d757600080fd5b82356130e281612b72565b91506020830135612eaf816130b6565b634e487b7160e01b600052602160045260246000fd5b6004811061312657634e487b7160e01b600052602160045260246000fd5b9052565b81516001600160c01b031681526101808101602083015161315660208401826001600160a01b03169052565b506040830151604083015260608301516060830152608083015161318560808401826001600160401b03169052565b5060a083015160a083015260c083015160c083015260e08301516131b460e08401826001600160401b03169052565b506101008381015164ffffffffff1690830152610120808401516131da82850182613108565b50506101408381015190830152610160928301516001600160c01b0316929091019190915290565b60008060006040848603121561321757600080fd5b833561322281612c62565b925060208401356001600160401b038082111561323e57600080fd5b818601915086601f83011261325257600080fd5b81358181111561326157600080fd5b87602082850101111561327357600080fd5b6020830194508093505050509250925092565b6000806040838503121561329957600080fd5b82356132a481612c62565b915060208301356001600160401b0381168114612eaf57600080fd5b600080604083850312156132d357600080fd5b82356132de81612b72565b91506020830135612eaf81612b72565b600080600080600060a0868803121561330657600080fd5b853561331181612b72565b9450602086013561332181612b72565b9350604086013592506060860135915060808601356001600160401b0381111561334a57600080fd5b612e7d88828901612d6a565b6020808252600f908201526e125b9d985b1a590819dc9bdd5c1259608a1b604082015260600190565b60006020828403121561339157600080fd5b8151610cf381612c62565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161342857613428613400565b5060010190565b808202811582820484141761079757610797613400565b60008261346357634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160c01b038281166002600160c01b0319810161348c5761348c613400565b6001019392505050565b8082018082111561079757610797613400565b6001600160a01b03851681526001600160c01b03841660208201526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b60006020828403121561350b57600080fd5b5051919050565b6001600160401b03828116828216039080821115610efb57610efb613400565b6001600160401b03818116838216019080821115610efb57610efb613400565b600080600080600060a0868803121561356a57600080fd5b8551613575816130b6565b60208701516040880151919650945061358d81612b72565b6060870151608088015191945092506135a581612b72565b809150509295509295909350565b6000602082840312156135c557600080fd5b8151610cf381612b72565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006136ba6040830185612fb4565b82810360208401526136cc8185612fb4565b95945050505050565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b8181038181111561079757610797613400565b6001600160a01b0386811682528516602082015260a06040820181905260009061375590830186612fb4565b82810360608401526137678186612fb4565b9050828103608084015261377b8185612c23565b98975050505050505050565b60006020828403121561379957600080fd5b8151610cf381612bb3565b600060033d11156137bd5760046000803e5060005160e01c5b90565b600060443d10156137ce5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156137fd57505050505090565b82850191508151818111156138155750505050505090565b843d870101602082850101111561382f5750505050505090565b61383e60208286010187612caa565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516138c9816017850160208801612bff565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516138fa816028840160208801612bff565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061394090830184612c23565b979650505050505050565b60008161395a5761395a613400565b50600019019056fea2646970667358221220aea3522559b2b1aede1b613afdc32350ebeffeeb2411e777ccf0700422aaa9c564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "buy(uint192)": {
        "details": "Can be tried as long as the group is OPEN"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      }
    },
    "stateVariables": {
      "CURATOR_ROLE": {
        "details": "can create and curate the active group"
      },
      "latestGroupId": {
        "details": "also used as a `groupId`, starting from 1."
      },
      "refundableTickets": {
        "details": "groupId -> address -> shares (= the number of tickets bought)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MIN_RESERVE_PRICE_BASIS_POINT()": {
        "notice": "Arithmetic constants"
      },
      "TICKET_SUPPLY_PER_GROUP()": {
        "notice": "Business logic constants TODO: Introduce a global explicit storage contract"
      },
      "refund(uint192)": {
        "notice": "Refunds any remaining contributions pro rata after finalization"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 468,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 474,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 476,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 24,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 399,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4983,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "mosaicRegistry",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ICryptoPunksMosaicRegistry)6149"
      },
      {
        "astId": 4986,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "latestGroupId",
        "offset": 0,
        "slot": "6",
        "type": "t_uint192"
      },
      {
        "astId": 4991,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "groups",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint192,t_struct(Group)6261_storage)"
      },
      {
        "astId": 4998,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "refundableTickets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint192,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICryptoPunksMosaicRegistry)6149": {
        "encoding": "inplace",
        "label": "contract ICryptoPunksMosaicRegistry",
        "numberOfBytes": "20"
      },
      "t_enum(GroupStatus)6235": {
        "encoding": "inplace",
        "label": "enum UsingCryptoPunksGroupRegistryStructs.GroupStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint192,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint192",
        "label": "mapping(uint192 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint192,t_struct(Group)6261_storage)": {
        "encoding": "mapping",
        "key": "t_uint192",
        "label": "mapping(uint192 => struct UsingCryptoPunksGroupRegistryStructs.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)6261_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Group)6261_storage": {
        "encoding": "inplace",
        "label": "struct UsingCryptoPunksGroupRegistryStructs.Group",
        "members": [
          {
            "astId": 6237,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint192"
          },
          {
            "astId": 6239,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6241,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "targetPunkId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6243,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "targetMaxPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6245,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "totalTicketSupply",
            "offset": 0,
            "slot": "4",
            "type": "t_uint64"
          },
          {
            "astId": 6247,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "unitTicketPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6249,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "totalContribution",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6251,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "ticketsBought",
            "offset": 0,
            "slot": "7",
            "type": "t_uint64"
          },
          {
            "astId": 6253,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "expiry",
            "offset": 8,
            "slot": "7",
            "type": "t_uint40"
          },
          {
            "astId": 6256,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "status",
            "offset": 13,
            "slot": "7",
            "type": "t_enum(GroupStatus)6235"
          },
          {
            "astId": 6258,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "purchasePrice",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6260,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "originalId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint192"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}