{
  "address": "0x77f07731646fbE448F252d8bF211fF112B11330B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mintAuthority",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cryptoPunksMarketAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "totalClaimableCount",
          "type": "uint64"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cryptoPunksMarket",
      "outputs": [
        {
          "internalType": "contract ICryptoPunksMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "name": "fromMosaicId",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "uint64",
          "name": "monoId",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestOriginalId",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "string",
          "name": "metadataUri",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "uint64",
          "name": "monoId",
          "type": "uint64"
        }
      ],
      "name": "toMosaicId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x68f9927bc74d7078377240b36c39268df6581a777755f632146d9b7bec54b6b6",
  "receipt": {
    "to": null,
    "from": "0x4eF26a3129b91Ee21d5E9Ed963e6549B531C3744",
    "contractAddress": "0x77f07731646fbE448F252d8bF211fF112B11330B",
    "transactionIndex": 88,
    "gasUsed": "3895742",
    "logsBloom": "0x
    "blockHash": "0xd19539d1bf587fd6a35f1acc067106f04b27c043aa6752147e95625bd9a2875f",
    "transactionHash": "0x68f9927bc74d7078377240b36c39268df6581a777755f632146d9b7bec54b6b6",
    "logs": [
      {
        "transactionIndex": 88,
        "blockNumber": 8265111,
        "transactionHash": "0x68f9927bc74d7078377240b36c39268df6581a777755f632146d9b7bec54b6b6",
        "address": "0x77f07731646fbE448F252d8bF211fF112B11330B",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ef26a3129b91ee21d5e9ed963e6549b531c3744",
          "0x0000000000000000000000004ef26a3129b91ee21d5e9ed963e6549b531c3744"
        ],
        "data": "0x",
        "logIndex": 141,
        "blockHash": "0xd19539d1bf587fd6a35f1acc067106f04b27c043aa6752147e95625bd9a2875f"
      },
      {
        "transactionIndex": 88,
        "blockNumber": 8265111,
        "transactionHash": "0x68f9927bc74d7078377240b36c39268df6581a777755f632146d9b7bec54b6b6",
        "address": "0x77f07731646fbE448F252d8bF211fF112B11330B",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000004ef26a3129b91ee21d5e9ed963e6549b531c3744",
          "0x0000000000000000000000004ef26a3129b91ee21d5e9ed963e6549b531c3744"
        ],
        "data": "0x",
        "logIndex": 142,
        "blockHash": "0xd19539d1bf587fd6a35f1acc067106f04b27c043aa6752147e95625bd9a2875f"
      }
    ],
    "blockNumber": 8265111,
    "cumulativeGasUsed": "27001067",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4eF26a3129b91Ee21d5E9Ed963e6549B531C3744",
    "0xcAa3c23aeEF417b00208e150ad04fD6A1878e474"
  ],
  "numDeployments": 1,
  "solcInputHash": "66275d9e1afa9fba2c7ce2f6e14bc03d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintAuthority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cryptoPunksMarketAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"totalClaimableCount\",\"type\":\"uint64\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoPunksMarket\",\"outputs\":[{\"internalType\":\"contract ICryptoPunksMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"name\":\"fromMosaicId\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"monoId\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestOriginalId\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"monoId\",\"type\":\"uint64\"}],\"name\":\"toMosaicId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"}},\"stateVariables\":{\"latestMonoIds\":{\"details\":\"0 represents the Original; each Mono is assigned an ID starting from 1.      originalId => latestMonoId\"},\"latestOriginalId\":{\"details\":\"used as a `originalId`, starting from 1.\"},\"metadata\":{\"details\":\"mosaicId (originalId + monoId) => uri\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CryptoPunksMosaicRegistry.sol\":\"CryptoPunksMosaicRegistry\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363732393933373539383730\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"src/CryptoPunksGroupRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Strings} from \\\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\\\";\\nimport {ERC1155} from \\\"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {IERC721} from \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\nimport {AccessControl} from \\\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport  \\\"./external/ICryptoPunksMarket.sol\\\";\\nimport \\\"./ICryptoPunksGroupRegistry.sol\\\";\\nimport \\\"./ICryptoPunksMosaicRegistry.sol\\\";\\n\\n// TODO: Wire with Museum\\n// TODO: Migrate custom revert error messages to byte constants\\ncontract CryptoPunksGroupRegistry is\\n    ICryptoPunksGroupRegistry,\\n    ERC1155,\\n    AccessControl,\\n    ReentrancyGuard\\n{\\n    // TODO: Introduce a global explicit storage contract\\n    uint64 public constant TICKET_SUPPLY_PER_GROUP = 100;\\n\\n    ICryptoPunksMarket public immutable cryptoPunksMarket;\\n    ICryptoPunksMosaicRegistry private mosaicRegistry;\\n\\n    /**\\n     * @dev also used as a `groupId`, starting from 1.\\n     */\\n    uint192 public latestGroupId;\\n    mapping(uint192 => Group) private groups;\\n\\n    /**\\n     * @dev groupId -> address -> shares (= the number of tickets bought)\\n     */\\n    mapping(uint192 => mapping(address => uint256)) private refundableTickets;\\n\\n    constructor(\\n        address cryptoPunksMarketAddress,\\n        address mosaicRegistryAddress\\n    ) ERC1155(\\\"CryptoPunks Mosaic Ticket\\\") {\\n        // TODO: Inherit a configuration storage from a Museum\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        // TODO: code it up with config passing\\n        cryptoPunksMarket = ICryptoPunksMarket(cryptoPunksMarketAddress);\\n        mosaicRegistry = ICryptoPunksMosaicRegistry(mosaicRegistryAddress);\\n    }\\n\\n    modifier onlyValidGroup(uint192 groupId) {\\n        require(groupId <= latestGroupId, \\\"Invalid groupId\\\");\\n        _;\\n    }\\n\\n    function create(\\n        uint256 targetPunkId,\\n        uint256 targetMaxPrice\\n    ) external returns (uint192 groupId) {\\n        ++latestGroupId;\\n        uint64 totalTicketSupply = TICKET_SUPPLY_PER_GROUP;\\n        uint256 unitTicketPrice = targetMaxPrice / totalTicketSupply;\\n\\n        Group storage newGroup = groups[latestGroupId];\\n        newGroup.id = latestGroupId;\\n        newGroup.creator = msg.sender;\\n        newGroup.targetPunkId = targetPunkId;\\n        newGroup.targetMaxPrice = targetMaxPrice;\\n        newGroup.totalTicketSupply = totalTicketSupply;\\n        newGroup.unitTicketPrice = unitTicketPrice;\\n        newGroup.status = GroupStatus.Open;\\n        // TODO: Make it configurable\\n        newGroup.expiry = uint40(block.timestamp + 604800);\\n\\n        emit GroupCreated(\\n            latestGroupId,\\n            msg.sender,\\n            targetMaxPrice,\\n            totalTicketSupply,\\n            unitTicketPrice\\n        );\\n        return latestGroupId;\\n    }\\n\\n    function contribute(\\n        uint192 groupId,\\n        uint64 ticketQuantity\\n    ) external payable onlyValidGroup(groupId) {\\n        Group storage group = groups[groupId];\\n\\n        uint256 ticketsLeft = group.totalTicketSupply - group.ticketsBought;\\n        require(\\n            ticketQuantity <= ticketsLeft,\\n            \\\"Fewer tickets remaining than requested\\\"\\n        );\\n\\n        uint256 ethReceived = msg.value;\\n        uint256 ethRequired = group.unitTicketPrice * ticketQuantity;\\n        require(ethReceived == ethRequired, \\\"Contribution must be exact\\\");\\n\\n        address contributor = msg.sender;\\n        group.totalContribution += ethReceived;\\n        group.ticketsBought += ticketQuantity;\\n        refundableTickets[groupId][contributor] += ticketQuantity;\\n\\n        _mint(contributor, groupId, ticketQuantity, \\\"\\\");\\n\\n        emit Contributed(contributor, groupId, ticketQuantity);\\n    }\\n\\n    /**\\n     * @dev Can be tried as long as the group is OPEN\\n     */\\n    function buy(uint192 groupId) external nonReentrant onlyValidGroup(groupId) {\\n        Group storage group = groups[groupId];\\n        require(\\n            hasContribution(msg.sender, groupId),\\n            \\\"Only ticket holders can initiate a buy\\\"\\n        );\\n        uint256 punkId = group.targetPunkId;\\n        (, , , uint256 offeredPrice, ) = cryptoPunksMarket.punksOfferedForSale(punkId);\\n        // TODO: Require all 100 tickets bought already\\n        require(\\n            group.totalContribution >= offeredPrice,\\n            \\\"Offered price is greater than the current contribution\\\"\\n        );\\n        cryptoPunksMarket.buyPunk{value: offeredPrice}(punkId);\\n        require(\\n            cryptoPunksMarket.punkIndexToAddress(punkId) == address(this),\\n            \\\"Unexpected ownership\\\"\\n        );\\n        group.purchasePrice = offeredPrice;\\n        group.status = GroupStatus.Won;\\n        emit GroupWon(groupId);\\n        finalizeOnWon(groupId);\\n    }\\n\\n    // Separated for retry after any partial failure\\n    function finalizeOnWon(uint192 groupId) public onlyValidGroup(groupId) {\\n        // TODO: Consider removing `getValidGroup` invocation if it costs too much gas\\n        Group storage group = groups[groupId];\\n        require(group.status == GroupStatus.Won, \\\"The group has not won\\\");\\n        require(\\n            address(mosaicRegistry) != address(0x0),\\n            \\\"Exhibit registry must be set\\\"\\n        );\\n\\n        // FIXME: Defend against reentrancy attacks in edge cases where the same cryptopunk ID is used later\\n        cryptoPunksMarket.transferPunk(\\n            address(mosaicRegistry),\\n            group.targetPunkId\\n        );\\n        group.originalId = mosaicRegistry.create(\\n            group.targetPunkId,\\n            group.ticketsBought\\n        );\\n        // TODO: Consider whether to explicitly mark other competing groups as LOST\\n        group.status = GroupStatus.Claimable;\\n    }\\n\\n    function claim(\\n        uint192 groupId,\\n        string calldata metadataUri\\n    )\\n        external\\n        nonReentrant\\n        onlyValidGroup(groupId)\\n        returns (uint256 mosaicId)\\n    {\\n        Group storage group = groups[groupId];\\n        require(\\n            group.status == GroupStatus.Claimable,\\n            \\\"The group is not finalized\\\"\\n        );\\n        require(\\n            hasContribution(msg.sender, groupId) || msg.sender == group.creator,\\n            \\\"Only ticket holders can claim tokens\\\"\\n        );\\n\\n        _burn(msg.sender, groupId, 1);\\n\\n        // TODO: take metadata\\n        mosaicId = mosaicRegistry.mint(msg.sender, group.originalId, metadataUri);\\n\\n        emit Claimed(msg.sender, groupId, mosaicId);\\n        return mosaicId;\\n    }\\n\\n    /**\\n     * Refunds any remaining contributions pro rata after finalization\\n     */\\n    function refund(\\n        uint192 groupId\\n    )\\n        external\\n        nonReentrant\\n        onlyValidGroup(groupId)\\n    {\\n        address payable contributor = payable(msg.sender);\\n        Group storage group = groups[groupId];\\n        require(\\n            group.status == GroupStatus.Claimable || group.expiry > block.timestamp,\\n            \\\"The group is not finalized\\\"\\n        );\\n        require(\\n            refundableTickets[groupId][contributor] > 0,\\n            \\\"Only refundable ticket holders can get refunds\\\"\\n        );\\n        uint256 owed = getRefundPerTicket(group) * refundableTickets[groupId][contributor];\\n        (bool sent, ) = contributor.call{value: owed}(\\\"\\\");\\n        require(sent, \\\"Failed to refund\\\");\\n        refundableTickets[groupId][contributor] = 0;\\n    }\\n\\n    function finalizeOnLost(uint192 groupId) public {\\n        // TODO: Refund the remaining contributions pro rata when won/lost/expired\\n    }\\n\\n    function getRefundPerTicket(\\n        Group storage group\\n    ) private view returns (uint256 refundPerTicket) {\\n        if (group.totalContribution <= group.purchasePrice) {\\n            return 0;\\n        }\\n        uint256 surplus = group.totalContribution - group.purchasePrice;\\n        return surplus / group.ticketsBought;\\n    }\\n\\n    //\\n    // Registry-related views\\n    //\\n\\n    function uri(uint256 id) public view override returns (string memory) {\\n        // TODO: Implement this\\n        return Strings.toString(id);\\n    }\\n\\n    //\\n    // Group-related views\\n    //\\n\\n    function getGroupInfo(uint192 groupId) public view onlyValidGroup(groupId) returns (\\n        address creator,\\n        uint256 targetMaxPrice,\\n        uint96 ticketsBought,\\n        GroupStatus status\\n    ) {\\n        Group storage group = groups[groupId];\\n        return (\\n            group.creator,\\n            group.targetMaxPrice,\\n            group.ticketsBought,\\n            group.status\\n        );\\n    }\\n\\n    function getGroupTotalContribution(\\n        uint192 groupId\\n    ) public view onlyValidGroup(groupId) returns (uint256 totalContribution) {\\n        return groups[groupId].totalContribution;\\n    }\\n\\n    //\\n    // Ticket\\n    //\\n\\n    function getTickets(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (uint256) {\\n        return balanceOf(inquired, uint256(groupId));\\n    }\\n\\n    function isCreator(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (bool) {\\n        return groups[groupId].creator == inquired;\\n    }\\n\\n    function hasContribution(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (bool) {\\n        return getTickets(inquired, groupId) > 0;\\n    }\\n\\n    //\\n    // Admin\\n    //\\n\\n    function airdrop(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _mintBatch(to, ids, amounts, \\\"\\\");\\n    }\\n\\n    //\\n    // Internals\\n    //\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC1155, AccessControl) returns (bool) {\\n        return\\n            ERC1155.supportsInterface(interfaceId) ||\\n            AccessControl.supportsInterface(interfaceId);\\n    }\\n\\n    // TODO: fallback\\n}\\n\",\"keccak256\":\"0x5ca30f2660277f6db0391c24e161096592b5b935340ec42540f2b458ae4add2a\",\"license\":\"MIT\"},\"src/CryptoPunksMosaicRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {ERC1155} from \\\"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {SafeCast} from \\\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\\\";\\nimport {AccessControl} from \\\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./external/ICryptoPunksMarket.sol\\\";\\nimport \\\"./ICryptoPunksMosaicRegistry.sol\\\";\\nimport  \\\"./CryptoPunksGroupRegistry.sol\\\";\\n\\n// TODO: Wire with Museum\\n// TODO: Generalize for token contracts other than CryptoPunksMarket\\n// TODO: Introduce `reconstitute` with claimed token tracking/oracle floor price retrieval\\n// TODO: Reconsider the ID scheme so that the same origin contract's same groups map to the same ID (contract, group) => (internal id)\\ncontract CryptoPunksMosaicRegistry is ICryptoPunksMosaicRegistry, ERC1155, AccessControl {\\n    using SafeCast for uint256;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    uint256 private constant MONO_ID_BITS = 64;\\n    uint256 private constant MONO_ID_BITMASK = (1 << (MONO_ID_BITS + 1)) - 1; // lower 64 bits\\n\\n    ICryptoPunksMarket public immutable cryptoPunksMarket;\\n\\n    /**\\n     * @dev used as a `originalId`, starting from 1.\\n     */\\n    uint192 public latestOriginalId;\\n\\n    mapping(uint192 => Original) private originals;\\n\\n    /**\\n     * @dev 0 represents the Original; each Mono is assigned an ID starting from 1.\\n     *      originalId => latestMonoId\\n     */\\n    mapping(uint192 => uint64) private latestMonoIds;\\n\\n    /**\\n     * @dev mosaicId (originalId + monoId) => uri\\n     */\\n    mapping(uint256 => string) private metadata;\\n\\n    constructor(\\n        address _mintAuthority,\\n        address cryptoPunksMarketAddress\\n    ) ERC1155(\\\"CryptoPunks Mosaic\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, _mintAuthority);\\n        cryptoPunksMarket = ICryptoPunksMarket(cryptoPunksMarketAddress);\\n    }\\n\\n    //\\n    // For mint authority\\n    //\\n    function create(\\n        uint256 punkId,\\n        uint64 totalClaimableCount\\n    ) external override onlyRole(MINTER_ROLE) returns (uint192 originalId) {\\n        require(\\n            cryptoPunksMarket.punkIndexToAddress(punkId) ==\\n                address(this),\\n            \\\"The contract must own the punk\\\"\\n        );\\n        originalId = ++latestOriginalId;\\n        ++latestMonoIds[originalId];\\n        // TODO(@jyterencekim): Consider taking purchasePrice for a basis for reconstitution later\\n        originals[originalId] = Original({\\n            id: originalId,\\n            punkId: punkId,\\n            totalMonoCount: totalClaimableCount,\\n            claimedMonoCount: 0,\\n            status: OriginalStatus.Active,\\n        // TODO(@kimhodol): Change expiry and price value\\n            bid: Bid({bidder: address(0x0), expiry: 0, price: 0})\\n        });\\n        return originalId;\\n    }\\n\\n    function mint(\\n        address contributor,\\n        uint192 originalId,\\n        string calldata metadataUri\\n    ) external override onlyRole(MINTER_ROLE) returns (uint256 mosaicId) {\\n        require(\\n            latestMonoIds[originalId] > 0,\\n            \\\"Original must be initialized first\\\"\\n        );\\n        uint64 monoId = latestMonoIds[originalId]++;\\n        mosaicId = toMosaicId(originalId, monoId);\\n        metadata[mosaicId] = metadataUri;\\n        originals[originalId].claimedMonoCount++;\\n        _mint(contributor, mosaicId, 1, \\\"\\\");\\n\\n        // TODO: handle metadataUri\\n\\n        return mosaicId;\\n    }\\n\\n    function bid(uint192 originalId, uint256 price) external {\\n        // TODO: Implement this\\n    }\\n\\n    //\\n    // Helpers\\n    //\\n    function toMosaicId(\\n        uint192 originalId,\\n        uint64 monoId\\n    ) public pure returns (uint256 mosaicId) {\\n        return (uint256(originalId) << MONO_ID_BITS) | uint256(monoId);\\n    }\\n\\n    function fromMosaicId(\\n        uint256 mosaicId\\n    ) public pure returns (uint192 originalId, uint64 monoId) {\\n        return (\\n            uint192(mosaicId >> MONO_ID_BITS),\\n            uint64(mosaicId & MONO_ID_BITMASK)\\n        );\\n    }\\n\\n    //\\n    // ERC1155\\n    //\\n    function uri(uint256 mosaicId) public view override returns (string memory) {\\n        return metadata[mosaicId];\\n    }\\n\\n    //\\n    // Internals\\n    //\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC1155, AccessControl) returns (bool) {\\n        return\\n            ERC1155.supportsInterface(interfaceId) ||\\n            AccessControl.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbdf6e4b2f9b131f29682003b07b7351200c01ca2ba6be9697812e28f5a6553f2\",\"license\":\"MIT\"},\"src/ICryptoPunksGroupRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./UsingCryptoPunksGroupRegistryStructs.sol\\\";\\n\\ninterface ICryptoPunksGroupRegistry is UsingCryptoPunksGroupRegistryStructs {\\n    // TODO: Add signatures; consider `forfeit`\\n}\\n\",\"keccak256\":\"0xfa92d64639a5fc6d07ff24fe1deb12d4a00fa5c1b62696ec8d844d9183c6c47b\",\"license\":\"MIT\"},\"src/ICryptoPunksMosaicRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./UsingCryptoPunksMosaicRegistryStructs.sol\\\";\\n\\ninterface ICryptoPunksMosaicRegistry is UsingCryptoPunksMosaicRegistryStructs {\\n\\n    // TODO: fill it out\\n    function create(\\n        uint256 punkId,\\n        uint64 totalClaimableCount\\n    ) external returns (uint192 originalId);\\n\\n    function mint(\\n        address contributor,\\n        uint192 originalId,\\n        string calldata metadataUri\\n    ) external returns (uint256 mosaicId);\\n\\n    function bid(uint192 originalId, uint256 price) external;\\n}\\n\",\"keccak256\":\"0x9d1dde1dc3b660ba17d3bf50f54d259bd234d0c8e2b598295ef39edb2d719242\",\"license\":\"MIT\"},\"src/UsingCryptoPunksGroupRegistryStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface UsingCryptoPunksGroupRegistryStructs {\\n    /**\\n     * @dev WON if the group has successfully purchased and acquired the target original;\\n     *  LOST if the group has not procured the target original within the expiry.\\n     */\\n    enum GroupStatus {\\n        Open,\\n        Won,\\n        Lost,\\n        Claimable\\n    }\\n\\n    struct Group {\\n        uint192 id;\\n        address creator;\\n        uint256 targetPunkId;\\n        uint256 targetMaxPrice;\\n        uint64 totalTicketSupply;\\n        uint256 unitTicketPrice;\\n        uint256 totalContribution;\\n        uint64 ticketsBought;\\n        uint40 expiry; // in seconds, with respect to block.timestamp\\n        GroupStatus status;\\n        uint256 purchasePrice; // price at which the target is bought\\n        uint192 originalId;\\n    }\\n\\n    event GroupCreated(\\n        uint192 indexed groupId,\\n        address indexed creator,\\n        uint256 targetMaxPrice,\\n        uint64 totalTicketSupply,\\n        uint256 unitTicketPrice\\n    );\\n\\n    event GroupWon(uint192 indexed groupId);\\n\\n    event Contributed(\\n        address indexed contributor,\\n        uint192 indexed groupId,\\n        uint96 indexed ticketQuantity\\n    );\\n\\n    event Claimed(\\n        address indexed claimer,\\n        uint192 indexed groupId,\\n        uint256 indexed mosaicId\\n    );\\n}\\n\",\"keccak256\":\"0xda998874888dfaccd295e7396b0622181f61494047bf06daab7c27d8933bc673\",\"license\":\"MIT\"},\"src/UsingCryptoPunksMosaicRegistryStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface UsingCryptoPunksMosaicRegistryStructs {\\n\\n    struct Original {\\n        uint192 id;\\n        uint256 punkId;\\n        /**\\n         * @dev To calculate governance quorum and token circulation. \\n         *      Corresponds to total ticket circulation per group.\\n         */\\n        uint128 totalMonoCount;\\n        uint128 claimedMonoCount;\\n        OriginalStatus status;\\n        Bid bid;\\n    }\\n\\n    enum OriginalStatus {\\n        Active,\\n        Bid,\\n        Sold\\n    }\\n\\n    struct Bid {\\n        address bidder;\\n        uint40 expiry; // block.timestamp, in seconds\\n        uint256 price;\\n    }\\n}\\n\",\"keccak256\":\"0xc3853cc79a011f7d2d729bf6dcd7592fd0c8eb69a63622f982a891aa756c4c33\",\"license\":\"MIT\"},\"src/external/ICryptoPunksMarket.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6. SEE SOURCE BELOW. !!\\npragma solidity ^0.8.4;\\n\\ninterface ICryptoPunksMarket {\\n    function name() external view returns (string memory);\\n\\n    function punksOfferedForSale(uint256)\\n        external\\n        view\\n        returns (\\n            bool isForSale,\\n            uint256 punkIndex,\\n            address seller,\\n            uint256 minValue,\\n            address onlySellTo\\n        );\\n\\n    function enterBidForPunk(uint256 punkIndex) external payable;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function acceptBidForPunk(uint256 punkIndex, uint256 minPrice) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function setInitialOwners(\\n        address[] memory addresses,\\n        uint256[] memory indices\\n    ) external;\\n\\n    function withdraw() external;\\n\\n    function imageHash() external view returns (string memory);\\n\\n    function nextPunkIndexToAssign() external view returns (uint256);\\n\\n    function punkIndexToAddress(uint256) external view returns (address);\\n\\n    function standard() external view returns (string memory);\\n\\n    function punkBids(uint256)\\n        external\\n        view\\n        returns (\\n            bool hasBid,\\n            uint256 punkIndex,\\n            address bidder,\\n            uint256 value\\n        );\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function allInitialOwnersAssigned() external;\\n\\n    function allPunksAssigned() external view returns (bool);\\n\\n    function buyPunk(uint256 punkIndex) external payable;\\n\\n    function transferPunk(address to, uint256 punkIndex) external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function withdrawBidForPunk(uint256 punkIndex) external;\\n\\n    function setInitialOwner(address to, uint256 punkIndex) external;\\n\\n    function offerPunkForSaleToAddress(\\n        uint256 punkIndex,\\n        uint256 minSalePriceInWei,\\n        address toAddress\\n    ) external;\\n\\n    function punksRemainingToAssign() external view returns (uint256);\\n\\n    function offerPunkForSale(uint256 punkIndex, uint256 minSalePriceInWei)\\n        external;\\n\\n    function getPunk(uint256 punkIndex) external;\\n\\n    function pendingWithdrawals(address) external view returns (uint256);\\n\\n    function punkNoLongerForSale(uint256 punkIndex) external;\\n\\n    event Assign(address indexed to, uint256 punkIndex);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event PunkTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 punkIndex\\n    );\\n    event PunkOffered(\\n        uint256 indexed punkIndex,\\n        uint256 minValue,\\n        address indexed toAddress\\n    );\\n    event PunkBidEntered(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBidWithdrawn(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBought(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress,\\n        address indexed toAddress\\n    );\\n    event PunkNoLongerForSale(uint256 indexed punkIndex);\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[],\\\"name\\\":\\\"name\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punksOfferedForSale\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"isForSale\\\",\\\"type\\\":\\\"bool\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"seller\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"minValue\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"onlySellTo\\\",\\\"type\\\":\\\"address\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"enterBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalSupply\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minPrice\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"acceptBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"decimals\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"addresses\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"name\\\":\\\"indices\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"setInitialOwners\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"withdraw\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"imageHash\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"nextPunkIndexToAssign\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkIndexToAddress\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"standard\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkBids\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"hasBid\\\",\\\"type\\\":\\\"bool\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"bidder\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"allInitialOwnersAssigned\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"allPunksAssigned\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"buyPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"transferPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"symbol\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"withdrawBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setInitialOwner\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minSalePriceInWei\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"offerPunkForSaleToAddress\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"punksRemainingToAssign\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minSalePriceInWei\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"offerPunkForSale\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"pendingWithdrawals\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkNoLongerForSale\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"type\\\":\\\"constructor\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Assign\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Transfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PunkTransfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"minValue\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkOffered\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBidEntered\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBidWithdrawn\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBought\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PunkNoLongerForSale\\\",\\\"type\\\":\\\"event\\\"}]\\n*/\",\"keccak256\":\"0x6caa5eca130dc88de49f44f5036e0cfdb26b4749ccf67d5329847166ffff3f4b\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004ab838038062004ab88339818101604052810190620000379190620002e6565b6040518060400160405280601281526020017f43727970746f50756e6b73204d6f7361696300000000000000000000000000008152506200007e816200010260201b60201c565b50620000946000801b336200011760201b60201c565b620000c67f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6836200011760201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050506200068e565b8060029081620001139190620005a7565b5050565b6200012982826200020960201b60201c565b620002055760016003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001aa6200027460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002ae8262000281565b9050919050565b620002c081620002a1565b8114620002cc57600080fd5b50565b600081519050620002e081620002b5565b92915050565b600080604083850312156200030057620002ff6200027c565b5b60006200031085828601620002cf565b92505060206200032385828601620002cf565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003af57607f821691505b602082108103620003c557620003c462000367565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200042f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003f0565b6200043b8683620003f0565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000488620004826200047c8462000453565b6200045d565b62000453565b9050919050565b6000819050919050565b620004a48362000467565b620004bc620004b3826200048f565b848454620003fd565b825550505050565b600090565b620004d3620004c4565b620004e081848462000499565b505050565b5b818110156200050857620004fc600082620004c9565b600181019050620004e6565b5050565b601f82111562000557576200052181620003cb565b6200052c84620003e0565b810160208510156200053c578190505b620005546200054b85620003e0565b830182620004e5565b50505b505050565b600082821c905092915050565b60006200057c600019846008026200055c565b1980831691505092915050565b600062000597838362000569565b9150826002028217905092915050565b620005b2826200032d565b67ffffffffffffffff811115620005ce57620005cd62000338565b5b620005da825462000396565b620005e78282856200050c565b600060209050601f8311600181146200061f57600084156200060a578287015190505b62000616858262000589565b86555062000686565b601f1984166200062f86620003cb565b60005b82811015620006595784890151825560018201915060208501945060208101905062000632565b8683101562000679578489015162000675601f89168262000569565b8355505b6001600288020188555050505b505050505050565b608051614407620006b160003960008181610667015261110101526144076000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c806379f5f153116100b8578063af4a6c0c1161007c578063af4a6c0c146103bf578063d0d851d0146103ef578063d53913931461040d578063d547741f1461042b578063e985e9c514610447578063f242432a1461047757610141565b806379f5f1531461030957806391d1485414610325578063a217fddf14610355578063a22cb46514610373578063adea6f3b1461038f57610141565b80632eb2c2d61161010a5780632eb2c2d6146102365780632f2ff15d1461025257806336568abe1461026e5780634e1273f41461028a57806354cefb23146102ba5780635d7b88f6146102eb57610141565b8062fdd58e1461014657806301ffc9a7146101765780630e89341c146101a657806323e9b7b3146101d6578063248a9ca314610206575b600080fd5b610160600480360381019061015b919061270b565b610493565b60405161016d919061275a565b60405180910390f35b610190600480360381019061018b91906127cd565b61055b565b60405161019d9190612815565b60405180910390f35b6101c060048036038101906101bb9190612830565b61057d565b6040516101cd91906128ed565b60405180910390f35b6101f060048036038101906101eb919061294f565b610622565b6040516101fd91906129c2565b60405180910390f35b610220600480360381019061021b9190612a13565b610afb565b60405161022d9190612a4f565b60405180910390f35b610250600480360381019061024b9190612c67565b610b1b565b005b61026c60048036038101906102679190612d36565b610bbc565b005b61028860048036038101906102839190612d36565b610bdd565b005b6102a4600480360381019061029f9190612e39565b610c60565b6040516102b19190612f6f565b60405180910390f35b6102d460048036038101906102cf9190612830565b610d79565b6040516102e2929190612fa0565b60405180910390f35b6102f3610da9565b60405161030091906129c2565b60405180910390f35b610323600480360381019061031e9190612ff5565b610dd3565b005b61033f600480360381019061033a9190612d36565b610dd7565b60405161034c9190612815565b60405180910390f35b61035d610e42565b60405161036a9190612a4f565b60405180910390f35b61038d60048036038101906103889190613061565b610e49565b005b6103a960048036038101906103a491906130fc565b610e5f565b6040516103b6919061275a565b60405180910390f35b6103d960048036038101906103d49190613170565b6110ca565b6040516103e6919061275a565b60405180910390f35b6103f76110ff565b604051610404919061320f565b60405180910390f35b610415611123565b6040516104229190612a4f565b60405180910390f35b61044560048036038101906104409190612d36565b611147565b005b610461600480360381019061045c919061322a565b611168565b60405161046e9190612815565b60405180910390f35b610491600480360381019061048c919061326a565b6111fc565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fa90613373565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006105668261129d565b8061057657506105758261137f565b5b9050919050565b606060076000838152602001908152602001600020805461059d906133c2565b80601f01602080910402602001604051908101604052809291908181526020018280546105c9906133c2565b80156106165780601f106105eb57610100808354040283529160200191610616565b820191906000526020600020905b8154815290600101906020018083116105f957829003601f168201915b50505050509050919050565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661064e816113f9565b3073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166358178168866040518263ffffffff1660e01b81526004016106be919061275a565b602060405180830381865afa1580156106db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ff9190613408565b73ffffffffffffffffffffffffffffffffffffffff1614610755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c90613481565b60405180910390fd5b6004600081819054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff16610787906134d0565b91906101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790559150600660008377ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff1661083590613510565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040518060c001604052808377ffffffffffffffffffffffffffffffffffffffffffffffff1681526020018581526020018467ffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600060028111156108db576108da613540565b5b81526020016040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600064ffffffffff1681526020016000815250815250600560008477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060608201518160020160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060808201518160030160006101000a81548160ff02191690836002811115610a6757610a66613540565b5b021790555060a08201518160040160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548164ffffffffff021916908364ffffffffff1602179055506040820151816001015550509050505092915050565b600060036000838152602001908152602001600020600101549050919050565b610b2361140d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610b695750610b6885610b6361140d565b611168565b5b610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f906135e1565b60405180910390fd5b610bb58585858585611415565b5050505050565b610bc582610afb565b610bce816113f9565b610bd88383611736565b505050565b610be561140d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4990613673565b60405180910390fd5b610c5c8282611817565b5050565b60608151835114610ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9d90613705565b60405180910390fd5b6000835167ffffffffffffffff811115610cc357610cc2612a6f565b5b604051908082528060200260200182016040528015610cf15781602001602082028036833780820191505090505b50905060005b8451811015610d6e57610d3e858281518110610d1657610d15613725565b5b6020026020010151858381518110610d3157610d30613725565b5b6020026020010151610493565b828281518110610d5157610d50613725565b5b60200260200101818152505080610d6790613754565b9050610cf7565b508091505092915050565b600080604083901c6001806040610d90919061379c565b6001901b610d9e91906137d0565b841691509150915091565b600460009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1681565b5050565b60006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b610e5b610e5461140d565b83836118f9565b5050565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610e8b816113f9565b6000600660008777ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1611610f33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2a90613876565b60405180910390fd5b6000600660008777ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff1680929190610fa090613510565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050610fd286826110ca565b92508484600760008681526020019081526020016000209182610ff6929190613a43565b50600560008777ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201601081819054906101000a90046fffffffffffffffffffffffffffffffff168092919061106d90613b2f565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550506110c08784600160405180602001604052806000815250611a65565b5050949350505050565b60008167ffffffffffffffff1660408477ffffffffffffffffffffffffffffffffffffffffffffffff16901b17905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61115082610afb565b611159816113f9565b6111638383611817565b505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61120461140d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061124a57506112498561124461140d565b611168565b5b611289576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611280906135e1565b60405180910390fd5b6112968585858585611c15565b5050505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061136857507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611378575061137782611eb0565b5b9050919050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806113f257506113f18261129d565b5b9050919050565b61140a8161140561140d565b611f1a565b50565b600033905090565b8151835114611459576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145090613bd9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036114c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bf90613c6b565b60405180910390fd5b60006114d261140d565b90506114e2818787878787611f9f565b60005b845181101561169357600085828151811061150357611502613725565b5b60200260200101519050600085838151811061152257611521613725565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156115c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ba90613cfd565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611678919061379c565b925050819055505050508061168c90613754565b90506114e5565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161170a929190613d1d565b60405180910390a4611720818787878787611fa7565b61172e818787878787611faf565b505050505050565b6117408282610dd7565b6118135760016003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506117b861140d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6118218282610dd7565b156118f55760006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061189a61140d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195e90613dc6565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611a589190612815565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611ad4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acb90613e58565b60405180910390fd5b6000611ade61140d565b90506000611aeb85612186565b90506000611af885612186565b9050611b0983600089858589611f9f565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b68919061379c565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611be6929190613e78565b60405180910390a4611bfd83600089858589611fa7565b611c0c83600089898989612200565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7b90613c6b565b60405180910390fd5b6000611c8e61140d565b90506000611c9b85612186565b90506000611ca885612186565b9050611cb8838989858589611f9f565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015611d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4690613cfd565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e04919061379c565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051611e81929190613e78565b60405180910390a4611e97848a8a86868a611fa7565b611ea5848a8a8a8a8a612200565b505050505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611f248282610dd7565b611f9b57611f31816123d7565b611f3f8360001c6020612404565b604051602001611f50929190613f75565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9291906128ed565b60405180910390fd5b5050565b505050505050565b505050505050565b611fce8473ffffffffffffffffffffffffffffffffffffffff16612640565b1561217e578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612014959493929190614013565b6020604051808303816000875af192505050801561205057506040513d601f19601f8201168201806040525081019061204d9190614090565b60015b6120f55761205c6140ca565b806308c379a0036120b857506120706140ec565b8061207b57506120ba565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120af91906128ed565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ec906141ee565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461217c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217390614280565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff8111156121a5576121a4612a6f565b5b6040519080825280602002602001820160405280156121d35781602001602082028036833780820191505090505b50905082816000815181106121eb576121ea613725565b5b60200260200101818152505080915050919050565b61221f8473ffffffffffffffffffffffffffffffffffffffff16612640565b156123cf578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016122659594939291906142a0565b6020604051808303816000875af19250505080156122a157506040513d601f19601f8201168201806040525081019061229e9190614090565b60015b612346576122ad6140ca565b806308c379a00361230957506122c16140ec565b806122cc575061230b565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230091906128ed565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233d906141ee565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146123cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c490614280565b60405180910390fd5b505b505050505050565b60606123fd8273ffffffffffffffffffffffffffffffffffffffff16601460ff16612404565b9050919050565b60606000600283600261241791906142fa565b612421919061379c565b67ffffffffffffffff81111561243a57612439612a6f565b5b6040519080825280601f01601f19166020018201604052801561246c5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106124a4576124a3613725565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061250857612507613725565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261254891906142fa565b612552919061379c565b90505b60018111156125f2577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061259457612593613725565b5b1a60f81b8282815181106125ab576125aa613725565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806125eb9061433c565b9050612555565b5060008414612636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161262d906143b1565b60405180910390fd5b8091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126a282612677565b9050919050565b6126b281612697565b81146126bd57600080fd5b50565b6000813590506126cf816126a9565b92915050565b6000819050919050565b6126e8816126d5565b81146126f357600080fd5b50565b600081359050612705816126df565b92915050565b600080604083850312156127225761272161266d565b5b6000612730858286016126c0565b9250506020612741858286016126f6565b9150509250929050565b612754816126d5565b82525050565b600060208201905061276f600083018461274b565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6127aa81612775565b81146127b557600080fd5b50565b6000813590506127c7816127a1565b92915050565b6000602082840312156127e3576127e261266d565b5b60006127f1848285016127b8565b91505092915050565b60008115159050919050565b61280f816127fa565b82525050565b600060208201905061282a6000830184612806565b92915050565b6000602082840312156128465761284561266d565b5b6000612854848285016126f6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561289757808201518184015260208101905061287c565b60008484015250505050565b6000601f19601f8301169050919050565b60006128bf8261285d565b6128c98185612868565b93506128d9818560208601612879565b6128e2816128a3565b840191505092915050565b6000602082019050818103600083015261290781846128b4565b905092915050565b600067ffffffffffffffff82169050919050565b61292c8161290f565b811461293757600080fd5b50565b60008135905061294981612923565b92915050565b600080604083850312156129665761296561266d565b5b6000612974858286016126f6565b92505060206129858582860161293a565b9150509250929050565b600077ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6129bc8161298f565b82525050565b60006020820190506129d760008301846129b3565b92915050565b6000819050919050565b6129f0816129dd565b81146129fb57600080fd5b50565b600081359050612a0d816129e7565b92915050565b600060208284031215612a2957612a2861266d565b5b6000612a37848285016129fe565b91505092915050565b612a49816129dd565b82525050565b6000602082019050612a646000830184612a40565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612aa7826128a3565b810181811067ffffffffffffffff82111715612ac657612ac5612a6f565b5b80604052505050565b6000612ad9612663565b9050612ae58282612a9e565b919050565b600067ffffffffffffffff821115612b0557612b04612a6f565b5b602082029050602081019050919050565b600080fd5b6000612b2e612b2984612aea565b612acf565b90508083825260208201905060208402830185811115612b5157612b50612b16565b5b835b81811015612b7a5780612b6688826126f6565b845260208401935050602081019050612b53565b5050509392505050565b600082601f830112612b9957612b98612a6a565b5b8135612ba9848260208601612b1b565b91505092915050565b600080fd5b600067ffffffffffffffff821115612bd257612bd1612a6f565b5b612bdb826128a3565b9050602081019050919050565b82818337600083830152505050565b6000612c0a612c0584612bb7565b612acf565b905082815260208101848484011115612c2657612c25612bb2565b5b612c31848285612be8565b509392505050565b600082601f830112612c4e57612c4d612a6a565b5b8135612c5e848260208601612bf7565b91505092915050565b600080600080600060a08688031215612c8357612c8261266d565b5b6000612c91888289016126c0565b9550506020612ca2888289016126c0565b945050604086013567ffffffffffffffff811115612cc357612cc2612672565b5b612ccf88828901612b84565b935050606086013567ffffffffffffffff811115612cf057612cef612672565b5b612cfc88828901612b84565b925050608086013567ffffffffffffffff811115612d1d57612d1c612672565b5b612d2988828901612c39565b9150509295509295909350565b60008060408385031215612d4d57612d4c61266d565b5b6000612d5b858286016129fe565b9250506020612d6c858286016126c0565b9150509250929050565b600067ffffffffffffffff821115612d9157612d90612a6f565b5b602082029050602081019050919050565b6000612db5612db084612d76565b612acf565b90508083825260208201905060208402830185811115612dd857612dd7612b16565b5b835b81811015612e015780612ded88826126c0565b845260208401935050602081019050612dda565b5050509392505050565b600082601f830112612e2057612e1f612a6a565b5b8135612e30848260208601612da2565b91505092915050565b60008060408385031215612e5057612e4f61266d565b5b600083013567ffffffffffffffff811115612e6e57612e6d612672565b5b612e7a85828601612e0b565b925050602083013567ffffffffffffffff811115612e9b57612e9a612672565b5b612ea785828601612b84565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612ee6816126d5565b82525050565b6000612ef88383612edd565b60208301905092915050565b6000602082019050919050565b6000612f1c82612eb1565b612f268185612ebc565b9350612f3183612ecd565b8060005b83811015612f62578151612f498882612eec565b9750612f5483612f04565b925050600181019050612f35565b5085935050505092915050565b60006020820190508181036000830152612f898184612f11565b905092915050565b612f9a8161290f565b82525050565b6000604082019050612fb560008301856129b3565b612fc26020830184612f91565b9392505050565b612fd28161298f565b8114612fdd57600080fd5b50565b600081359050612fef81612fc9565b92915050565b6000806040838503121561300c5761300b61266d565b5b600061301a85828601612fe0565b925050602061302b858286016126f6565b9150509250929050565b61303e816127fa565b811461304957600080fd5b50565b60008135905061305b81613035565b92915050565b600080604083850312156130785761307761266d565b5b6000613086858286016126c0565b92505060206130978582860161304c565b9150509250929050565b600080fd5b60008083601f8401126130bc576130bb612a6a565b5b8235905067ffffffffffffffff8111156130d9576130d86130a1565b5b6020830191508360018202830111156130f5576130f4612b16565b5b9250929050565b600080600080606085870312156131165761311561266d565b5b6000613124878288016126c0565b945050602061313587828801612fe0565b935050604085013567ffffffffffffffff81111561315657613155612672565b5b613162878288016130a6565b925092505092959194509250565b600080604083850312156131875761318661266d565b5b600061319585828601612fe0565b92505060206131a68582860161293a565b9150509250929050565b6000819050919050565b60006131d56131d06131cb84612677565b6131b0565b612677565b9050919050565b60006131e7826131ba565b9050919050565b60006131f9826131dc565b9050919050565b613209816131ee565b82525050565b60006020820190506132246000830184613200565b92915050565b600080604083850312156132415761324061266d565b5b600061324f858286016126c0565b9250506020613260858286016126c0565b9150509250929050565b600080600080600060a086880312156132865761328561266d565b5b6000613294888289016126c0565b95505060206132a5888289016126c0565b94505060406132b6888289016126f6565b93505060606132c7888289016126f6565b925050608086013567ffffffffffffffff8111156132e8576132e7612672565b5b6132f488828901612c39565b9150509295509295909350565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b600061335d602a83612868565b915061336882613301565b604082019050919050565b6000602082019050818103600083015261338c81613350565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806133da57607f821691505b6020821081036133ed576133ec613393565b5b50919050565b600081519050613402816126a9565b92915050565b60006020828403121561341e5761341d61266d565b5b600061342c848285016133f3565b91505092915050565b7f54686520636f6e7472616374206d757374206f776e207468652070756e6b0000600082015250565b600061346b601e83612868565b915061347682613435565b602082019050919050565b6000602082019050818103600083015261349a8161345e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006134db8261298f565b915077ffffffffffffffffffffffffffffffffffffffffffffffff8203613505576135046134a1565b5b600182019050919050565b600061351b8261290f565b915067ffffffffffffffff8203613535576135346134a1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b60006135cb602e83612868565b91506135d68261356f565b604082019050919050565b600060208201905081810360008301526135fa816135be565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061365d602f83612868565b915061366882613601565b604082019050919050565b6000602082019050818103600083015261368c81613650565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006136ef602983612868565b91506136fa82613693565b604082019050919050565b6000602082019050818103600083015261371e816136e2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061375f826126d5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613791576137906134a1565b5b600182019050919050565b60006137a7826126d5565b91506137b2836126d5565b92508282019050808211156137ca576137c96134a1565b5b92915050565b60006137db826126d5565b91506137e6836126d5565b92508282039050818111156137fe576137fd6134a1565b5b92915050565b7f4f726967696e616c206d75737420626520696e697469616c697a65642066697260008201527f7374000000000000000000000000000000000000000000000000000000000000602082015250565b6000613860602283612868565b915061386b82613804565b604082019050919050565b6000602082019050818103600083015261388f81613853565b9050919050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026139037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826138c6565b61390d86836138c6565b95508019841693508086168417925050509392505050565b600061394061393b613936846126d5565b6131b0565b6126d5565b9050919050565b6000819050919050565b61395a83613925565b61396e61396682613947565b8484546138d3565b825550505050565b600090565b613983613976565b61398e818484613951565b505050565b5b818110156139b2576139a760008261397b565b600181019050613994565b5050565b601f8211156139f7576139c8816138a1565b6139d1846138b6565b810160208510156139e0578190505b6139f46139ec856138b6565b830182613993565b50505b505050565b600082821c905092915050565b6000613a1a600019846008026139fc565b1980831691505092915050565b6000613a338383613a09565b9150826002028217905092915050565b613a4d8383613896565b67ffffffffffffffff811115613a6657613a65612a6f565b5b613a7082546133c2565b613a7b8282856139b6565b6000601f831160018114613aaa5760008415613a98578287013590505b613aa28582613a27565b865550613b0a565b601f198416613ab8866138a1565b60005b82811015613ae057848901358255600182019150602085019450602081019050613abb565b86831015613afd5784890135613af9601f891682613a09565b8355505b6001600288020188555050505b50505050505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000613b3a82613b13565b91506fffffffffffffffffffffffffffffffff8203613b5c57613b5b6134a1565b5b600182019050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000613bc3602883612868565b9150613bce82613b67565b604082019050919050565b60006020820190508181036000830152613bf281613bb6565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000613c55602583612868565b9150613c6082613bf9565b604082019050919050565b60006020820190508181036000830152613c8481613c48565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000613ce7602a83612868565b9150613cf282613c8b565b604082019050919050565b60006020820190508181036000830152613d1681613cda565b9050919050565b60006040820190508181036000830152613d378185612f11565b90508181036020830152613d4b8184612f11565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000613db0602983612868565b9150613dbb82613d54565b604082019050919050565b60006020820190508181036000830152613ddf81613da3565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613e42602183612868565b9150613e4d82613de6565b604082019050919050565b60006020820190508181036000830152613e7181613e35565b9050919050565b6000604082019050613e8d600083018561274b565b613e9a602083018461274b565b9392505050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000613ee2601783613ea1565b9150613eed82613eac565b601782019050919050565b6000613f038261285d565b613f0d8185613ea1565b9350613f1d818560208601612879565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000613f5f601183613ea1565b9150613f6a82613f29565b601182019050919050565b6000613f8082613ed5565b9150613f8c8285613ef8565b9150613f9782613f52565b9150613fa38284613ef8565b91508190509392505050565b613fb881612697565b82525050565b600081519050919050565b600082825260208201905092915050565b6000613fe582613fbe565b613fef8185613fc9565b9350613fff818560208601612879565b614008816128a3565b840191505092915050565b600060a0820190506140286000830188613faf565b6140356020830187613faf565b81810360408301526140478186612f11565b9050818103606083015261405b8185612f11565b9050818103608083015261406f8184613fda565b90509695505050505050565b60008151905061408a816127a1565b92915050565b6000602082840312156140a6576140a561266d565b5b60006140b48482850161407b565b91505092915050565b60008160e01c9050919050565b600060033d11156140e95760046000803e6140e66000516140bd565b90505b90565b600060443d10614179576140fe612663565b60043d036004823e80513d602482011167ffffffffffffffff82111715614126575050614179565b808201805167ffffffffffffffff8111156141445750505050614179565b80602083010160043d038501811115614161575050505050614179565b61417082602001850186612a9e565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006141d8603483612868565b91506141e38261417c565b604082019050919050565b60006020820190508181036000830152614207816141cb565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b600061426a602883612868565b91506142758261420e565b604082019050919050565b600060208201905081810360008301526142998161425d565b9050919050565b600060a0820190506142b56000830188613faf565b6142c26020830187613faf565b6142cf604083018661274b565b6142dc606083018561274b565b81810360808301526142ee8184613fda565b90509695505050505050565b6000614305826126d5565b9150614310836126d5565b925082820261431e816126d5565b91508282048414831517614335576143346134a1565b5b5092915050565b6000614347826126d5565b91506000820361435a576143596134a1565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061439b602083612868565b91506143a682614365565b602082019050919050565b600060208201905081810360008301526143ca8161438e565b905091905056fea264697066735822122033283c6b88810d4f1692d1cbd2ffb01f7d6c85331cbc140525a6b75b5912e06d64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101415760003560e01c806379f5f153116100b8578063af4a6c0c1161007c578063af4a6c0c146103bf578063d0d851d0146103ef578063d53913931461040d578063d547741f1461042b578063e985e9c514610447578063f242432a1461047757610141565b806379f5f1531461030957806391d1485414610325578063a217fddf14610355578063a22cb46514610373578063adea6f3b1461038f57610141565b80632eb2c2d61161010a5780632eb2c2d6146102365780632f2ff15d1461025257806336568abe1461026e5780634e1273f41461028a57806354cefb23146102ba5780635d7b88f6146102eb57610141565b8062fdd58e1461014657806301ffc9a7146101765780630e89341c146101a657806323e9b7b3146101d6578063248a9ca314610206575b600080fd5b610160600480360381019061015b919061270b565b610493565b60405161016d919061275a565b60405180910390f35b610190600480360381019061018b91906127cd565b61055b565b60405161019d9190612815565b60405180910390f35b6101c060048036038101906101bb9190612830565b61057d565b6040516101cd91906128ed565b60405180910390f35b6101f060048036038101906101eb919061294f565b610622565b6040516101fd91906129c2565b60405180910390f35b610220600480360381019061021b9190612a13565b610afb565b60405161022d9190612a4f565b60405180910390f35b610250600480360381019061024b9190612c67565b610b1b565b005b61026c60048036038101906102679190612d36565b610bbc565b005b61028860048036038101906102839190612d36565b610bdd565b005b6102a4600480360381019061029f9190612e39565b610c60565b6040516102b19190612f6f565b60405180910390f35b6102d460048036038101906102cf9190612830565b610d79565b6040516102e2929190612fa0565b60405180910390f35b6102f3610da9565b60405161030091906129c2565b60405180910390f35b610323600480360381019061031e9190612ff5565b610dd3565b005b61033f600480360381019061033a9190612d36565b610dd7565b60405161034c9190612815565b60405180910390f35b61035d610e42565b60405161036a9190612a4f565b60405180910390f35b61038d60048036038101906103889190613061565b610e49565b005b6103a960048036038101906103a491906130fc565b610e5f565b6040516103b6919061275a565b60405180910390f35b6103d960048036038101906103d49190613170565b6110ca565b6040516103e6919061275a565b60405180910390f35b6103f76110ff565b604051610404919061320f565b60405180910390f35b610415611123565b6040516104229190612a4f565b60405180910390f35b61044560048036038101906104409190612d36565b611147565b005b610461600480360381019061045c919061322a565b611168565b60405161046e9190612815565b60405180910390f35b610491600480360381019061048c919061326a565b6111fc565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fa90613373565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006105668261129d565b8061057657506105758261137f565b5b9050919050565b606060076000838152602001908152602001600020805461059d906133c2565b80601f01602080910402602001604051908101604052809291908181526020018280546105c9906133c2565b80156106165780601f106105eb57610100808354040283529160200191610616565b820191906000526020600020905b8154815290600101906020018083116105f957829003601f168201915b50505050509050919050565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661064e816113f9565b3073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166358178168866040518263ffffffff1660e01b81526004016106be919061275a565b602060405180830381865afa1580156106db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ff9190613408565b73ffffffffffffffffffffffffffffffffffffffff1614610755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c90613481565b60405180910390fd5b6004600081819054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff16610787906134d0565b91906101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff16021790559150600660008377ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff1661083590613510565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040518060c001604052808377ffffffffffffffffffffffffffffffffffffffffffffffff1681526020018581526020018467ffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600060028111156108db576108da613540565b5b81526020016040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600064ffffffffff1681526020016000815250815250600560008477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060608201518160020160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060808201518160030160006101000a81548160ff02191690836002811115610a6757610a66613540565b5b021790555060a08201518160040160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548164ffffffffff021916908364ffffffffff1602179055506040820151816001015550509050505092915050565b600060036000838152602001908152602001600020600101549050919050565b610b2361140d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610b695750610b6885610b6361140d565b611168565b5b610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f906135e1565b60405180910390fd5b610bb58585858585611415565b5050505050565b610bc582610afb565b610bce816113f9565b610bd88383611736565b505050565b610be561140d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4990613673565b60405180910390fd5b610c5c8282611817565b5050565b60608151835114610ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9d90613705565b60405180910390fd5b6000835167ffffffffffffffff811115610cc357610cc2612a6f565b5b604051908082528060200260200182016040528015610cf15781602001602082028036833780820191505090505b50905060005b8451811015610d6e57610d3e858281518110610d1657610d15613725565b5b6020026020010151858381518110610d3157610d30613725565b5b6020026020010151610493565b828281518110610d5157610d50613725565b5b60200260200101818152505080610d6790613754565b9050610cf7565b508091505092915050565b600080604083901c6001806040610d90919061379c565b6001901b610d9e91906137d0565b841691509150915091565b600460009054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1681565b5050565b60006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b610e5b610e5461140d565b83836118f9565b5050565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610e8b816113f9565b6000600660008777ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1611610f33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2a90613876565b60405180910390fd5b6000600660008777ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900467ffffffffffffffff1680929190610fa090613510565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050610fd286826110ca565b92508484600760008681526020019081526020016000209182610ff6929190613a43565b50600560008777ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201601081819054906101000a90046fffffffffffffffffffffffffffffffff168092919061106d90613b2f565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550506110c08784600160405180602001604052806000815250611a65565b5050949350505050565b60008167ffffffffffffffff1660408477ffffffffffffffffffffffffffffffffffffffffffffffff16901b17905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61115082610afb565b611159816113f9565b6111638383611817565b505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61120461140d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061124a57506112498561124461140d565b611168565b5b611289576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611280906135e1565b60405180910390fd5b6112968585858585611c15565b5050505050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061136857507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611378575061137782611eb0565b5b9050919050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806113f257506113f18261129d565b5b9050919050565b61140a8161140561140d565b611f1a565b50565b600033905090565b8151835114611459576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145090613bd9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036114c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bf90613c6b565b60405180910390fd5b60006114d261140d565b90506114e2818787878787611f9f565b60005b845181101561169357600085828151811061150357611502613725565b5b60200260200101519050600085838151811061152257611521613725565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156115c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ba90613cfd565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611678919061379c565b925050819055505050508061168c90613754565b90506114e5565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161170a929190613d1d565b60405180910390a4611720818787878787611fa7565b61172e818787878787611faf565b505050505050565b6117408282610dd7565b6118135760016003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506117b861140d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6118218282610dd7565b156118f55760006003600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061189a61140d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195e90613dc6565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611a589190612815565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611ad4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acb90613e58565b60405180910390fd5b6000611ade61140d565b90506000611aeb85612186565b90506000611af885612186565b9050611b0983600089858589611f9f565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b68919061379c565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051611be6929190613e78565b60405180910390a4611bfd83600089858589611fa7565b611c0c83600089898989612200565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7b90613c6b565b60405180910390fd5b6000611c8e61140d565b90506000611c9b85612186565b90506000611ca885612186565b9050611cb8838989858589611f9f565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015611d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4690613cfd565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e04919061379c565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051611e81929190613e78565b60405180910390a4611e97848a8a86868a611fa7565b611ea5848a8a8a8a8a612200565b505050505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611f248282610dd7565b611f9b57611f31816123d7565b611f3f8360001c6020612404565b604051602001611f50929190613f75565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9291906128ed565b60405180910390fd5b5050565b505050505050565b505050505050565b611fce8473ffffffffffffffffffffffffffffffffffffffff16612640565b1561217e578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612014959493929190614013565b6020604051808303816000875af192505050801561205057506040513d601f19601f8201168201806040525081019061204d9190614090565b60015b6120f55761205c6140ca565b806308c379a0036120b857506120706140ec565b8061207b57506120ba565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120af91906128ed565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ec906141ee565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461217c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217390614280565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff8111156121a5576121a4612a6f565b5b6040519080825280602002602001820160405280156121d35781602001602082028036833780820191505090505b50905082816000815181106121eb576121ea613725565b5b60200260200101818152505080915050919050565b61221f8473ffffffffffffffffffffffffffffffffffffffff16612640565b156123cf578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016122659594939291906142a0565b6020604051808303816000875af19250505080156122a157506040513d601f19601f8201168201806040525081019061229e9190614090565b60015b612346576122ad6140ca565b806308c379a00361230957506122c16140ec565b806122cc575061230b565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230091906128ed565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233d906141ee565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146123cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c490614280565b60405180910390fd5b505b505050505050565b60606123fd8273ffffffffffffffffffffffffffffffffffffffff16601460ff16612404565b9050919050565b60606000600283600261241791906142fa565b612421919061379c565b67ffffffffffffffff81111561243a57612439612a6f565b5b6040519080825280601f01601f19166020018201604052801561246c5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106124a4576124a3613725565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061250857612507613725565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261254891906142fa565b612552919061379c565b90505b60018111156125f2577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061259457612593613725565b5b1a60f81b8282815181106125ab576125aa613725565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806125eb9061433c565b9050612555565b5060008414612636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161262d906143b1565b60405180910390fd5b8091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126a282612677565b9050919050565b6126b281612697565b81146126bd57600080fd5b50565b6000813590506126cf816126a9565b92915050565b6000819050919050565b6126e8816126d5565b81146126f357600080fd5b50565b600081359050612705816126df565b92915050565b600080604083850312156127225761272161266d565b5b6000612730858286016126c0565b9250506020612741858286016126f6565b9150509250929050565b612754816126d5565b82525050565b600060208201905061276f600083018461274b565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6127aa81612775565b81146127b557600080fd5b50565b6000813590506127c7816127a1565b92915050565b6000602082840312156127e3576127e261266d565b5b60006127f1848285016127b8565b91505092915050565b60008115159050919050565b61280f816127fa565b82525050565b600060208201905061282a6000830184612806565b92915050565b6000602082840312156128465761284561266d565b5b6000612854848285016126f6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561289757808201518184015260208101905061287c565b60008484015250505050565b6000601f19601f8301169050919050565b60006128bf8261285d565b6128c98185612868565b93506128d9818560208601612879565b6128e2816128a3565b840191505092915050565b6000602082019050818103600083015261290781846128b4565b905092915050565b600067ffffffffffffffff82169050919050565b61292c8161290f565b811461293757600080fd5b50565b60008135905061294981612923565b92915050565b600080604083850312156129665761296561266d565b5b6000612974858286016126f6565b92505060206129858582860161293a565b9150509250929050565b600077ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6129bc8161298f565b82525050565b60006020820190506129d760008301846129b3565b92915050565b6000819050919050565b6129f0816129dd565b81146129fb57600080fd5b50565b600081359050612a0d816129e7565b92915050565b600060208284031215612a2957612a2861266d565b5b6000612a37848285016129fe565b91505092915050565b612a49816129dd565b82525050565b6000602082019050612a646000830184612a40565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612aa7826128a3565b810181811067ffffffffffffffff82111715612ac657612ac5612a6f565b5b80604052505050565b6000612ad9612663565b9050612ae58282612a9e565b919050565b600067ffffffffffffffff821115612b0557612b04612a6f565b5b602082029050602081019050919050565b600080fd5b6000612b2e612b2984612aea565b612acf565b90508083825260208201905060208402830185811115612b5157612b50612b16565b5b835b81811015612b7a5780612b6688826126f6565b845260208401935050602081019050612b53565b5050509392505050565b600082601f830112612b9957612b98612a6a565b5b8135612ba9848260208601612b1b565b91505092915050565b600080fd5b600067ffffffffffffffff821115612bd257612bd1612a6f565b5b612bdb826128a3565b9050602081019050919050565b82818337600083830152505050565b6000612c0a612c0584612bb7565b612acf565b905082815260208101848484011115612c2657612c25612bb2565b5b612c31848285612be8565b509392505050565b600082601f830112612c4e57612c4d612a6a565b5b8135612c5e848260208601612bf7565b91505092915050565b600080600080600060a08688031215612c8357612c8261266d565b5b6000612c91888289016126c0565b9550506020612ca2888289016126c0565b945050604086013567ffffffffffffffff811115612cc357612cc2612672565b5b612ccf88828901612b84565b935050606086013567ffffffffffffffff811115612cf057612cef612672565b5b612cfc88828901612b84565b925050608086013567ffffffffffffffff811115612d1d57612d1c612672565b5b612d2988828901612c39565b9150509295509295909350565b60008060408385031215612d4d57612d4c61266d565b5b6000612d5b858286016129fe565b9250506020612d6c858286016126c0565b9150509250929050565b600067ffffffffffffffff821115612d9157612d90612a6f565b5b602082029050602081019050919050565b6000612db5612db084612d76565b612acf565b90508083825260208201905060208402830185811115612dd857612dd7612b16565b5b835b81811015612e015780612ded88826126c0565b845260208401935050602081019050612dda565b5050509392505050565b600082601f830112612e2057612e1f612a6a565b5b8135612e30848260208601612da2565b91505092915050565b60008060408385031215612e5057612e4f61266d565b5b600083013567ffffffffffffffff811115612e6e57612e6d612672565b5b612e7a85828601612e0b565b925050602083013567ffffffffffffffff811115612e9b57612e9a612672565b5b612ea785828601612b84565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612ee6816126d5565b82525050565b6000612ef88383612edd565b60208301905092915050565b6000602082019050919050565b6000612f1c82612eb1565b612f268185612ebc565b9350612f3183612ecd565b8060005b83811015612f62578151612f498882612eec565b9750612f5483612f04565b925050600181019050612f35565b5085935050505092915050565b60006020820190508181036000830152612f898184612f11565b905092915050565b612f9a8161290f565b82525050565b6000604082019050612fb560008301856129b3565b612fc26020830184612f91565b9392505050565b612fd28161298f565b8114612fdd57600080fd5b50565b600081359050612fef81612fc9565b92915050565b6000806040838503121561300c5761300b61266d565b5b600061301a85828601612fe0565b925050602061302b858286016126f6565b9150509250929050565b61303e816127fa565b811461304957600080fd5b50565b60008135905061305b81613035565b92915050565b600080604083850312156130785761307761266d565b5b6000613086858286016126c0565b92505060206130978582860161304c565b9150509250929050565b600080fd5b60008083601f8401126130bc576130bb612a6a565b5b8235905067ffffffffffffffff8111156130d9576130d86130a1565b5b6020830191508360018202830111156130f5576130f4612b16565b5b9250929050565b600080600080606085870312156131165761311561266d565b5b6000613124878288016126c0565b945050602061313587828801612fe0565b935050604085013567ffffffffffffffff81111561315657613155612672565b5b613162878288016130a6565b925092505092959194509250565b600080604083850312156131875761318661266d565b5b600061319585828601612fe0565b92505060206131a68582860161293a565b9150509250929050565b6000819050919050565b60006131d56131d06131cb84612677565b6131b0565b612677565b9050919050565b60006131e7826131ba565b9050919050565b60006131f9826131dc565b9050919050565b613209816131ee565b82525050565b60006020820190506132246000830184613200565b92915050565b600080604083850312156132415761324061266d565b5b600061324f858286016126c0565b9250506020613260858286016126c0565b9150509250929050565b600080600080600060a086880312156132865761328561266d565b5b6000613294888289016126c0565b95505060206132a5888289016126c0565b94505060406132b6888289016126f6565b93505060606132c7888289016126f6565b925050608086013567ffffffffffffffff8111156132e8576132e7612672565b5b6132f488828901612c39565b9150509295509295909350565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b600061335d602a83612868565b915061336882613301565b604082019050919050565b6000602082019050818103600083015261338c81613350565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806133da57607f821691505b6020821081036133ed576133ec613393565b5b50919050565b600081519050613402816126a9565b92915050565b60006020828403121561341e5761341d61266d565b5b600061342c848285016133f3565b91505092915050565b7f54686520636f6e7472616374206d757374206f776e207468652070756e6b0000600082015250565b600061346b601e83612868565b915061347682613435565b602082019050919050565b6000602082019050818103600083015261349a8161345e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006134db8261298f565b915077ffffffffffffffffffffffffffffffffffffffffffffffff8203613505576135046134a1565b5b600182019050919050565b600061351b8261290f565b915067ffffffffffffffff8203613535576135346134a1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206f7220617070726f766564000000000000000000000000000000000000602082015250565b60006135cb602e83612868565b91506135d68261356f565b604082019050919050565b600060208201905081810360008301526135fa816135be565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061365d602f83612868565b915061366882613601565b604082019050919050565b6000602082019050818103600083015261368c81613650565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006136ef602983612868565b91506136fa82613693565b604082019050919050565b6000602082019050818103600083015261371e816136e2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061375f826126d5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613791576137906134a1565b5b600182019050919050565b60006137a7826126d5565b91506137b2836126d5565b92508282019050808211156137ca576137c96134a1565b5b92915050565b60006137db826126d5565b91506137e6836126d5565b92508282039050818111156137fe576137fd6134a1565b5b92915050565b7f4f726967696e616c206d75737420626520696e697469616c697a65642066697260008201527f7374000000000000000000000000000000000000000000000000000000000000602082015250565b6000613860602283612868565b915061386b82613804565b604082019050919050565b6000602082019050818103600083015261388f81613853565b9050919050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026139037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826138c6565b61390d86836138c6565b95508019841693508086168417925050509392505050565b600061394061393b613936846126d5565b6131b0565b6126d5565b9050919050565b6000819050919050565b61395a83613925565b61396e61396682613947565b8484546138d3565b825550505050565b600090565b613983613976565b61398e818484613951565b505050565b5b818110156139b2576139a760008261397b565b600181019050613994565b5050565b601f8211156139f7576139c8816138a1565b6139d1846138b6565b810160208510156139e0578190505b6139f46139ec856138b6565b830182613993565b50505b505050565b600082821c905092915050565b6000613a1a600019846008026139fc565b1980831691505092915050565b6000613a338383613a09565b9150826002028217905092915050565b613a4d8383613896565b67ffffffffffffffff811115613a6657613a65612a6f565b5b613a7082546133c2565b613a7b8282856139b6565b6000601f831160018114613aaa5760008415613a98578287013590505b613aa28582613a27565b865550613b0a565b601f198416613ab8866138a1565b60005b82811015613ae057848901358255600182019150602085019450602081019050613abb565b86831015613afd5784890135613af9601f891682613a09565b8355505b6001600288020188555050505b50505050505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000613b3a82613b13565b91506fffffffffffffffffffffffffffffffff8203613b5c57613b5b6134a1565b5b600182019050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000613bc3602883612868565b9150613bce82613b67565b604082019050919050565b60006020820190508181036000830152613bf281613bb6565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000613c55602583612868565b9150613c6082613bf9565b604082019050919050565b60006020820190508181036000830152613c8481613c48565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000613ce7602a83612868565b9150613cf282613c8b565b604082019050919050565b60006020820190508181036000830152613d1681613cda565b9050919050565b60006040820190508181036000830152613d378185612f11565b90508181036020830152613d4b8184612f11565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000613db0602983612868565b9150613dbb82613d54565b604082019050919050565b60006020820190508181036000830152613ddf81613da3565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613e42602183612868565b9150613e4d82613de6565b604082019050919050565b60006020820190508181036000830152613e7181613e35565b9050919050565b6000604082019050613e8d600083018561274b565b613e9a602083018461274b565b9392505050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000613ee2601783613ea1565b9150613eed82613eac565b601782019050919050565b6000613f038261285d565b613f0d8185613ea1565b9350613f1d818560208601612879565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000613f5f601183613ea1565b9150613f6a82613f29565b601182019050919050565b6000613f8082613ed5565b9150613f8c8285613ef8565b9150613f9782613f52565b9150613fa38284613ef8565b91508190509392505050565b613fb881612697565b82525050565b600081519050919050565b600082825260208201905092915050565b6000613fe582613fbe565b613fef8185613fc9565b9350613fff818560208601612879565b614008816128a3565b840191505092915050565b600060a0820190506140286000830188613faf565b6140356020830187613faf565b81810360408301526140478186612f11565b9050818103606083015261405b8185612f11565b9050818103608083015261406f8184613fda565b90509695505050505050565b60008151905061408a816127a1565b92915050565b6000602082840312156140a6576140a561266d565b5b60006140b48482850161407b565b91505092915050565b60008160e01c9050919050565b600060033d11156140e95760046000803e6140e66000516140bd565b90505b90565b600060443d10614179576140fe612663565b60043d036004823e80513d602482011167ffffffffffffffff82111715614126575050614179565b808201805167ffffffffffffffff8111156141445750505050614179565b80602083010160043d038501811115614161575050505050614179565b61417082602001850186612a9e565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006141d8603483612868565b91506141e38261417c565b604082019050919050565b60006020820190508181036000830152614207816141cb565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b600061426a602883612868565b91506142758261420e565b604082019050919050565b600060208201905081810360008301526142998161425d565b9050919050565b600060a0820190506142b56000830188613faf565b6142c26020830187613faf565b6142cf604083018661274b565b6142dc606083018561274b565b81810360808301526142ee8184613fda565b90509695505050505050565b6000614305826126d5565b9150614310836126d5565b925082820261431e816126d5565b91508282048414831517614335576143346134a1565b5b5092915050565b6000614347826126d5565b91506000820361435a576143596134a1565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061439b602083612868565b91506143a682614365565b602082019050919050565b600060208201905081810360008301526143ca8161438e565b905091905056fea264697066735822122033283c6b88810d4f1692d1cbd2ffb01f7d6c85331cbc140525a6b75b5912e06d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      }
    },
    "stateVariables": {
      "latestMonoIds": {
        "details": "0 represents the Original; each Mono is assigned an ID starting from 1.      originalId => latestMonoId"
      },
      "latestOriginalId": {
        "details": "used as a `originalId`, starting from 1."
      },
      "metadata": {
        "details": "mosaicId (originalId + monoId) => uri"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 468,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 474,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 476,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 24,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 5765,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "latestOriginalId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint192"
      },
      {
        "astId": 5770,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "originals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint192,t_struct(Original)6220_storage)"
      },
      {
        "astId": 5775,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "latestMonoIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint192,t_uint64)"
      },
      {
        "astId": 5780,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "metadata",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(OriginalStatus)6224": {
        "encoding": "inplace",
        "label": "enum UsingCryptoPunksMosaicRegistryStructs.OriginalStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint192,t_struct(Original)6220_storage)": {
        "encoding": "mapping",
        "key": "t_uint192",
        "label": "mapping(uint192 => struct UsingCryptoPunksMosaicRegistryStructs.Original)",
        "numberOfBytes": "32",
        "value": "t_struct(Original)6220_storage"
      },
      "t_mapping(t_uint192,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint192",
        "label": "mapping(uint192 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bid)6231_storage": {
        "encoding": "inplace",
        "label": "struct UsingCryptoPunksMosaicRegistryStructs.Bid",
        "members": [
          {
            "astId": 6226,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "bidder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6228,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "expiry",
            "offset": 20,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 6230,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Original)6220_storage": {
        "encoding": "inplace",
        "label": "struct UsingCryptoPunksMosaicRegistryStructs.Original",
        "members": [
          {
            "astId": 6206,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint192"
          },
          {
            "astId": 6208,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "punkId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6211,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "totalMonoCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6213,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "claimedMonoCount",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 6216,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(OriginalStatus)6224"
          },
          {
            "astId": 6219,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "bid",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Bid)6231_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}