{
  "address": "0xb9CdC263446573a8A5554B7cbbbE09c6caEE3d3a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mintAuthority",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cryptoPunksMarketAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BID_ACCEPTANCE_THRESHOLD_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BID_EXPIRY",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newBidId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bidDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "createdAt",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "expiry",
          "type": "uint40"
        },
        {
          "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.BidState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "punkId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "totalClaimableCount",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "purchasePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReservePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxReservePrice",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cryptoPunksMarket",
      "outputs": [
        {
          "internalType": "contract ICryptoPunksMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "finalizeAcceptedBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "finalizeProposedBid",
      "outputs": [
        {
          "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.BidState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "name": "fromMosaicId",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "uint64",
          "name": "monoId",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "uint64",
          "name": "monoId",
          "type": "uint64"
        }
      ],
      "name": "getMono",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mosaicId",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "presetId",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "proposedReservePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.MonoBidResponse",
                  "name": "bidResponse",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "bidId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct UsingCryptoPunksMosaicRegistryStructs.MonoGovernanceOptions",
              "name": "governanceOptions",
              "type": "tuple"
            }
          ],
          "internalType": "struct UsingCryptoPunksMosaicRegistryStructs.Mono",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "name": "getMonoLifeCycle",
      "outputs": [
        {
          "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.MonoLifeCycle",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "getOriginal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint192",
              "name": "id",
              "type": "uint192"
            },
            {
              "internalType": "uint256",
              "name": "punkId",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "totalMonoSupply",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "claimedMonoCount",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "purchasePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReservePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxReservePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "metadataBaseUri",
              "type": "string"
            },
            {
              "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.OriginalStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "activeBidId",
              "type": "uint256"
            }
          ],
          "internalType": "struct UsingCryptoPunksMosaicRegistryStructs.Original",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "name": "getOriginalFromMosaicId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint192",
              "name": "id",
              "type": "uint192"
            },
            {
              "internalType": "uint256",
              "name": "punkId",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "totalMonoSupply",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "claimedMonoCount",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "purchasePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReservePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxReservePrice",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "metadataBaseUri",
              "type": "string"
            },
            {
              "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.OriginalStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "activeBidId",
              "type": "uint256"
            }
          ],
          "internalType": "struct UsingCryptoPunksMosaicRegistryStructs.Original",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "getPerMonoResaleFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "perMonoResaleFund",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "hasOngoingBid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invalidMetadataUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "isBidAcceptable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "name": "latestMonoIds",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestOriginalId",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "monos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "presetId",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposedReservePrice",
              "type": "uint256"
            },
            {
              "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.MonoBidResponse",
              "name": "bidResponse",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "bidId",
              "type": "uint256"
            }
          ],
          "internalType": "struct UsingCryptoPunksMosaicRegistryStructs.MonoGovernanceOptions",
          "name": "governanceOptions",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "name": "originals",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "id",
          "type": "uint192"
        },
        {
          "internalType": "uint256",
          "name": "punkId",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "totalMonoSupply",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "claimedMonoCount",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "purchasePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReservePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxReservePrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadataBaseUri",
          "type": "string"
        },
        {
          "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.OriginalStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "activeBidId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "proposeReservePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        }
      ],
      "name": "refundBidDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "refundOnSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalResaleFund",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "name": "resalePrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        },
        {
          "internalType": "enum UsingCryptoPunksMosaicRegistryStructs.MonoBidResponse",
          "name": "response",
          "type": "uint8"
        }
      ],
      "name": "respondToBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setInvalidMetadataUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setMetadataBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "presetId",
          "type": "uint8"
        }
      ],
      "name": "setPresetId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "sumBidResponses",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "yes",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "no",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        }
      ],
      "name": "sumReservePriceProposals",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "validProposalCount",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "priceSum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "originalId",
          "type": "uint192"
        },
        {
          "internalType": "uint64",
          "name": "monoId",
          "type": "uint64"
        }
      ],
      "name": "toMosaicId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7c48d3d235ee9a33dd61f49df8f622e15afb464c25ac72cf808aa1479955221",
  "receipt": {
    "to": null,
    "from": "0x4eF26a3129b91Ee21d5E9Ed963e6549B531C3744",
    "contractAddress": "0xb9CdC263446573a8A5554B7cbbbE09c6caEE3d3a",
    "transactionIndex": 49,
    "gasUsed": "4073090",
    "logsBloom": "0x
    "blockHash": "0x1fa51bb621149fdb232f5be261a7a3edc8824e78617e681adbc034860413776e",
    "transactionHash": "0xf7c48d3d235ee9a33dd61f49df8f622e15afb464c25ac72cf808aa1479955221",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 8478039,
        "transactionHash": "0xf7c48d3d235ee9a33dd61f49df8f622e15afb464c25ac72cf808aa1479955221",
        "address": "0xb9CdC263446573a8A5554B7cbbbE09c6caEE3d3a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ef26a3129b91ee21d5e9ed963e6549b531c3744",
          "0x0000000000000000000000004ef26a3129b91ee21d5e9ed963e6549b531c3744"
        ],
        "data": "0x",
        "logIndex": 117,
        "blockHash": "0x1fa51bb621149fdb232f5be261a7a3edc8824e78617e681adbc034860413776e"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 8478039,
        "transactionHash": "0xf7c48d3d235ee9a33dd61f49df8f622e15afb464c25ac72cf808aa1479955221",
        "address": "0xb9CdC263446573a8A5554B7cbbbE09c6caEE3d3a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000004ef26a3129b91ee21d5e9ed963e6549b531c3744",
          "0x0000000000000000000000004ef26a3129b91ee21d5e9ed963e6549b531c3744"
        ],
        "data": "0x",
        "logIndex": 118,
        "blockHash": "0x1fa51bb621149fdb232f5be261a7a3edc8824e78617e681adbc034860413776e"
      }
    ],
    "blockNumber": 8478039,
    "cumulativeGasUsed": "13068814",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4eF26a3129b91Ee21d5E9Ed963e6549B531C3744",
    "0x16C2980c709900003Aabbdd687aC7A3498D1E955"
  ],
  "numDeployments": 2,
  "solcInputHash": "5a5a33568f95fff03d28e834aaa4c986",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintAuthority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cryptoPunksMarketAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BID_ACCEPTANCE_THRESHOLD_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BID_EXPIRY\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newBidId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"createdAt\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"expiry\",\"type\":\"uint40\"},{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.BidState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"totalClaimableCount\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReservePrice\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoPunksMarket\",\"outputs\":[{\"internalType\":\"contract ICryptoPunksMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"finalizeAcceptedBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"finalizeProposedBid\",\"outputs\":[{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.BidState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"name\":\"fromMosaicId\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"monoId\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"monoId\",\"type\":\"uint64\"}],\"name\":\"getMono\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"presetId\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposedReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.MonoBidResponse\",\"name\":\"bidResponse\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"internalType\":\"struct UsingCryptoPunksMosaicRegistryStructs.MonoGovernanceOptions\",\"name\":\"governanceOptions\",\"type\":\"tuple\"}],\"internalType\":\"struct UsingCryptoPunksMosaicRegistryStructs.Mono\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"name\":\"getMonoLifeCycle\",\"outputs\":[{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.MonoLifeCycle\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"getOriginal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint192\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"punkId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"totalMonoSupply\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimedMonoCount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataBaseUri\",\"type\":\"string\"},{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.OriginalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"activeBidId\",\"type\":\"uint256\"}],\"internalType\":\"struct UsingCryptoPunksMosaicRegistryStructs.Original\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"name\":\"getOriginalFromMosaicId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint192\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"punkId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"totalMonoSupply\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimedMonoCount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataBaseUri\",\"type\":\"string\"},{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.OriginalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"activeBidId\",\"type\":\"uint256\"}],\"internalType\":\"struct UsingCryptoPunksMosaicRegistryStructs.Original\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"getPerMonoResaleFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"perMonoResaleFund\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"hasOngoingBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invalidMetadataUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"isBidAcceptable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"name\":\"latestMonoIds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestOriginalId\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"presetId\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposedReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.MonoBidResponse\",\"name\":\"bidResponse\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"internalType\":\"struct UsingCryptoPunksMosaicRegistryStructs.MonoGovernanceOptions\",\"name\":\"governanceOptions\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"name\":\"originals\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"uint256\",\"name\":\"punkId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"totalMonoSupply\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimedMonoCount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReservePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataBaseUri\",\"type\":\"string\"},{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.OriginalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"activeBidId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"proposeReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"refundBidDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"refundOnSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalResaleFund\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"name\":\"resalePrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"},{\"internalType\":\"enum UsingCryptoPunksMosaicRegistryStructs.MonoBidResponse\",\"name\":\"response\",\"type\":\"uint8\"}],\"name\":\"respondToBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setInvalidMetadataUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setMetadataBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"presetId\",\"type\":\"uint8\"}],\"name\":\"setPresetId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"sumBidResponses\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"yes\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"no\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"}],\"name\":\"sumReservePriceProposals\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"validProposalCount\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"priceSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"monoId\",\"type\":\"uint64\"}],\"name\":\"toMosaicId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CryptoPunksMosaicRegistry.sol\":\"CryptoPunksMosaicRegistry\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363736313837373438303739\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"src/CryptoPunksGroupRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Strings} from \\\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\\\";\\nimport {ERC1155} from \\\"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {IERC721} from \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\nimport {AccessControl} from \\\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./lib/BasisPoint.sol\\\";\\nimport \\\"./external/ICryptoPunksMarket.sol\\\";\\nimport \\\"./ICryptoPunksGroupRegistry.sol\\\";\\nimport \\\"./ICryptoPunksMosaicRegistry.sol\\\";\\n\\n// TODO: Wire with Museum\\n// TODO: Migrate custom revert error messages to byte constants\\ncontract CryptoPunksGroupRegistry is\\n    ICryptoPunksGroupRegistry,\\n    ERC1155,\\n    AccessControl,\\n    ReentrancyGuard\\n{\\n    /**\\n     * Arithmetic constants\\n     */\\n    uint64 public constant MIN_RESERVE_PRICE_BPS = 7000; // 70%\\n    uint64 public constant MAX_RESERVE_PRICE_BPS = 50000; // 500%\\n\\n    /**\\n     * Business logic constants\\n     *\\n     * TODO: Introduce a global explicit storage contract\\n     */\\n    uint64 public constant TICKET_SUPPLY_PER_GROUP = 100;\\n    /**\\n     * @dev can create and curate the active group\\n     */\\n    bytes32 public constant CURATOR_ROLE = keccak256(\\\"CURATOR_ROLE\\\");\\n\\n    ICryptoPunksMarket public immutable cryptoPunksMarket;\\n    ICryptoPunksMosaicRegistry private mosaicRegistry;\\n\\n    /**\\n     * @dev also used as a `groupId`, starting from 1.\\n     */\\n    uint192 public latestGroupId;\\n    mapping(uint192 => Group) private groups;\\n\\n    /**\\n     * @dev groupId -> address -> shares (= the number of tickets bought)\\n     */\\n    mapping(uint192 => mapping(address => uint256)) private refundableTickets;\\n\\n    constructor(\\n        address cryptoPunksMarketAddress,\\n        address mosaicRegistryAddress\\n    ) ERC1155(\\\"CryptoPunks Mosaic Ticket\\\") {\\n        // TODO: Inherit a configuration storage from a Museum\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(CURATOR_ROLE, msg.sender);\\n        // TODO: code it up with config passing\\n        cryptoPunksMarket = ICryptoPunksMarket(cryptoPunksMarketAddress);\\n        mosaicRegistry = ICryptoPunksMosaicRegistry(mosaicRegistryAddress);\\n    }\\n\\n    modifier onlyValidGroup(uint192 groupId) {\\n        require(groupId <= latestGroupId, \\\"Invalid groupId\\\");\\n        _;\\n    }\\n\\n    function create(\\n        uint256 targetPunkId,\\n        uint256 targetMaxPrice\\n    ) external onlyRole(CURATOR_ROLE) returns (uint192 groupId) {\\n        require(\\n            groups[latestGroupId].status != GroupStatus.Open,\\n            \\\"Ongoing group exists\\\"\\n        );\\n\\n        ++latestGroupId;\\n        uint64 totalTicketSupply = TICKET_SUPPLY_PER_GROUP;\\n        uint256 unitTicketPrice = targetMaxPrice / totalTicketSupply;\\n\\n        Group storage newGroup = groups[latestGroupId];\\n        newGroup.id = latestGroupId;\\n        newGroup.creator = msg.sender;\\n        newGroup.targetPunkId = targetPunkId;\\n        newGroup.targetMaxPrice = targetMaxPrice;\\n        newGroup.totalTicketSupply = totalTicketSupply;\\n        newGroup.unitTicketPrice = unitTicketPrice;\\n        newGroup.status = GroupStatus.Open;\\n        // TODO: Make it configurable\\n        newGroup.expiry = uint40(block.timestamp + 604800);\\n\\n        emit GroupCreated(\\n            latestGroupId,\\n            msg.sender,\\n            targetMaxPrice,\\n            totalTicketSupply,\\n            unitTicketPrice\\n        );\\n        return latestGroupId;\\n    }\\n\\n    function contribute(\\n        uint192 groupId,\\n        uint64 ticketQuantity\\n    ) external payable onlyValidGroup(groupId) {\\n        Group storage group = groups[groupId];\\n\\n        uint256 ticketsLeft = group.totalTicketSupply - group.ticketsBought;\\n        require(\\n            ticketQuantity <= ticketsLeft,\\n            \\\"Fewer tickets remaining than requested\\\"\\n        );\\n\\n        uint256 ethReceived = msg.value;\\n        uint256 ethRequired = group.unitTicketPrice * ticketQuantity;\\n        require(ethReceived == ethRequired, \\\"Contribution must be exact\\\");\\n\\n        address contributor = msg.sender;\\n        group.totalContribution += ethReceived;\\n        group.ticketsBought += ticketQuantity;\\n        refundableTickets[groupId][contributor] += ticketQuantity;\\n\\n        _mint(contributor, groupId, ticketQuantity, \\\"\\\");\\n\\n        emit Contributed(contributor, groupId, ticketQuantity);\\n    }\\n\\n    /**\\n     * @dev Can be tried as long as the group is OPEN\\n     */\\n    function buy(\\n        uint192 groupId\\n    ) external nonReentrant onlyValidGroup(groupId) {\\n        Group storage group = groups[groupId];\\n        require(\\n            hasContribution(msg.sender, groupId),\\n            \\\"Only ticket holders can initiate a buy\\\"\\n        );\\n        uint256 punkId = group.targetPunkId;\\n        (, , , uint256 offeredPrice, ) = cryptoPunksMarket.punksOfferedForSale(\\n            punkId\\n        );\\n        require(group.ticketsBought == TICKET_SUPPLY_PER_GROUP, \\\"Not sold out\\\");\\n        require(\\n            group.totalContribution >= offeredPrice,\\n            \\\"Offered price is greater than the current contribution\\\"\\n        );\\n        cryptoPunksMarket.buyPunk{value: offeredPrice}(punkId);\\n        require(\\n            cryptoPunksMarket.punkIndexToAddress(punkId) == address(this),\\n            \\\"Unexpected ownership\\\"\\n        );\\n        group.purchasePrice = offeredPrice;\\n        group.status = GroupStatus.Won;\\n        emit GroupWon(groupId);\\n        finalizeOnWon(groupId);\\n    }\\n\\n    function finalizeOnWon(uint192 groupId) public onlyValidGroup(groupId) {\\n        // TODO: Consider removing `getValidGroup` invocation if it costs too much gas\\n        Group storage group = groups[groupId];\\n        require(group.status == GroupStatus.Won, \\\"The group has not won\\\");\\n        require(\\n            address(mosaicRegistry) != address(0x0),\\n            \\\"Exhibit registry must be set\\\"\\n        );\\n\\n        // FIXME: Defend against reentrancy attacks in edge cases where the same cryptopunk ID is used later\\n        cryptoPunksMarket.transferPunk(\\n            address(mosaicRegistry),\\n            group.targetPunkId\\n        );\\n        group.originalId = mosaicRegistry.create(\\n            group.targetPunkId,\\n            group.ticketsBought,\\n            group.purchasePrice,\\n            calculateMinReservePrice(group.purchasePrice),\\n            calculateMaxReservePrice(group.purchasePrice)\\n        );\\n        // TODO: Consider whether to explicitly mark other competing groups as LOST\\n        group.status = GroupStatus.Claimable;\\n    }\\n\\n    // @dev Batch claim-refund as many Mosaic Monos as tickets held\\n    function claim(\\n        uint192 groupId\\n    )\\n        external\\n        nonReentrant\\n        onlyValidGroup(groupId)\\n        returns (uint256[] memory mosaicIds)\\n    {\\n        Group storage group = groups[groupId];\\n        require(\\n            group.status == GroupStatus.Claimable,\\n            \\\"The group is not finalized\\\"\\n        );\\n        uint256 ticketsHeld = getTickets(msg.sender, groupId);\\n        require(ticketsHeld > 0, \\\"Only ticket holders can claim tokens\\\");\\n        _burn(msg.sender, groupId, ticketsHeld);\\n\\n        // Refund\\n        uint256 owed = getRefundPerTicket(group) * ticketsHeld;\\n        // TODO: Define a library for ETH sending with gas considerations\\n        (bool sent, ) = msg.sender.call{value: owed}(\\\"\\\");\\n        require(sent, \\\"Failed to refund\\\");\\n\\n        // Mint\\n        uint256[] memory mosaicIds = new uint256[](ticketsHeld);\\n        for (uint256 i = 0; i < ticketsHeld; i++) {\\n            uint256 mosaicId = mosaicRegistry.mint(\\n                msg.sender,\\n                group.originalId\\n            );\\n            mosaicIds[i] = mosaicId;\\n            emit Claimed(msg.sender, groupId, mosaicId);\\n        }\\n\\n        return mosaicIds;\\n    }\\n\\n    // @dev only for lost/expired groups to invoke explicitly\\n    function refund(\\n        uint192 groupId\\n    ) public nonReentrant onlyValidGroup(groupId) {\\n        address payable contributor = payable(msg.sender);\\n        Group storage group = groups[groupId];\\n        require(\\n            group.status != GroupStatus.Claimable &&\\n                group.status != GroupStatus.Won &&\\n                group.expiry < block.timestamp,\\n            \\\"The group is not expired yet\\\"\\n        );\\n        uint256 ticketsHeld = getTickets(msg.sender, groupId);\\n        require(ticketsHeld > 0, \\\"Only ticket holders can get refunds\\\");\\n\\n        _burn(msg.sender, groupId, ticketsHeld);\\n\\n        uint256 owed = getRefundPerTicket(group) * ticketsHeld;\\n        (bool sent, ) = contributor.call{value: owed}(\\\"\\\");\\n        require(sent, \\\"Failed to refund\\\");\\n    }\\n\\n    function getRefundPerTicket(\\n        Group storage group\\n    ) private view returns (uint256 refundPerTicket) {\\n        if (group.totalContribution <= group.purchasePrice) {\\n            return 0;\\n        }\\n        uint256 surplus = group.totalContribution - group.purchasePrice;\\n        return surplus / group.ticketsBought;\\n    }\\n\\n    //\\n    // Registry-related views\\n    //\\n\\n    function uri(uint256 groupId) public view override returns (string memory) {\\n        Group storage group = groups[uint192(groupId)];\\n        return group.metadataUri;\\n    }\\n\\n    //\\n    // Group-related views\\n    //\\n\\n    function getGroup(\\n        uint192 groupId\\n    ) public view onlyValidGroup(groupId) returns (Group memory) {\\n        return groups[groupId];\\n    }\\n\\n    function getGroupTotalContribution(\\n        uint192 groupId\\n    ) public view onlyValidGroup(groupId) returns (uint256 totalContribution) {\\n        return groups[groupId].totalContribution;\\n    }\\n\\n    //\\n    // Ticket\\n    //\\n\\n    function getTickets(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (uint256) {\\n        return balanceOf(inquired, uint256(groupId));\\n    }\\n\\n    function isCreator(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (bool) {\\n        return groups[groupId].creator == inquired;\\n    }\\n\\n    function hasContribution(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (bool) {\\n        return getTickets(inquired, groupId) > 0;\\n    }\\n\\n    //\\n    // Constitution\\n    //\\n\\n    function calculateMinReservePrice(\\n        uint256 purchasePrice\\n    ) public pure returns (uint256 minReservePrice) {\\n        return\\n            BasisPoint.calculateBasisPoint(\\n                purchasePrice,\\n                MIN_RESERVE_PRICE_BPS\\n            );\\n    }\\n\\n    function calculateMaxReservePrice(\\n        uint256 purchasePrice\\n    ) public pure returns (uint256 maxReservePrice) {\\n        return\\n            BasisPoint.calculateBasisPoint(\\n                purchasePrice,\\n                MAX_RESERVE_PRICE_BPS\\n            );\\n    }\\n\\n    //\\n    // Admin\\n    //\\n\\n    function airdrop(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _mintBatch(to, ids, amounts, \\\"\\\");\\n    }\\n\\n    //\\n    // Internals\\n    //\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC1155, AccessControl) returns (bool) {\\n        return\\n            ERC1155.supportsInterface(interfaceId) ||\\n            AccessControl.supportsInterface(interfaceId);\\n    }\\n\\n    // TODO: fallback\\n}\\n\",\"keccak256\":\"0x8c735d4c1f816aa6ab07606740c3d074b29f50dabefddb9b6c88861e723cab3a\",\"license\":\"MIT\"},\"src/CryptoPunksMosaicRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {ERC721} from \\\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\\\";\\nimport {SafeCast} from \\\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\\\";\\nimport {AccessControl} from \\\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\\\";\\nimport {Strings} from \\\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./lib/BasisPoint.sol\\\";\\nimport \\\"./external/ICryptoPunksMarket.sol\\\";\\nimport \\\"./ICryptoPunksMosaicRegistry.sol\\\";\\nimport \\\"./CryptoPunksGroupRegistry.sol\\\";\\n\\n// TODO: Make global settings configurable\\n// TODO: Reconsider the ID scheme so that the same origin contract's same groups map to the same ID (contract, group) => (internal id)\\ncontract CryptoPunksMosaicRegistry is\\n    ICryptoPunksMosaicRegistry,\\n    ERC721,\\n    AccessControl\\n{\\n    using SafeCast for uint256;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    uint256 private constant MONO_ID_BITS = 64;\\n    uint256 private constant MONO_ID_BITMASK = (1 << (MONO_ID_BITS + 1)) - 1; // lower 64 bits\\n\\n    address private constant NO_BIDDER = address(0x0);\\n    uint40 public constant BID_EXPIRY = 604800;\\n    uint256 public constant BID_ACCEPTANCE_THRESHOLD_BPS = 5100;\\n\\n    ICryptoPunksMarket public immutable cryptoPunksMarket;\\n\\n    string public invalidMetadataUri;\\n\\n    //\\n    // Models\\n    //\\n\\n    // @dev used as a `originalId`, starting from 1.\\n    uint192 public latestOriginalId;\\n\\n    mapping(uint192 => Original) public originals;\\n\\n    // @dev 0 represents the Original; each Mono is assigned an ID starting from 1.\\n    //  The value represents the next ID to assign for a new Mono.\\n    //  originalId => latestMonoId\\n    mapping(uint192 => uint64) public latestMonoIds;\\n\\n    // @dev mosaicId (originalId + monoId) => Mono\\n    mapping(uint256 => Mono) public monos;\\n\\n    //\\n    // Reconstitution\\n    //\\n\\n    // @dev bidId => Bid\\n    mapping(uint256 => Bid) public bids;\\n    mapping(uint256 => uint256) public bidDeposits;\\n\\n    // @dev originalId => value\\n    mapping(uint192 => uint256) public resalePrices;\\n\\n    constructor(\\n        address _mintAuthority,\\n        address cryptoPunksMarketAddress\\n    ) ERC721(\\\"CryptoPunks Mosaic\\\", \\\"PUNKSMOSAIC\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, _mintAuthority);\\n        cryptoPunksMarket = ICryptoPunksMarket(cryptoPunksMarketAddress);\\n    }\\n\\n    modifier onlyActiveOriginal(uint192 originalId) {\\n        require(\\n            originals[originalId].status == OriginalStatus.Active,\\n            \\\"Not active\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMosaicOwner(uint256 mosaicId) {\\n        require(ownerOf(mosaicId) == msg.sender, \\\"Must own the Mosaic\\\");\\n        _;\\n    }\\n\\n    //\\n    // Core\\n    //\\n\\n    function create(\\n        uint256 punkId,\\n        uint64 totalClaimableCount,\\n        uint256 purchasePrice,\\n        uint256 minReservePrice,\\n        uint256 maxReservePrice\\n    ) external override onlyRole(MINTER_ROLE) returns (uint192 originalId) {\\n        require(\\n            cryptoPunksMarket.punkIndexToAddress(punkId) == address(this),\\n            \\\"The contract must own the punk\\\"\\n        );\\n        originalId = ++latestOriginalId;\\n        ++latestMonoIds[originalId];\\n        originals[originalId] = Original({\\n        id : originalId,\\n        punkId : punkId,\\n        totalMonoSupply : totalClaimableCount,\\n        claimedMonoCount : 0,\\n        purchasePrice : purchasePrice,\\n        minReservePrice : minReservePrice,\\n        maxReservePrice : maxReservePrice,\\n        status : OriginalStatus.Active,\\n        activeBidId : 0,\\n        metadataBaseUri : \\\"\\\"\\n        });\\n        return originalId;\\n    }\\n\\n    function mint(\\n        address contributor,\\n        uint192 originalId\\n    ) external override onlyRole(MINTER_ROLE) returns (uint256 mosaicId) {\\n        require(\\n            latestMonoIds[originalId] > 0,\\n            \\\"Original must be initialized first\\\"\\n        );\\n        uint64 monoId = latestMonoIds[originalId]++;\\n        mosaicId = toMosaicId(originalId, monoId);\\n        monos[mosaicId] = Mono({\\n        mosaicId : mosaicId,\\n        presetId : 0,\\n        governanceOptions : MonoGovernanceOptions({\\n        proposedReservePrice : 0,\\n        bidResponse : MonoBidResponse.None,\\n        bidId : 0\\n        })\\n        });\\n        originals[originalId].claimedMonoCount++;\\n        _safeMint(contributor, mosaicId);\\n\\n        return mosaicId;\\n    }\\n\\n    //\\n    // Design: Mosaic owners\\n    //\\n\\n    function setPresetId(\\n        uint256 mosaicId,\\n        uint8 presetId\\n    ) public onlyMosaicOwner(mosaicId) {\\n        Mono storage mono = monos[mosaicId];\\n        mono.presetId = presetId;\\n    }\\n\\n    //\\n    // Governance: Mosaic owners\\n    //\\n\\n    function proposeReservePrice(\\n        uint256 mosaicId,\\n        uint256 price\\n    ) public onlyMosaicOwner(mosaicId) {\\n        (uint192 originalId, ) = fromMosaicId(mosaicId);\\n        Original storage original = originals[originalId];\\n        require(\\n            original.minReservePrice <= price &&\\n                price <= original.maxReservePrice,\\n            \\\"Must be within the range\\\"\\n        );\\n        Mono storage mono = monos[mosaicId];\\n        mono.governanceOptions.proposedReservePrice = price;\\n    }\\n\\n    function respondToBid(\\n        uint256 mosaicId,\\n        MonoBidResponse response\\n    ) public onlyMosaicOwner(mosaicId) {\\n        (uint192 originalId, ) = fromMosaicId(mosaicId);\\n        require(hasOngoingBid(originalId), \\\"No bid ongoing\\\");\\n        MonoGovernanceOptions storage governanceOptions = monos[mosaicId]\\n            .governanceOptions;\\n        governanceOptions.bidId = originals[originalId].activeBidId;\\n        governanceOptions.bidResponse = response;\\n    }\\n\\n    //\\n    // Reconstitution: bidder\\n    //\\n\\n    function bid(\\n        uint192 originalId,\\n        uint256 price\\n    )\\n        external\\n        payable\\n        onlyActiveOriginal(originalId)\\n        returns (uint256 newBidId)\\n    {\\n        Original storage original = originals[originalId];\\n        // TODO: Make bid respect min reserve prices decided by GovernanceOptions\\n        require(\\n            price >= original.minReservePrice &&\\n                price <= original.maxReservePrice,\\n            \\\"Bid price must be within the reserve price range\\\"\\n        );\\n        require(msg.value == price, \\\"Must send the exact value as proposed\\\");\\n\\n        uint256 oldBidId = original.activeBidId;\\n        if (oldBidId != 0) {\\n            // A preceding bid exists, so its state must be updated first\\n            BidState oldBidState = finalizeProposedBid(oldBidId);\\n            require(\\n                oldBidState == BidState.Rejected,\\n                \\\"The previous bid must be rejected\\\"\\n            );\\n        }\\n        uint256 newBidId = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    originalId,\\n                    msg.sender,\\n                    uint40(block.timestamp)\\n                )\\n            )\\n        );\\n        bids[newBidId] = Bid({\\n            id: newBidId,\\n            originalId: originalId,\\n            bidder: payable(msg.sender),\\n            createdAt: uint40(block.timestamp),\\n            expiry: BID_EXPIRY,\\n            price: price,\\n            state: BidState.Proposed\\n        });\\n        bidDeposits[newBidId] = msg.value;\\n        original.activeBidId = newBidId;\\n        // TODO: Define and emit Bid event\\n\\n        return newBidId;\\n    }\\n\\n    function refundBidDeposit(uint256 bidId) external {\\n        Bid storage bid = bids[bidId];\\n        require(\\n            bid.state == BidState.Rejected,\\n            \\\"Only rejected bids can be refunded\\\"\\n        );\\n\\n        uint256 deposit = bidDeposits[bidId];\\n        (bool sent, ) = msg.sender.call{value: deposit}(\\\"\\\");\\n        require(sent, \\\"Failed to refund\\\");\\n\\n        bid.state = BidState.Refunded;\\n    }\\n\\n    //\\n    // Reconstitution: common\\n    //\\n\\n    function finalizeProposedBid(uint256 bidId) public returns (BidState) {\\n        // TODO: Double-check the prerequisites, including Original check\\n        Bid storage bid = bids[bidId];\\n        require(\\n            bid.state == BidState.Proposed,\\n            \\\"Only bids in proposal can be updated\\\"\\n        );\\n        require(\\n            bid.createdAt + bid.expiry < block.timestamp,\\n            \\\"Bid vote is ongoing\\\"\\n        );\\n        bid.state = isBidAcceptable(bid.originalId)\\n            ? BidState.Accepted\\n            : BidState.Rejected;\\n        return bid.state;\\n    }\\n\\n    // TODO: Introduce a way for Mosaic owners to force Bid finalization to prevent limbo cases where\\n    //  the winning bidder makes no further transaction\\n    function finalizeAcceptedBid(uint256 bidId) public {\\n        // TODO: Transfer the original and update the Mosaic state\\n        Bid storage bid = bids[bidId];\\n        require(bid.state == BidState.Accepted, \\\"Bid must be accepted\\\");\\n\\n        Original storage original = originals[bid.originalId];\\n        resalePrices[original.id] = bid.price;\\n        original.status = OriginalStatus.Sold;\\n\\n        cryptoPunksMarket.transferPunk(bid.bidder, original.punkId);\\n\\n        bid.state = BidState.Won;\\n    }\\n\\n    //\\n    // Reconstitution: Mosaic owners\\n    //\\n\\n    // @dev Burn all owned Monos and send refunds\\n    function refundOnSold(\\n        uint192 originalId\\n    ) public returns (uint256 totalResaleFund) {\\n        // TODO: Double-check whether arithmetic division may cause under/over-refunding\\n        uint256 burnedMonoCount = 0;\\n        uint64 latestMonoId = latestMonoIds[originalId];\\n        for (uint64 monoId = 1; monoId < latestMonoId; monoId++) {\\n            uint256 mosaicId = toMosaicId(originalId, monoId);\\n            if (_ownerOf(mosaicId) == msg.sender) {\\n                _burn(mosaicId);\\n                burnedMonoCount++;\\n            }\\n        }\\n        totalResaleFund = burnedMonoCount * getPerMonoResaleFund(originalId);\\n        (bool sent, ) = msg.sender.call{value: totalResaleFund}(\\\"\\\");\\n        require(sent, \\\"Failed to refund\\\");\\n    }\\n\\n    //\\n    // Reconstitution helpers\\n    //\\n\\n    function sumReservePriceProposals(\\n        uint192 originalId\\n    ) public view returns (uint64 validProposalCount, uint256 priceSum) {\\n        uint64 latestMonoId = latestMonoIds[originalId];\\n        for (uint64 monoId = 1; monoId < latestMonoId; monoId++) {\\n            Mono storage mono = monos[toMosaicId(originalId, monoId)];\\n            if (mono.governanceOptions.proposedReservePrice > 0) {\\n                validProposalCount++;\\n                priceSum += mono.governanceOptions.proposedReservePrice;\\n            }\\n        }\\n        return (validProposalCount, priceSum);\\n    }\\n\\n    function sumBidResponses(\\n        uint192 originalId\\n    ) public view returns (uint64 yes, uint64 no) {\\n        if (!hasOngoingBid(originalId)) {\\n            return (0, 0);\\n        }\\n        uint64 latestMonoId = latestMonoIds[originalId];\\n        uint256 activeBidId = originals[originalId].activeBidId;\\n        for (uint64 monoId = 1; monoId < latestMonoId; monoId++) {\\n            MonoGovernanceOptions storage options = monos[\\n                toMosaicId(originalId, monoId)\\n            ].governanceOptions;\\n            if (options.bidId == activeBidId) {\\n                if (options.bidResponse == MonoBidResponse.Yes) {\\n                    yes++;\\n                } else if (options.bidResponse == MonoBidResponse.No) {\\n                    no++;\\n                }\\n            }\\n        }\\n        return (yes, no);\\n    }\\n\\n    function isBidAcceptable(uint192 originalId) public view returns (bool) {\\n        // TODO(@jyterencekim): Revisit the bid acceptance condition with respect to the planned spec\\n        (uint64 yes, ) = sumBidResponses(originalId);\\n        uint128 totalVotable = originals[originalId].totalMonoSupply;\\n        return\\n            yes >=\\n            BasisPoint.calculateBasisPoint(\\n                totalVotable,\\n                BID_ACCEPTANCE_THRESHOLD_BPS\\n            );\\n    }\\n\\n    function getPerMonoResaleFund(\\n        uint192 originalId\\n    ) public view returns (uint256 perMonoResaleFund) {\\n        uint256 resalePrice = resalePrices[originalId];\\n        require(resalePrice > 0, \\\"No resale price set\\\");\\n        uint256 perMonoBps = BasisPoint.WHOLE_BPS /\\n            originals[originalId].totalMonoSupply;\\n\\n        return BasisPoint.calculateBasisPoint(resalePrice, perMonoBps);\\n    }\\n\\n    //\\n    // Model views\\n    //\\n    function getMono(\\n        uint192 originalId,\\n        uint64 monoId\\n    ) external view returns (Mono memory) {\\n        return monos[toMosaicId(originalId, monoId)];\\n    }\\n\\n    function getOriginal(\\n        uint192 originalId\\n    ) external view returns (Original memory) {\\n        return originals[originalId];\\n    }\\n\\n    function getOriginalFromMosaicId(\\n        uint256 mosaicId\\n    ) external view returns (Original memory) {\\n        (uint192 originalId, ) = fromMosaicId(mosaicId);\\n        return originals[originalId];\\n    }\\n\\n    function getMonoLifeCycle(\\n        uint256 mosaicId\\n    ) public view returns (MonoLifeCycle) {\\n        // TODO: Check valid mosaicId\\n        Mono storage mono = monos[mosaicId];\\n        (uint192 originalId, ) = fromMosaicId(mosaicId);\\n        Original storage original = originals[originalId];\\n        if (original.status == OriginalStatus.Sold) {\\n            return MonoLifeCycle.Dead;\\n        }\\n        if (mono.presetId == 0) {\\n            return MonoLifeCycle.Raw;\\n        }\\n        return MonoLifeCycle.Active;\\n    }\\n\\n    // TODO(@jyterencekim): Revisit the conditions\\n    function hasOngoingBid(uint192 originalId) public view returns (bool) {\\n        uint256 bidId = originals[originalId].activeBidId;\\n        Bid storage bid = bids[bidId];\\n        return\\n            bidId != 0 &&\\n            bid.bidder != NO_BIDDER &&\\n            bid.createdAt + bid.expiry >= block.timestamp;\\n    }\\n\\n    //\\n    // Internal Helpers\\n    //\\n\\n    function toMosaicId(\\n        uint192 originalId,\\n        uint64 monoId\\n    ) public pure returns (uint256 mosaicId) {\\n        return (uint256(originalId) << MONO_ID_BITS) | uint256(monoId);\\n    }\\n\\n    function fromMosaicId(\\n        uint256 mosaicId\\n    ) public pure returns (uint192 originalId, uint64 monoId) {\\n        return (\\n            uint192(mosaicId >> MONO_ID_BITS),\\n            uint64(mosaicId & MONO_ID_BITMASK)\\n        );\\n    }\\n\\n    //\\n    // Implementation internals\\n    //\\n\\n    // ERC721\\n    function setInvalidMetadataUri(\\n        string calldata _uri\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        invalidMetadataUri = _uri;\\n    }\\n\\n    function setMetadataBaseUri(\\n        uint192 originalId,\\n        string calldata _uri\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        Original storage original = originals[originalId];\\n        original.metadataBaseUri = _uri;\\n    }\\n\\n    //\\n    // ERC721\\n    //\\n    function tokenURI(\\n        uint256 mosaicId\\n    ) public view override returns (string memory) {\\n        (uint192 originalId,) = fromMosaicId(mosaicId);\\n        Original storage original = originals[originalId];\\n        if (original.status == OriginalStatus.Sold) {\\n            return invalidMetadataUri;\\n        }\\n        string memory baseUrl = original.metadataBaseUri;\\n        uint8 presetId = monos[mosaicId].presetId;\\n        return string.concat(\\n            baseUrl,\\n            \\\"/\\\",\\n            Strings.toString(original.punkId),\\n            \\\"_\\\",\\n            Strings.toString(uint256(presetId)),\\n            \\\".json\\\"\\n        );\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC721, AccessControl) returns (bool) {\\n        return\\n            ERC721.supportsInterface(interfaceId) ||\\n            AccessControl.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc73af3c237940630b48b5bf6bff135066f1c268be51aebe231e4a26cd3e776cb\",\"license\":\"MIT\"},\"src/ICryptoPunksGroupRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./UsingCryptoPunksGroupRegistryStructs.sol\\\";\\n\\ninterface ICryptoPunksGroupRegistry is UsingCryptoPunksGroupRegistryStructs {\\n    // TODO: Add signatures; consider `forfeit`\\n}\\n\",\"keccak256\":\"0xfa92d64639a5fc6d07ff24fe1deb12d4a00fa5c1b62696ec8d844d9183c6c47b\",\"license\":\"MIT\"},\"src/ICryptoPunksMosaicRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./UsingCryptoPunksMosaicRegistryStructs.sol\\\";\\n\\ninterface ICryptoPunksMosaicRegistry is UsingCryptoPunksMosaicRegistryStructs {\\n    // TODO: fill it out\\n    function create(\\n        uint256 punkId,\\n        uint64 totalClaimableCount,\\n        uint256 purchasePrice,\\n        uint256 minReservePrice,\\n        uint256 maxReservePrice\\n    ) external returns (uint192 originalId);\\n\\n    function mint(\\n        address contributor,\\n        uint192 originalId\\n    ) external returns (uint256 mosaicId);\\n\\n    function bid(\\n        uint192 originalId,\\n        uint256 price\\n    ) external payable returns (uint256 newBidId);\\n}\\n\",\"keccak256\":\"0x1a9d5fd9933322c894e054e8a1065a7d0137ba679231cac98615b5bcd895c350\",\"license\":\"MIT\"},\"src/UsingCryptoPunksGroupRegistryStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface UsingCryptoPunksGroupRegistryStructs {\\n    /**\\n     * @dev WON if the group has successfully purchased and acquired the target original;\\n     *  LOST if the group has not procured the target original within the expiry.\\n     */\\n    enum GroupStatus {\\n        None,\\n        Open,\\n        Won,\\n        Lost,\\n        Claimable\\n    }\\n\\n    struct Group {\\n        uint192 id;\\n        address creator;\\n        uint256 targetPunkId;\\n        uint256 targetMaxPrice;\\n        uint64 totalTicketSupply;\\n        uint256 unitTicketPrice;\\n        uint256 totalContribution;\\n        uint64 ticketsBought;\\n        uint40 expiry; // in seconds, with respect to block.timestamp\\n        GroupStatus status;\\n        uint256 purchasePrice; // price at which the target is bought\\n        uint192 originalId;\\n        string metadataUri;\\n    }\\n\\n    event GroupCreated(\\n        uint192 indexed groupId,\\n        address indexed creator,\\n        uint256 targetMaxPrice,\\n        uint64 totalTicketSupply,\\n        uint256 unitTicketPrice\\n    );\\n\\n    event GroupWon(uint192 indexed groupId);\\n\\n    event Contributed(\\n        address indexed contributor,\\n        uint192 indexed groupId,\\n        uint96 indexed ticketQuantity\\n    );\\n\\n    event Claimed(\\n        address indexed claimer,\\n        uint192 indexed groupId,\\n        uint256 indexed mosaicId\\n    );\\n}\\n\",\"keccak256\":\"0x26c885d7b00fcb6ca50e2e24f7f1e6c8fe92a1fff9d36a3d825889f9c6e719de\",\"license\":\"MIT\"},\"src/UsingCryptoPunksMosaicRegistryStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface UsingCryptoPunksMosaicRegistryStructs {\\n    struct Original {\\n        uint192 id;\\n        // @dev punkIndex\\n        uint256 punkId;\\n        /**\\n         * @dev To calculate governance quorum and token circulation.\\n         *      Corresponds to total ticket circulation per group.\\n         */\\n        uint128 totalMonoSupply;\\n        uint128 claimedMonoCount;\\n        uint256 purchasePrice;\\n        uint256 minReservePrice;\\n        uint256 maxReservePrice;\\n        string metadataBaseUri;\\n        OriginalStatus status;\\n        uint256 activeBidId;\\n    }\\n\\n    enum OriginalStatus {\\n        Active,\\n        Sold\\n    }\\n\\n    struct Mono {\\n        uint256 mosaicId;\\n        uint8 presetId;\\n        MonoGovernanceOptions governanceOptions;\\n    }\\n\\n    enum MonoLifeCycle {\\n        // @dev pre-design, just minted\\n        Raw,\\n        // @dev post-design, valid\\n        Active,\\n        // @dev belonging to invalid/reconstituted Original\\n        Dead\\n    }\\n\\n    struct MonoGovernanceOptions {\\n        uint256 proposedReservePrice;\\n        MonoBidResponse bidResponse;\\n        // @dev Bid ID\\n        uint256 bidId;\\n    }\\n\\n    enum MonoBidResponse {\\n        None,\\n        Yes,\\n        No\\n    }\\n\\n    // @dev There can be at most one ongoing bid per original\\n    struct Bid {\\n        // @dev keccak256(abi.encodePacked(originalId, bidder, uint40(block.timestamp))\\n        uint256 id;\\n        address payable bidder;\\n        uint192 originalId;\\n        uint256 price;\\n        // block.timestamp\\n        uint40 createdAt;\\n        // duration in block.timestamp, in seconds\\n        uint40 expiry;\\n        // @dev updated upon any following Bid's creation or explicit external state updates\\n        BidState state;\\n    }\\n\\n    enum BidState {\\n        // Initial state, awaiting the result until the bidder explicitly reconstitutes the original or admits failure\\n        Proposed,\\n        // Resulting states upon vote results\\n        Accepted,\\n        Rejected,\\n        // Final/terminal states after bidder's action\\n        Won,\\n        Refunded\\n    }\\n}\\n\",\"keccak256\":\"0x3fb55c212d2a03d8c7e89a57232a87e64a5fcd598094e2a28e4c74328e5bfeca\",\"license\":\"MIT\"},\"src/external/ICryptoPunksMarket.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6. SEE SOURCE BELOW. !!\\npragma solidity ^0.8.4;\\n\\ninterface ICryptoPunksMarket {\\n    function name() external view returns (string memory);\\n\\n    function punksOfferedForSale(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (\\n            bool isForSale,\\n            uint256 punkIndex,\\n            address seller,\\n            uint256 minValue,\\n            address onlySellTo\\n        );\\n\\n    function enterBidForPunk(uint256 punkIndex) external payable;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function acceptBidForPunk(uint256 punkIndex, uint256 minPrice) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function setInitialOwners(\\n        address[] memory addresses,\\n        uint256[] memory indices\\n    ) external;\\n\\n    function withdraw() external;\\n\\n    function imageHash() external view returns (string memory);\\n\\n    function nextPunkIndexToAssign() external view returns (uint256);\\n\\n    function punkIndexToAddress(uint256) external view returns (address);\\n\\n    function standard() external view returns (string memory);\\n\\n    function punkBids(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (bool hasBid, uint256 punkIndex, address bidder, uint256 value);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function allInitialOwnersAssigned() external;\\n\\n    function allPunksAssigned() external view returns (bool);\\n\\n    function buyPunk(uint256 punkIndex) external payable;\\n\\n    function transferPunk(address to, uint256 punkIndex) external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function withdrawBidForPunk(uint256 punkIndex) external;\\n\\n    function setInitialOwner(address to, uint256 punkIndex) external;\\n\\n    function offerPunkForSaleToAddress(\\n        uint256 punkIndex,\\n        uint256 minSalePriceInWei,\\n        address toAddress\\n    ) external;\\n\\n    function punksRemainingToAssign() external view returns (uint256);\\n\\n    function offerPunkForSale(\\n        uint256 punkIndex,\\n        uint256 minSalePriceInWei\\n    ) external;\\n\\n    function getPunk(uint256 punkIndex) external;\\n\\n    function pendingWithdrawals(address) external view returns (uint256);\\n\\n    function punkNoLongerForSale(uint256 punkIndex) external;\\n\\n    event Assign(address indexed to, uint256 punkIndex);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event PunkTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 punkIndex\\n    );\\n    event PunkOffered(\\n        uint256 indexed punkIndex,\\n        uint256 minValue,\\n        address indexed toAddress\\n    );\\n    event PunkBidEntered(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBidWithdrawn(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBought(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress,\\n        address indexed toAddress\\n    );\\n    event PunkNoLongerForSale(uint256 indexed punkIndex);\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[],\\\"name\\\":\\\"name\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punksOfferedForSale\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"isForSale\\\",\\\"type\\\":\\\"bool\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"seller\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"minValue\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"onlySellTo\\\",\\\"type\\\":\\\"address\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"enterBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalSupply\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minPrice\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"acceptBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"decimals\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"addresses\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"name\\\":\\\"indices\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"setInitialOwners\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"withdraw\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"imageHash\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"nextPunkIndexToAssign\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkIndexToAddress\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"standard\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkBids\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"hasBid\\\",\\\"type\\\":\\\"bool\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"bidder\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"allInitialOwnersAssigned\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"allPunksAssigned\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"buyPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"transferPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"symbol\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"withdrawBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setInitialOwner\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minSalePriceInWei\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"offerPunkForSaleToAddress\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"punksRemainingToAssign\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minSalePriceInWei\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"offerPunkForSale\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"pendingWithdrawals\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkNoLongerForSale\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"type\\\":\\\"constructor\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Assign\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Transfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PunkTransfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"minValue\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkOffered\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBidEntered\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBidWithdrawn\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBought\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PunkNoLongerForSale\\\",\\\"type\\\":\\\"event\\\"}]\\n*/\\n\",\"keccak256\":\"0xcc8da30186c7ad45201c8960c2c97eeba37b16ead893bb2f701107c5c0c4fecf\",\"license\":\"UNLICENSED\"},\"src/lib/BasisPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary BasisPoint {\\n    // 10,000 basis points (bps) = 100%\\n    uint256 public constant WHOLE_BPS = 10_000;\\n\\n    function calculateBasisPoint(\\n        uint256 amount,\\n        uint256 basisPoints\\n    ) internal pure returns (uint256) {\\n        // Minimal precision\\n        require((amount * basisPoints) >= WHOLE_BPS);\\n        return (amount * basisPoints) / WHOLE_BPS;\\n    }\\n}\\n\",\"keccak256\":\"0x602c5e8bfbfc40649a3852e835280fca555c44598970f5aa9c39d91f2c5543a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004a4d38038062004a4d8339810160408190526200003491620001b6565b6040518060400160405280601281526020017143727970746f50756e6b73204d6f7361696360701b8152506040518060400160405280600b81526020016a50554e4b534d4f5341494360a81b815250816000908162000094919062000293565b506001620000a3828262000293565b50620000b591506000905033620000f4565b620000e17f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a683620000f4565b6001600160a01b0316608052506200035f565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16620001955760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001543390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b80516001600160a01b0381168114620001b157600080fd5b919050565b60008060408385031215620001ca57600080fd5b620001d58362000199565b9150620001e56020840162000199565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200021957607f821691505b6020821081036200023a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200028e57600081815260208120601f850160051c81016020861015620002695750805b601f850160051c820191505b818110156200028a5782815560010162000275565b5050505b505050565b81516001600160401b03811115620002af57620002af620001ee565b620002c781620002c0845462000204565b8462000240565b602080601f831160018114620002ff5760008415620002e65750858301515b600019600386901b1c1916600185901b1785556200028a565b600085815260208120601f198616915b8281101562000330578886015182559484019460019091019084016200030f565b50858210156200034f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080516146c46200038960003960008181610ad0015281816118090152611a3d01526146c46000f3fe6080604052600436106103355760003560e01c806376016f4b116101ab578063a5627d9a116100f7578063d0d851d011610095578063d547741f1161006f578063d547741f14610b46578063e6428a2b14610b66578063e985e9c514610b95578063f3c340cd14610bde57600080fd5b8063d0d851d014610abe578063d42de9aa14610af2578063d539139314610b1257600080fd5b8063b88d4fde116100d1578063b88d4fde14610a11578063bf4dc67514610a31578063c01efa5314610a5e578063c87b56dd14610a9e57600080fd5b8063a5627d9a146109a4578063ac8d6168146109c4578063af4a6c0c146109f157600080fd5b80639399280811610164578063993a37901161013e578063993a3790146108f4578063a217fddf14610921578063a22cb46514610936578063a39147ab1461095657600080fd5b8063939928081461087c57806395d89b41146108b2578063970525dd146108c757600080fd5b806376016f4b146107c957806379c07a39146107e957806379f5f153146108095780638310a7da1461081c5780638902436a1461083c57806391d148541461085c57600080fd5b8063326d0367116102855780634c905789116102235780635d7b88f6116101fd5780635d7b88f61461072a5780636352211e1461074a57806364f4e5ef1461076a57806370a08231146107a957600080fd5b80634c9057891461067e578063512137ed146106ab57806354cefb23146106e357600080fd5b80633a0e75551161025f5780633a0e75551461059857806342842e0e146105b85780634423c5f1146105d85780634bb722c61461066857600080fd5b8063326d036714610538578063342834f71461055857806336568abe1461057857600080fd5b80631df46de7116102f2578063248a9ca3116102cc578063248a9ca31461049b5780632594c224146104cb5780632f2ff15d146104eb57806331e781da1461050b57600080fd5b80631df46de71461042d5780632062f2e41461044d57806323b872dd1461047b57600080fd5b806301ffc9a71461033a57806306fdde031461036f578063081812fc14610391578063095ea7b3146103c95780630e6a929c146103eb57806318d6a5e714610418575b600080fd5b34801561034657600080fd5b5061035a610355366004613962565b610bfe565b60405190151581526020015b60405180910390f35b34801561037b57600080fd5b50610384610c1e565b60405161036691906139cf565b34801561039d57600080fd5b506103b16103ac3660046139e2565b610cb0565b6040516001600160a01b039091168152602001610366565b3480156103d557600080fd5b506103e96103e4366004613a10565b610cd7565b005b3480156103f757600080fd5b5061040b6104063660046139e2565b610df1565b6040516103669190613a62565b34801561042457600080fd5b50610384610e75565b34801561043957600080fd5b506103e9610448366004613a75565b610f03565b34801561045957600080fd5b5061046d610468366004613ac5565b610fea565b604051908152602001610366565b34801561048757600080fd5b506103e9610496366004613afa565b611223565b3480156104a757600080fd5b5061046d6104b63660046139e2565b60009081526006602052604090206001015490565b3480156104d757600080fd5b5061046d6104e6366004613b3b565b611254565b3480156104f757600080fd5b506103e9610506366004613b56565b6112f5565b34801561051757600080fd5b5061052b6105263660046139e2565b61131a565b6040516103669190613b8f565b34801561054457600080fd5b506103e9610553366004613c48565b61148d565b34801561056457600080fd5b506103e96105733660046139e2565b611562565b34801561058457600080fd5b506103e9610593366004613b56565b61169d565b3480156105a457600080fd5b506103e96105b33660046139e2565b61171b565b3480156105c457600080fd5b506103e96105d3366004613afa565b611880565b3480156105e457600080fd5b506106556105f33660046139e2565b600c602052600090815260409020805460018201546002830154600384015460049094015492936001600160a01b03909216926001600160c01b03909116919064ffffffffff80821691600160281b810490911690600160501b900460ff1687565b6040516103669796959493929190613c7a565b34801561067457600080fd5b5061046d6113ec81565b34801561068a57600080fd5b5061069e6106993660046139e2565b61189b565b6040516103669190613cd4565b3480156106b757600080fd5b506106cb6106c6366004613cf9565b6119f1565b6040516001600160c01b039091168152602001610366565b3480156106ef57600080fd5b506107036106fe3660046139e2565b611cdd565b604080516001600160c01b0390931683526001600160401b03909116602083015201610366565b34801561073657600080fd5b506008546106cb906001600160c01b031681565b34801561075657600080fd5b506103b16107653660046139e2565b611d0d565b34801561077657600080fd5b5061078a610785366004613b3b565b611d6d565b604080516001600160401b039093168352602083019190915201610366565b3480156107b557600080fd5b5061046d6107c4366004613d3f565b611e15565b3480156107d557600080fd5b5061052b6107e4366004613b3b565b611e9b565b3480156107f557600080fd5b506103e9610804366004613d5c565b611ffb565b61046d610817366004613d87565b612052565b34801561082857600080fd5b5061035a610837366004613b3b565b6123be565b34801561084857600080fd5b5061046d610857366004613b3b565b612414565b34801561086857600080fd5b5061035a610877366004613b56565b612565565b34801561088857600080fd5b5061089c610897366004613b3b565b612590565b6040516103669a99989796959493929190613da3565b3480156108be57600080fd5b50610384612681565b3480156108d357600080fd5b506108e76108e2366004613e1d565b612690565b6040516103669190613e69565b34801561090057600080fd5b5061046d61090f366004613b3b565b600e6020526000908152604090205481565b34801561092d57600080fd5b5061046d600081565b34801561094257600080fd5b506103e9610951366004613e94565b612732565b34801561096257600080fd5b5061098c610971366004613b3b565b600a602052600090815260409020546001600160401b031681565b6040516001600160401b039091168152602001610366565b3480156109b057600080fd5b506103e96109bf366004613f0f565b61273d565b3480156109d057600080fd5b506109db62093a8081565b60405164ffffffffff9091168152602001610366565b3480156109fd57600080fd5b5061046d610a0c366004613e1d565b612777565b348015610a1d57600080fd5b506103e9610a2c366004613f77565b612795565b348015610a3d57600080fd5b5061046d610a4c3660046139e2565b600d6020526000908152604090205481565b348015610a6a57600080fd5b50610a7e610a79366004613b3b565b6127cd565b604080516001600160401b03938416815292909116602083015201610366565b348015610aaa57600080fd5b50610384610ab93660046139e2565b6128e1565b348015610aca57600080fd5b506103b17f000000000000000000000000000000000000000000000000000000000000000081565b348015610afe57600080fd5b5061035a610b0d366004613b3b565b612aaf565b348015610b1e57600080fd5b5061046d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b348015610b5257600080fd5b506103e9610b61366004613b56565b612b2c565b348015610b7257600080fd5b50610b86610b813660046139e2565b612b51565b60405161036693929190614056565b348015610ba157600080fd5b5061035a610bb0366004614073565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610bea57600080fd5b506103e9610bf93660046140a1565b612bc7565b6000610c0982612bdf565b80610c185750610c1882612c2f565b92915050565b606060008054610c2d906140e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610c59906140e2565b8015610ca65780601f10610c7b57610100808354040283529160200191610ca6565b820191906000526020600020905b815481529060010190602001808311610c8957829003601f168201915b5050505050905090565b6000610cbb82612c54565b506000908152600460205260409020546001600160a01b031690565b6000610ce282611d0d565b9050806001600160a01b0316836001600160a01b031603610d545760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610d705750610d708133610bb0565b610de25760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610d4b565b610dec8383612cb6565b505050565b6000818152600b6020526040812081610e0984611cdd565b506001600160c01b03811660009081526009602052604090209091506001600782015460ff166001811115610e4057610e40613a3c565b03610e5057506002949350505050565b600183015460ff16600003610e6a57506000949350505050565b506001949350505050565b60078054610e82906140e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610eae906140e2565b8015610efb5780601f10610ed057610100808354040283529160200191610efb565b820191906000526020600020905b815481529060010190602001808311610ede57829003601f168201915b505050505081565b8133610f0e82611d0d565b6001600160a01b031614610f345760405162461bcd60e51b8152600401610d4b9061411c565b6000610f3f84611cdd565b509050610f4b81612aaf565b610f885760405162461bcd60e51b815260206004820152600e60248201526d4e6f20626964206f6e676f696e6760901b6044820152606401610d4b565b6000848152600b602090815260408083206001600160c01b0385168452600990925290912060080154600482015560038101805460029283019286929160ff1916906001908490811115610fde57610fde613a3c565b02179055505050505050565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661101681612d24565b6001600160c01b0383166000908152600a60205260409020546001600160401b031661108f5760405162461bcd60e51b815260206004820152602260248201527f4f726967696e616c206d75737420626520696e697469616c697a6564206669726044820152611cdd60f21b6064820152608401610d4b565b6001600160c01b0383166000908152600a6020526040812080546001600160401b031690826110bd8361415f565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555090506110ed8482612777565b92506040518060600160405280848152602001600060ff1681526020016040518060600160405280600081526020016000600281111561112f5761112f613a3c565b81526000602091820181905291909252858152600b825260409081902083518155838301516001808301805460ff90931660ff19938416179055928501518051600280850191825595820151600385018054959793969295919490939116919084908111156111a0576111a0613a3c565b02179055506040918201516002918201556001600160c01b0388166000908152600960205291909120018054600160801b90046001600160801b03169250905060106111eb83614185565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505061121a8584612d2e565b505b5092915050565b61122d3382612d48565b6112495760405162461bcd60e51b8152600401610d4b906141a1565b610dec838383612dc6565b6001600160c01b0381166000908152600e6020526040812054806112b05760405162461bcd60e51b8152602060048201526013602482015272139bc81c995cd85b19481c1c9a58d9481cd95d606a1b6044820152606401610d4b565b6001600160c01b0383166000908152600960205260408120600201546112e1906001600160801b03166127106141ee565b90506112ed8282612f37565b949350505050565b60008281526006602052604090206001015461131081612d24565b610dec8383612f6f565b6113226138ba565b600061132d83611cdd565b506001600160c01b038082166000908152600960209081526040918290208251610140810184528154909416845260018101549184019190915260028101546001600160801b0380821693850193909352600160801b9004909116606083015260038101546080830152600481015460a0830152600581015460c08301526006810180549394509192909160e08401916113c6906140e2565b80601f01602080910402602001604051908101604052809291908181526020018280546113f2906140e2565b801561143f5780601f106114145761010080835404028352916020019161143f565b820191906000526020600020905b81548152906001019060200180831161142257829003601f168201915b5050509183525050600782015460209091019060ff16600181111561146657611466613a3c565b600181111561147757611477613a3c565b8152602001600882015481525050915050919050565b813361149882611d0d565b6001600160a01b0316146114be5760405162461bcd60e51b8152600401610d4b9061411c565b60006114c984611cdd565b506001600160c01b038116600090815260096020526040902060048101549192509084108015906114fe575080600501548411155b61154a5760405162461bcd60e51b815260206004820152601860248201527f4d7573742062652077697468696e207468652072616e676500000000000000006044820152606401610d4b565b5050506000918252600b602052604090912060020155565b6000818152600c602052604090206002600482810154600160501b900460ff169081111561159257611592613a3c565b146115ea5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792072656a656374656420626964732063616e20626520726566756e64604482015261195960f21b6064820152608401610d4b565b6000828152600d6020526040808220549051909190339083908381818185875af1925050503d806000811461163b576040519150601f19603f3d011682016040523d82523d6000602084013e611640565b606091505b50509050806116845760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b6044820152606401610d4b565b5050600401805460ff60501b1916600160521b17905550565b6001600160a01b038116331461170d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610d4b565b6117178282612ff5565b5050565b6000818152600c602052604090206001600482810154600160501b900460ff169081111561174b5761174b613a3c565b1461178f5760405162461bcd60e51b8152602060048201526014602482015273109a59081b5d5cdd081899481858d8d95c1d195960621b6044820152606401610d4b565b60028101546001600160c01b039081166000908152600960209081526040808320600386015481549095168452600e909252918290209290925560078201805460ff19166001908117909155808401549083015491516322dca8bb60e21b81526001600160a01b03918216600482015260248101929092527f00000000000000000000000000000000000000000000000000000000000000001690638b72a2ec90604401600060405180830381600087803b15801561184d57600080fd5b505af1158015611861573d6000803e3d6000fd5b50505050600491909101805460ff60501b1916600360501b1790555050565b610dec83838360405180602001604052806000815250612795565b6000818152600c6020526040812081600482810154600160501b900460ff16908111156118ca576118ca613a3c565b146119235760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206269647320696e2070726f706f73616c2063616e20626520757064604482015263185d195960e21b6064820152608401610d4b565b600481015442906119449064ffffffffff600160281b820481169116614210565b64ffffffffff161061198e5760405162461bcd60e51b815260206004820152601360248201527242696420766f7465206973206f6e676f696e6760681b6044820152606401610d4b565b60028101546119a5906001600160c01b03166123be565b6119b05760026119b3565b60015b81600401600a6101000a81548160ff021916908360048111156119d8576119d8613a3c565b021790555060040154600160501b900460ff1692915050565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6611a1d81612d24565b604051630b02f02d60e31b81526004810188905230906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635817816890602401602060405180830381865afa158015611a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa8919061422e565b6001600160a01b031614611afe5760405162461bcd60e51b815260206004820152601e60248201527f54686520636f6e7472616374206d757374206f776e207468652070756e6b00006044820152606401610d4b565b60088054600090611b17906001600160c01b031661424b565b82546001600160c01b038083166101009490940a848102910219909116179092556000908152600a60205260408120805492945091611b5e906001600160401b031661415f565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550604051806101400160405280836001600160c01b03168152602001888152602001876001600160401b03166001600160801b0316815260200160006001600160801b0316815260200186815260200185815260200184815260200160405180602001604052806000815250815260200160006001811115611c0557611c05613a3c565b8152600060209182018190526001600160c01b038086168252600983526040918290208451815492166001600160c01b031990921691909117815591830151600183015582015160608301516001600160801b03908116600160801b0291161760028201556080820151600382015560a0820151600482015560c0820151600582015560e08201516006820190611c9c90826142b5565b5061010082015160078201805460ff191660018381811115611cc057611cc0613a3c565b021790555061012082015181600801559050505095945050505050565b600080604083901c600160406001611cf59190614374565b6001901b611d039190614387565b9094931692915050565b6000818152600260205260408120546001600160a01b031680610c185760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610d4b565b6001600160c01b0381166000908152600a602052604081205481906001600160401b031660015b816001600160401b0316816001600160401b03161015611e0e576000600b6000611dbe8885612777565b81526020810191909152604001600020600281015490915015611dfb5784611de58161415f565b6002830154909650611df8915085614374565b93505b5080611e068161415f565b915050611d94565b5050915091565b60006001600160a01b038216611e7f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610d4b565b506001600160a01b031660009081526003602052604090205490565b611ea36138ba565b6001600160c01b038083166000908152600960209081526040918290208251610140810184528154909416845260018101549184019190915260028101546001600160801b0380821693850193909352600160801b9004909116606083015260038101546080830152600481015460a0830152600581015460c083015260068101805460e084019190611f35906140e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611f61906140e2565b8015611fae5780601f10611f8357610100808354040283529160200191611fae565b820191906000526020600020905b815481529060010190602001808311611f9157829003601f168201915b5050509183525050600782015460209091019060ff166001811115611fd557611fd5613a3c565b6001811115611fe657611fe6613a3c565b81526020016008820154815250509050919050565b813361200682611d0d565b6001600160a01b03161461202c5760405162461bcd60e51b8152600401610d4b9061411c565b506000918252600b6020526040909120600101805460ff191660ff909216919091179055565b600082816001600160c01b03821660009081526009602052604090206007015460ff16600181111561208657612086613a3c565b146120c05760405162461bcd60e51b815260206004820152600a6024820152694e6f742061637469766560b01b6044820152606401610d4b565b6001600160c01b0384166000908152600960205260409020600481015484108015906120f0575080600501548411155b6121555760405162461bcd60e51b815260206004820152603060248201527f426964207072696365206d7573742062652077697468696e207468652072657360448201526f657276652070726963652072616e676560801b6064820152608401610d4b565b8334146121b25760405162461bcd60e51b815260206004820152602560248201527f4d7573742073656e64207468652065786163742076616c75652061732070726f6044820152641c1bdcd95960da1b6064820152608401610d4b565b600881015480156122375760006121c88261189b565b905060028160048111156121de576121de613a3c565b146122355760405162461bcd60e51b815260206004820152602160248201527f5468652070726576696f757320626964206d7573742062652072656a656374656044820152601960fa1b6064820152608401610d4b565b505b604080519087901b67ffffffffffffffff191660208201523360601b6bffffffffffffffffffffffff191660388201524260d81b6001600160d81b031916604c82015260009060510160408051808303601f19018152828252805160209182012060e084018352808452338285019081526001600160c01b038c8116868601908152606087018d81524264ffffffffff90811660808a0190815262093a8060a08b01908152600060c08c01818152898252600c909a52999099208a51815595516001870180546001600160a01b0319166001600160a01b0390921691909117905592516002860180546001600160c01b03191691909516179093555160038401555160048084018054975192841669ffffffffffffffffffff1990981697909717600160281b92909316919091029190911780865593519296509093919260ff60501b191690600160501b90849081111561239457612394613a3c565b021790555050506000818152600d6020526040902034905560089092018290555091505092915050565b6000806123ca836127cd565b506001600160c01b0384166000908152600960205260409020600201549091506001600160801b03166123ff816113ec612f37565b826001600160401b0316101592505050919050565b6001600160c01b0381166000908152600a602052604081205481906001600160401b031660015b816001600160401b0316816001600160401b031610156124bb5760006124618683612777565b905033612483826000908152600260205260409020546001600160a01b031690565b6001600160a01b0316036124a85761249a8161305c565b836124a48161439a565b9450505b50806124b38161415f565b91505061243b565b506124c584611254565b6124cf90836143b3565b604051909350600090339085908381818185875af1925050503d8060008114612514576040519150601f19603f3d011682016040523d82523d6000602084013e612519565b606091505b505090508061255d5760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b6044820152606401610d4b565b505050919050565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60096020526000908152604090208054600182015460028301546003840154600485015460058601546006870180546001600160c01b039097169795966001600160801b0380871697600160801b909704169591906125ee906140e2565b80601f016020809104026020016040519081016040528092919081815260200182805461261a906140e2565b80156126675780601f1061263c57610100808354040283529160200191612667565b820191906000526020600020905b81548152906001019060200180831161264a57829003601f168201915b505050506007830154600890930154919260ff169190508a565b606060018054610c2d906140e2565b61269861390e565b600b60006126a68585612777565b8152602080820192909252604090810160002081516060808201845282548252600183015460ff908116838701528451918201855260028085018054845260038601549497959688019593949093850192169081111561270857612708613a3c565b600281111561271957612719613a3c565b8152600291909101546020909101529052509392505050565b6117173383836130ff565b600061274881612d24565b6001600160c01b03841660009081526009602052604090206006810161276f8486836143ca565b505050505050565b6001600160401b031660409190911b67ffffffffffffffff19161790565b61279f3383612d48565b6127bb5760405162461bcd60e51b8152600401610d4b906141a1565b6127c7848484846131cd565b50505050565b6000806127d983612aaf565b6127e857506000928392509050565b6001600160c01b0383166000908152600a60209081526040808320546009909252909120600801546001600160401b039091169060015b826001600160401b0316816001600160401b031610156128d9576000600b60006128498985612777565b81526020019081526020016000206002019050828160020154036128c65760018082015460ff16600281111561288157612881613a3c565b0361289857856128908161415f565b9650506128c6565b6002600182015460ff1660028111156128b3576128b3613a3c565b036128c657846128c28161415f565b9550505b50806128d18161415f565b91505061281f565b505050915091565b606060006128ee83611cdd565b506001600160c01b03811660009081526009602052604090209091506001600782015460ff16600181111561292557612925613a3c565b036129be5760078054612937906140e2565b80601f0160208091040260200160405190810160405280929190818152602001828054612963906140e2565b80156129b05780601f10612985576101008083540402835291602001916129b0565b820191906000526020600020905b81548152906001019060200180831161299357829003601f168201915b505050505092505050919050565b60008160060180546129cf906140e2565b80601f01602080910402602001604051908101604052809291908181526020018280546129fb906140e2565b8015612a485780601f10612a1d57610100808354040283529160200191612a48565b820191906000526020600020905b815481529060010190602001808311612a2b57829003601f168201915b5050506000888152600b602052604090206001908101549086015493945060ff1692849250612a779150613200565b612a838360ff16613200565b604051602001612a959392919061448a565b604051602081830303815290604052945050505050919050565b6001600160c01b038116600090815260096020908152604080832060080154808452600c90925282208115801590612af3575060018101546001600160a01b031615155b80156112ed575060048101544290612b1b9064ffffffffff600160281b820481169116614210565b64ffffffffff161015949350505050565b600082815260066020526040902060010154612b4781612d24565b610dec8383612ff5565b600b60209081526000918252604091829020805460018201548451606081019095526002808401805487526003850154939660ff938416969094919390850192911690811115612ba357612ba3613a3c565b6002811115612bb457612bb4613a3c565b8152602001600282015481525050905083565b6000612bd281612d24565b60076127c78385836143ca565b60006001600160e01b031982166380ac58cd60e01b1480612c1057506001600160e01b03198216635b5e139f60e01b145b80610c1857506301ffc9a760e01b6001600160e01b0319831614610c18565b60006001600160e01b03198216637965db0b60e01b1480610c185750610c1882612bdf565b6000818152600260205260409020546001600160a01b0316612cb35760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610d4b565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612ceb82611d0d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b612cb38133613292565b6117178282604051806020016040528060008152506132eb565b600080612d5483611d0d565b9050806001600160a01b0316846001600160a01b03161480612d9b57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806112ed5750836001600160a01b0316612db484610cb0565b6001600160a01b031614949350505050565b826001600160a01b0316612dd982611d0d565b6001600160a01b031614612dff5760405162461bcd60e51b8152600401610d4b906144fb565b6001600160a01b038216612e615760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610d4b565b612e6e838383600161331e565b826001600160a01b0316612e8182611d0d565b6001600160a01b031614612ea75760405162461bcd60e51b8152600401610d4b906144fb565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000612710612f4683856143b3565b1015612f5157600080fd5b612710612f5e83856143b3565b612f6891906141ee565b9392505050565b612f798282612565565b6117175760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612fb13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612fff8282612565565b156117175760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061306782611d0d565b905061307781600084600161331e565b61308082611d0d565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b0316036131605760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610d4b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6131d8848484612dc6565b6131e4848484846133a6565b6127c75760405162461bcd60e51b8152600401610d4b90614540565b6060600061320d8361349c565b60010190506000816001600160401b0381111561322c5761322c613f61565b6040519080825280601f01601f191660200182016040528015613256576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461326057509392505050565b61329c8282612565565b611717576132a981613574565b6132b4836020613586565b6040516020016132c5929190614592565b60408051601f198184030181529082905262461bcd60e51b8252610d4b916004016139cf565b6132f58383613721565b61330260008484846133a6565b610dec5760405162461bcd60e51b8152600401610d4b90614540565b60018111156127c7576001600160a01b03841615613364576001600160a01b0384166000908152600360205260408120805483929061335e908490614387565b90915550505b6001600160a01b038316156127c7576001600160a01b0383166000908152600360205260408120805483929061339b908490614374565b909155505050505050565b60006001600160a01b0384163b15610e6a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906133ea903390899088908890600401614607565b6020604051808303816000875af1925050508015613425575060408051601f3d908101601f1916820190925261342291810190614644565b60015b613482573d808015613453576040519150601f19603f3d011682016040523d82523d6000602084013e613458565b606091505b50805160000361347a5760405162461bcd60e51b8152600401610d4b90614540565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112ed565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106134db5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613507576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061352557662386f26fc10000830492506010015b6305f5e100831061353d576305f5e100830492506008015b612710831061355157612710830492506004015b60648310613563576064830492506002015b600a8310610c185760010192915050565b6060610c186001600160a01b03831660145b606060006135958360026143b3565b6135a0906002614374565b6001600160401b038111156135b7576135b7613f61565b6040519080825280601f01601f1916602001820160405280156135e1576020820181803683370190505b509050600360fc1b816000815181106135fc576135fc614661565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061362b5761362b614661565b60200101906001600160f81b031916908160001a905350600061364f8460026143b3565b61365a906001614374565b90505b60018111156136d2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061368e5761368e614661565b1a60f81b8282815181106136a4576136a4614661565b60200101906001600160f81b031916908160001a90535060049490941c936136cb81614677565b905061365d565b508315612f685760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d4b565b6001600160a01b0382166137775760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610d4b565b6000818152600260205260409020546001600160a01b0316156137dc5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610d4b565b6137ea60008383600161331e565b6000818152600260205260409020546001600160a01b03161561384f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610d4b565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820152906101008201905b8152602001600081525090565b604080516060810182526000808252602082015290810161392d613932565b905290565b604080516060810190915260008082526020820190613901565b6001600160e01b031981168114612cb357600080fd5b60006020828403121561397457600080fd5b8135612f688161394c565b60005b8381101561399a578181015183820152602001613982565b50506000910152565b600081518084526139bb81602086016020860161397f565b601f01601f19169290920160200192915050565b602081526000612f6860208301846139a3565b6000602082840312156139f457600080fd5b5035919050565b6001600160a01b0381168114612cb357600080fd5b60008060408385031215613a2357600080fd5b8235613a2e816139fb565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60038110612cb357612cb3613a3c565b60208101613a6f83613a52565b91905290565b60008060408385031215613a8857600080fd5b82359150602083013560038110613a9e57600080fd5b809150509250929050565b80356001600160c01b0381168114613ac057600080fd5b919050565b60008060408385031215613ad857600080fd5b8235613ae3816139fb565b9150613af160208401613aa9565b90509250929050565b600080600060608486031215613b0f57600080fd5b8335613b1a816139fb565b92506020840135613b2a816139fb565b929592945050506040919091013590565b600060208284031215613b4d57600080fd5b612f6882613aa9565b60008060408385031215613b6957600080fd5b823591506020830135613a9e816139fb565b60028110613b8b57613b8b613a3c565b9052565b60208152613ba96020820183516001600160c01b03169052565b6020820151604082015260006040830151613bcf60608401826001600160801b03169052565b5060608301516001600160801b038116608084015250608083015160a083015260a083015160c083015260c083015160e083015260e08301516101406101008181860152613c216101608601846139a3565b90860151909250610120613c3786820183613b7b565b959095015193019290925250919050565b60008060408385031215613c5b57600080fd5b50508035926020909101359150565b60058110613b8b57613b8b613a3c565b8781526001600160a01b03871660208201526001600160c01b03861660408201526060810185905264ffffffffff8481166080830152831660a082015260e08101613cc860c0830184613c6a565b98975050505050505050565b60208101610c188284613c6a565b80356001600160401b0381168114613ac057600080fd5b600080600080600060a08688031215613d1157600080fd5b85359450613d2160208701613ce2565b94979496505050506040830135926060810135926080909101359150565b600060208284031215613d5157600080fd5b8135612f68816139fb565b60008060408385031215613d6f57600080fd5b82359150602083013560ff81168114613a9e57600080fd5b60008060408385031215613d9a57600080fd5b613a2e83613aa9565b600061014060018060c01b038d1683528b60208401526001600160801b03808c166040850152808b166060850152508860808401528760a08401528660c08401528060e0840152613df6818401876139a3565b915050613e07610100830185613b7b565b826101208301529b9a5050505050505050505050565b60008060408385031215613e3057600080fd5b613e3983613aa9565b9150613af160208401613ce2565b805182526020810151613e5981613a52565b6020830152604090810151910152565b600060a0820190508251825260ff6020840151166020830152604083015161121c6040840182613e47565b60008060408385031215613ea757600080fd5b8235613eb2816139fb565b915060208301358015158114613a9e57600080fd5b60008083601f840112613ed957600080fd5b5081356001600160401b03811115613ef057600080fd5b602083019150836020828501011115613f0857600080fd5b9250929050565b600080600060408486031215613f2457600080fd5b613f2d84613aa9565b925060208401356001600160401b03811115613f4857600080fd5b613f5486828701613ec7565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613f8d57600080fd5b8435613f98816139fb565b93506020850135613fa8816139fb565b92506040850135915060608501356001600160401b0380821115613fcb57600080fd5b818701915087601f830112613fdf57600080fd5b813581811115613ff157613ff1613f61565b604051601f8201601f19908116603f0116810190838211818310171561401957614019613f61565b816040528281528a602084870101111561403257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b83815260ff8316602082015260a081016112ed6040830184613e47565b6000806040838503121561408657600080fd5b8235614091816139fb565b91506020830135613a9e816139fb565b600080602083850312156140b457600080fd5b82356001600160401b038111156140ca57600080fd5b6140d685828601613ec7565b90969095509350505050565b600181811c908216806140f657607f821691505b60208210810361411657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601390820152724d757374206f776e20746865204d6f7361696360681b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681810361417b5761417b614149565b6001019392505050565b60006001600160801b0380831681810361417b5761417b614149565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60008261420b57634e487b7160e01b600052601260045260246000fd5b500490565b64ffffffffff81811683821601908082111561121c5761121c614149565b60006020828403121561424057600080fd5b8151612f68816139fb565b60006001600160c01b038281166002600160c01b0319810161417b5761417b614149565b601f821115610dec57600081815260208120601f850160051c810160208610156142965750805b601f850160051c820191505b8181101561276f578281556001016142a2565b81516001600160401b038111156142ce576142ce613f61565b6142e2816142dc84546140e2565b8461426f565b602080601f83116001811461431757600084156142ff5750858301515b600019600386901b1c1916600185901b17855561276f565b600085815260208120601f198616915b8281101561434657888601518255948401946001909101908401614327565b50858210156143645787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115610c1857610c18614149565b81810381811115610c1857610c18614149565b6000600182016143ac576143ac614149565b5060010190565b8082028115828204841417610c1857610c18614149565b6001600160401b038311156143e1576143e1613f61565b6143f5836143ef83546140e2565b8361426f565b6000601f84116001811461442957600085156144115750838201355b600019600387901b1c1916600186901b178355614483565b600083815260209020601f19861690835b8281101561445a578685013582556020948501946001909201910161443a565b50868210156144775760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6000845161449c81846020890161397f565b602f60f81b90830190815284516144ba81600184016020890161397f565b605f60f81b6001929091019182015283516144dc81600284016020880161397f565b64173539b7b760d91b6002929091019182015260070195945050505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516145ca81601785016020880161397f565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516145fb81602884016020880161397f565b01602801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061463a908301846139a3565b9695505050505050565b60006020828403121561465657600080fd5b8151612f688161394c565b634e487b7160e01b600052603260045260246000fd5b60008161468657614686614149565b50600019019056fea2646970667358221220acbf13f0c5a6b9ce935eae9586f91c52db32f6cf3d7a27673d2bbcc0a5f2d51d64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103355760003560e01c806376016f4b116101ab578063a5627d9a116100f7578063d0d851d011610095578063d547741f1161006f578063d547741f14610b46578063e6428a2b14610b66578063e985e9c514610b95578063f3c340cd14610bde57600080fd5b8063d0d851d014610abe578063d42de9aa14610af2578063d539139314610b1257600080fd5b8063b88d4fde116100d1578063b88d4fde14610a11578063bf4dc67514610a31578063c01efa5314610a5e578063c87b56dd14610a9e57600080fd5b8063a5627d9a146109a4578063ac8d6168146109c4578063af4a6c0c146109f157600080fd5b80639399280811610164578063993a37901161013e578063993a3790146108f4578063a217fddf14610921578063a22cb46514610936578063a39147ab1461095657600080fd5b8063939928081461087c57806395d89b41146108b2578063970525dd146108c757600080fd5b806376016f4b146107c957806379c07a39146107e957806379f5f153146108095780638310a7da1461081c5780638902436a1461083c57806391d148541461085c57600080fd5b8063326d0367116102855780634c905789116102235780635d7b88f6116101fd5780635d7b88f61461072a5780636352211e1461074a57806364f4e5ef1461076a57806370a08231146107a957600080fd5b80634c9057891461067e578063512137ed146106ab57806354cefb23146106e357600080fd5b80633a0e75551161025f5780633a0e75551461059857806342842e0e146105b85780634423c5f1146105d85780634bb722c61461066857600080fd5b8063326d036714610538578063342834f71461055857806336568abe1461057857600080fd5b80631df46de7116102f2578063248a9ca3116102cc578063248a9ca31461049b5780632594c224146104cb5780632f2ff15d146104eb57806331e781da1461050b57600080fd5b80631df46de71461042d5780632062f2e41461044d57806323b872dd1461047b57600080fd5b806301ffc9a71461033a57806306fdde031461036f578063081812fc14610391578063095ea7b3146103c95780630e6a929c146103eb57806318d6a5e714610418575b600080fd5b34801561034657600080fd5b5061035a610355366004613962565b610bfe565b60405190151581526020015b60405180910390f35b34801561037b57600080fd5b50610384610c1e565b60405161036691906139cf565b34801561039d57600080fd5b506103b16103ac3660046139e2565b610cb0565b6040516001600160a01b039091168152602001610366565b3480156103d557600080fd5b506103e96103e4366004613a10565b610cd7565b005b3480156103f757600080fd5b5061040b6104063660046139e2565b610df1565b6040516103669190613a62565b34801561042457600080fd5b50610384610e75565b34801561043957600080fd5b506103e9610448366004613a75565b610f03565b34801561045957600080fd5b5061046d610468366004613ac5565b610fea565b604051908152602001610366565b34801561048757600080fd5b506103e9610496366004613afa565b611223565b3480156104a757600080fd5b5061046d6104b63660046139e2565b60009081526006602052604090206001015490565b3480156104d757600080fd5b5061046d6104e6366004613b3b565b611254565b3480156104f757600080fd5b506103e9610506366004613b56565b6112f5565b34801561051757600080fd5b5061052b6105263660046139e2565b61131a565b6040516103669190613b8f565b34801561054457600080fd5b506103e9610553366004613c48565b61148d565b34801561056457600080fd5b506103e96105733660046139e2565b611562565b34801561058457600080fd5b506103e9610593366004613b56565b61169d565b3480156105a457600080fd5b506103e96105b33660046139e2565b61171b565b3480156105c457600080fd5b506103e96105d3366004613afa565b611880565b3480156105e457600080fd5b506106556105f33660046139e2565b600c602052600090815260409020805460018201546002830154600384015460049094015492936001600160a01b03909216926001600160c01b03909116919064ffffffffff80821691600160281b810490911690600160501b900460ff1687565b6040516103669796959493929190613c7a565b34801561067457600080fd5b5061046d6113ec81565b34801561068a57600080fd5b5061069e6106993660046139e2565b61189b565b6040516103669190613cd4565b3480156106b757600080fd5b506106cb6106c6366004613cf9565b6119f1565b6040516001600160c01b039091168152602001610366565b3480156106ef57600080fd5b506107036106fe3660046139e2565b611cdd565b604080516001600160c01b0390931683526001600160401b03909116602083015201610366565b34801561073657600080fd5b506008546106cb906001600160c01b031681565b34801561075657600080fd5b506103b16107653660046139e2565b611d0d565b34801561077657600080fd5b5061078a610785366004613b3b565b611d6d565b604080516001600160401b039093168352602083019190915201610366565b3480156107b557600080fd5b5061046d6107c4366004613d3f565b611e15565b3480156107d557600080fd5b5061052b6107e4366004613b3b565b611e9b565b3480156107f557600080fd5b506103e9610804366004613d5c565b611ffb565b61046d610817366004613d87565b612052565b34801561082857600080fd5b5061035a610837366004613b3b565b6123be565b34801561084857600080fd5b5061046d610857366004613b3b565b612414565b34801561086857600080fd5b5061035a610877366004613b56565b612565565b34801561088857600080fd5b5061089c610897366004613b3b565b612590565b6040516103669a99989796959493929190613da3565b3480156108be57600080fd5b50610384612681565b3480156108d357600080fd5b506108e76108e2366004613e1d565b612690565b6040516103669190613e69565b34801561090057600080fd5b5061046d61090f366004613b3b565b600e6020526000908152604090205481565b34801561092d57600080fd5b5061046d600081565b34801561094257600080fd5b506103e9610951366004613e94565b612732565b34801561096257600080fd5b5061098c610971366004613b3b565b600a602052600090815260409020546001600160401b031681565b6040516001600160401b039091168152602001610366565b3480156109b057600080fd5b506103e96109bf366004613f0f565b61273d565b3480156109d057600080fd5b506109db62093a8081565b60405164ffffffffff9091168152602001610366565b3480156109fd57600080fd5b5061046d610a0c366004613e1d565b612777565b348015610a1d57600080fd5b506103e9610a2c366004613f77565b612795565b348015610a3d57600080fd5b5061046d610a4c3660046139e2565b600d6020526000908152604090205481565b348015610a6a57600080fd5b50610a7e610a79366004613b3b565b6127cd565b604080516001600160401b03938416815292909116602083015201610366565b348015610aaa57600080fd5b50610384610ab93660046139e2565b6128e1565b348015610aca57600080fd5b506103b17f000000000000000000000000000000000000000000000000000000000000000081565b348015610afe57600080fd5b5061035a610b0d366004613b3b565b612aaf565b348015610b1e57600080fd5b5061046d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b348015610b5257600080fd5b506103e9610b61366004613b56565b612b2c565b348015610b7257600080fd5b50610b86610b813660046139e2565b612b51565b60405161036693929190614056565b348015610ba157600080fd5b5061035a610bb0366004614073565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610bea57600080fd5b506103e9610bf93660046140a1565b612bc7565b6000610c0982612bdf565b80610c185750610c1882612c2f565b92915050565b606060008054610c2d906140e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610c59906140e2565b8015610ca65780601f10610c7b57610100808354040283529160200191610ca6565b820191906000526020600020905b815481529060010190602001808311610c8957829003601f168201915b5050505050905090565b6000610cbb82612c54565b506000908152600460205260409020546001600160a01b031690565b6000610ce282611d0d565b9050806001600160a01b0316836001600160a01b031603610d545760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610d705750610d708133610bb0565b610de25760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610d4b565b610dec8383612cb6565b505050565b6000818152600b6020526040812081610e0984611cdd565b506001600160c01b03811660009081526009602052604090209091506001600782015460ff166001811115610e4057610e40613a3c565b03610e5057506002949350505050565b600183015460ff16600003610e6a57506000949350505050565b506001949350505050565b60078054610e82906140e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610eae906140e2565b8015610efb5780601f10610ed057610100808354040283529160200191610efb565b820191906000526020600020905b815481529060010190602001808311610ede57829003601f168201915b505050505081565b8133610f0e82611d0d565b6001600160a01b031614610f345760405162461bcd60e51b8152600401610d4b9061411c565b6000610f3f84611cdd565b509050610f4b81612aaf565b610f885760405162461bcd60e51b815260206004820152600e60248201526d4e6f20626964206f6e676f696e6760901b6044820152606401610d4b565b6000848152600b602090815260408083206001600160c01b0385168452600990925290912060080154600482015560038101805460029283019286929160ff1916906001908490811115610fde57610fde613a3c565b02179055505050505050565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661101681612d24565b6001600160c01b0383166000908152600a60205260409020546001600160401b031661108f5760405162461bcd60e51b815260206004820152602260248201527f4f726967696e616c206d75737420626520696e697469616c697a6564206669726044820152611cdd60f21b6064820152608401610d4b565b6001600160c01b0383166000908152600a6020526040812080546001600160401b031690826110bd8361415f565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555090506110ed8482612777565b92506040518060600160405280848152602001600060ff1681526020016040518060600160405280600081526020016000600281111561112f5761112f613a3c565b81526000602091820181905291909252858152600b825260409081902083518155838301516001808301805460ff90931660ff19938416179055928501518051600280850191825595820151600385018054959793969295919490939116919084908111156111a0576111a0613a3c565b02179055506040918201516002918201556001600160c01b0388166000908152600960205291909120018054600160801b90046001600160801b03169250905060106111eb83614185565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505061121a8584612d2e565b505b5092915050565b61122d3382612d48565b6112495760405162461bcd60e51b8152600401610d4b906141a1565b610dec838383612dc6565b6001600160c01b0381166000908152600e6020526040812054806112b05760405162461bcd60e51b8152602060048201526013602482015272139bc81c995cd85b19481c1c9a58d9481cd95d606a1b6044820152606401610d4b565b6001600160c01b0383166000908152600960205260408120600201546112e1906001600160801b03166127106141ee565b90506112ed8282612f37565b949350505050565b60008281526006602052604090206001015461131081612d24565b610dec8383612f6f565b6113226138ba565b600061132d83611cdd565b506001600160c01b038082166000908152600960209081526040918290208251610140810184528154909416845260018101549184019190915260028101546001600160801b0380821693850193909352600160801b9004909116606083015260038101546080830152600481015460a0830152600581015460c08301526006810180549394509192909160e08401916113c6906140e2565b80601f01602080910402602001604051908101604052809291908181526020018280546113f2906140e2565b801561143f5780601f106114145761010080835404028352916020019161143f565b820191906000526020600020905b81548152906001019060200180831161142257829003601f168201915b5050509183525050600782015460209091019060ff16600181111561146657611466613a3c565b600181111561147757611477613a3c565b8152602001600882015481525050915050919050565b813361149882611d0d565b6001600160a01b0316146114be5760405162461bcd60e51b8152600401610d4b9061411c565b60006114c984611cdd565b506001600160c01b038116600090815260096020526040902060048101549192509084108015906114fe575080600501548411155b61154a5760405162461bcd60e51b815260206004820152601860248201527f4d7573742062652077697468696e207468652072616e676500000000000000006044820152606401610d4b565b5050506000918252600b602052604090912060020155565b6000818152600c602052604090206002600482810154600160501b900460ff169081111561159257611592613a3c565b146115ea5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c792072656a656374656420626964732063616e20626520726566756e64604482015261195960f21b6064820152608401610d4b565b6000828152600d6020526040808220549051909190339083908381818185875af1925050503d806000811461163b576040519150601f19603f3d011682016040523d82523d6000602084013e611640565b606091505b50509050806116845760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b6044820152606401610d4b565b5050600401805460ff60501b1916600160521b17905550565b6001600160a01b038116331461170d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610d4b565b6117178282612ff5565b5050565b6000818152600c602052604090206001600482810154600160501b900460ff169081111561174b5761174b613a3c565b1461178f5760405162461bcd60e51b8152602060048201526014602482015273109a59081b5d5cdd081899481858d8d95c1d195960621b6044820152606401610d4b565b60028101546001600160c01b039081166000908152600960209081526040808320600386015481549095168452600e909252918290209290925560078201805460ff19166001908117909155808401549083015491516322dca8bb60e21b81526001600160a01b03918216600482015260248101929092527f00000000000000000000000000000000000000000000000000000000000000001690638b72a2ec90604401600060405180830381600087803b15801561184d57600080fd5b505af1158015611861573d6000803e3d6000fd5b50505050600491909101805460ff60501b1916600360501b1790555050565b610dec83838360405180602001604052806000815250612795565b6000818152600c6020526040812081600482810154600160501b900460ff16908111156118ca576118ca613a3c565b146119235760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206269647320696e2070726f706f73616c2063616e20626520757064604482015263185d195960e21b6064820152608401610d4b565b600481015442906119449064ffffffffff600160281b820481169116614210565b64ffffffffff161061198e5760405162461bcd60e51b815260206004820152601360248201527242696420766f7465206973206f6e676f696e6760681b6044820152606401610d4b565b60028101546119a5906001600160c01b03166123be565b6119b05760026119b3565b60015b81600401600a6101000a81548160ff021916908360048111156119d8576119d8613a3c565b021790555060040154600160501b900460ff1692915050565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6611a1d81612d24565b604051630b02f02d60e31b81526004810188905230906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635817816890602401602060405180830381865afa158015611a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa8919061422e565b6001600160a01b031614611afe5760405162461bcd60e51b815260206004820152601e60248201527f54686520636f6e7472616374206d757374206f776e207468652070756e6b00006044820152606401610d4b565b60088054600090611b17906001600160c01b031661424b565b82546001600160c01b038083166101009490940a848102910219909116179092556000908152600a60205260408120805492945091611b5e906001600160401b031661415f565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550604051806101400160405280836001600160c01b03168152602001888152602001876001600160401b03166001600160801b0316815260200160006001600160801b0316815260200186815260200185815260200184815260200160405180602001604052806000815250815260200160006001811115611c0557611c05613a3c565b8152600060209182018190526001600160c01b038086168252600983526040918290208451815492166001600160c01b031990921691909117815591830151600183015582015160608301516001600160801b03908116600160801b0291161760028201556080820151600382015560a0820151600482015560c0820151600582015560e08201516006820190611c9c90826142b5565b5061010082015160078201805460ff191660018381811115611cc057611cc0613a3c565b021790555061012082015181600801559050505095945050505050565b600080604083901c600160406001611cf59190614374565b6001901b611d039190614387565b9094931692915050565b6000818152600260205260408120546001600160a01b031680610c185760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610d4b565b6001600160c01b0381166000908152600a602052604081205481906001600160401b031660015b816001600160401b0316816001600160401b03161015611e0e576000600b6000611dbe8885612777565b81526020810191909152604001600020600281015490915015611dfb5784611de58161415f565b6002830154909650611df8915085614374565b93505b5080611e068161415f565b915050611d94565b5050915091565b60006001600160a01b038216611e7f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610d4b565b506001600160a01b031660009081526003602052604090205490565b611ea36138ba565b6001600160c01b038083166000908152600960209081526040918290208251610140810184528154909416845260018101549184019190915260028101546001600160801b0380821693850193909352600160801b9004909116606083015260038101546080830152600481015460a0830152600581015460c083015260068101805460e084019190611f35906140e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611f61906140e2565b8015611fae5780601f10611f8357610100808354040283529160200191611fae565b820191906000526020600020905b815481529060010190602001808311611f9157829003601f168201915b5050509183525050600782015460209091019060ff166001811115611fd557611fd5613a3c565b6001811115611fe657611fe6613a3c565b81526020016008820154815250509050919050565b813361200682611d0d565b6001600160a01b03161461202c5760405162461bcd60e51b8152600401610d4b9061411c565b506000918252600b6020526040909120600101805460ff191660ff909216919091179055565b600082816001600160c01b03821660009081526009602052604090206007015460ff16600181111561208657612086613a3c565b146120c05760405162461bcd60e51b815260206004820152600a6024820152694e6f742061637469766560b01b6044820152606401610d4b565b6001600160c01b0384166000908152600960205260409020600481015484108015906120f0575080600501548411155b6121555760405162461bcd60e51b815260206004820152603060248201527f426964207072696365206d7573742062652077697468696e207468652072657360448201526f657276652070726963652072616e676560801b6064820152608401610d4b565b8334146121b25760405162461bcd60e51b815260206004820152602560248201527f4d7573742073656e64207468652065786163742076616c75652061732070726f6044820152641c1bdcd95960da1b6064820152608401610d4b565b600881015480156122375760006121c88261189b565b905060028160048111156121de576121de613a3c565b146122355760405162461bcd60e51b815260206004820152602160248201527f5468652070726576696f757320626964206d7573742062652072656a656374656044820152601960fa1b6064820152608401610d4b565b505b604080519087901b67ffffffffffffffff191660208201523360601b6bffffffffffffffffffffffff191660388201524260d81b6001600160d81b031916604c82015260009060510160408051808303601f19018152828252805160209182012060e084018352808452338285019081526001600160c01b038c8116868601908152606087018d81524264ffffffffff90811660808a0190815262093a8060a08b01908152600060c08c01818152898252600c909a52999099208a51815595516001870180546001600160a01b0319166001600160a01b0390921691909117905592516002860180546001600160c01b03191691909516179093555160038401555160048084018054975192841669ffffffffffffffffffff1990981697909717600160281b92909316919091029190911780865593519296509093919260ff60501b191690600160501b90849081111561239457612394613a3c565b021790555050506000818152600d6020526040902034905560089092018290555091505092915050565b6000806123ca836127cd565b506001600160c01b0384166000908152600960205260409020600201549091506001600160801b03166123ff816113ec612f37565b826001600160401b0316101592505050919050565b6001600160c01b0381166000908152600a602052604081205481906001600160401b031660015b816001600160401b0316816001600160401b031610156124bb5760006124618683612777565b905033612483826000908152600260205260409020546001600160a01b031690565b6001600160a01b0316036124a85761249a8161305c565b836124a48161439a565b9450505b50806124b38161415f565b91505061243b565b506124c584611254565b6124cf90836143b3565b604051909350600090339085908381818185875af1925050503d8060008114612514576040519150601f19603f3d011682016040523d82523d6000602084013e612519565b606091505b505090508061255d5760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b6044820152606401610d4b565b505050919050565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60096020526000908152604090208054600182015460028301546003840154600485015460058601546006870180546001600160c01b039097169795966001600160801b0380871697600160801b909704169591906125ee906140e2565b80601f016020809104026020016040519081016040528092919081815260200182805461261a906140e2565b80156126675780601f1061263c57610100808354040283529160200191612667565b820191906000526020600020905b81548152906001019060200180831161264a57829003601f168201915b505050506007830154600890930154919260ff169190508a565b606060018054610c2d906140e2565b61269861390e565b600b60006126a68585612777565b8152602080820192909252604090810160002081516060808201845282548252600183015460ff908116838701528451918201855260028085018054845260038601549497959688019593949093850192169081111561270857612708613a3c565b600281111561271957612719613a3c565b8152600291909101546020909101529052509392505050565b6117173383836130ff565b600061274881612d24565b6001600160c01b03841660009081526009602052604090206006810161276f8486836143ca565b505050505050565b6001600160401b031660409190911b67ffffffffffffffff19161790565b61279f3383612d48565b6127bb5760405162461bcd60e51b8152600401610d4b906141a1565b6127c7848484846131cd565b50505050565b6000806127d983612aaf565b6127e857506000928392509050565b6001600160c01b0383166000908152600a60209081526040808320546009909252909120600801546001600160401b039091169060015b826001600160401b0316816001600160401b031610156128d9576000600b60006128498985612777565b81526020019081526020016000206002019050828160020154036128c65760018082015460ff16600281111561288157612881613a3c565b0361289857856128908161415f565b9650506128c6565b6002600182015460ff1660028111156128b3576128b3613a3c565b036128c657846128c28161415f565b9550505b50806128d18161415f565b91505061281f565b505050915091565b606060006128ee83611cdd565b506001600160c01b03811660009081526009602052604090209091506001600782015460ff16600181111561292557612925613a3c565b036129be5760078054612937906140e2565b80601f0160208091040260200160405190810160405280929190818152602001828054612963906140e2565b80156129b05780601f10612985576101008083540402835291602001916129b0565b820191906000526020600020905b81548152906001019060200180831161299357829003601f168201915b505050505092505050919050565b60008160060180546129cf906140e2565b80601f01602080910402602001604051908101604052809291908181526020018280546129fb906140e2565b8015612a485780601f10612a1d57610100808354040283529160200191612a48565b820191906000526020600020905b815481529060010190602001808311612a2b57829003601f168201915b5050506000888152600b602052604090206001908101549086015493945060ff1692849250612a779150613200565b612a838360ff16613200565b604051602001612a959392919061448a565b604051602081830303815290604052945050505050919050565b6001600160c01b038116600090815260096020908152604080832060080154808452600c90925282208115801590612af3575060018101546001600160a01b031615155b80156112ed575060048101544290612b1b9064ffffffffff600160281b820481169116614210565b64ffffffffff161015949350505050565b600082815260066020526040902060010154612b4781612d24565b610dec8383612ff5565b600b60209081526000918252604091829020805460018201548451606081019095526002808401805487526003850154939660ff938416969094919390850192911690811115612ba357612ba3613a3c565b6002811115612bb457612bb4613a3c565b8152602001600282015481525050905083565b6000612bd281612d24565b60076127c78385836143ca565b60006001600160e01b031982166380ac58cd60e01b1480612c1057506001600160e01b03198216635b5e139f60e01b145b80610c1857506301ffc9a760e01b6001600160e01b0319831614610c18565b60006001600160e01b03198216637965db0b60e01b1480610c185750610c1882612bdf565b6000818152600260205260409020546001600160a01b0316612cb35760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610d4b565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612ceb82611d0d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b612cb38133613292565b6117178282604051806020016040528060008152506132eb565b600080612d5483611d0d565b9050806001600160a01b0316846001600160a01b03161480612d9b57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806112ed5750836001600160a01b0316612db484610cb0565b6001600160a01b031614949350505050565b826001600160a01b0316612dd982611d0d565b6001600160a01b031614612dff5760405162461bcd60e51b8152600401610d4b906144fb565b6001600160a01b038216612e615760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610d4b565b612e6e838383600161331e565b826001600160a01b0316612e8182611d0d565b6001600160a01b031614612ea75760405162461bcd60e51b8152600401610d4b906144fb565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000612710612f4683856143b3565b1015612f5157600080fd5b612710612f5e83856143b3565b612f6891906141ee565b9392505050565b612f798282612565565b6117175760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612fb13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612fff8282612565565b156117175760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061306782611d0d565b905061307781600084600161331e565b61308082611d0d565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b0316036131605760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610d4b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6131d8848484612dc6565b6131e4848484846133a6565b6127c75760405162461bcd60e51b8152600401610d4b90614540565b6060600061320d8361349c565b60010190506000816001600160401b0381111561322c5761322c613f61565b6040519080825280601f01601f191660200182016040528015613256576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461326057509392505050565b61329c8282612565565b611717576132a981613574565b6132b4836020613586565b6040516020016132c5929190614592565b60408051601f198184030181529082905262461bcd60e51b8252610d4b916004016139cf565b6132f58383613721565b61330260008484846133a6565b610dec5760405162461bcd60e51b8152600401610d4b90614540565b60018111156127c7576001600160a01b03841615613364576001600160a01b0384166000908152600360205260408120805483929061335e908490614387565b90915550505b6001600160a01b038316156127c7576001600160a01b0383166000908152600360205260408120805483929061339b908490614374565b909155505050505050565b60006001600160a01b0384163b15610e6a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906133ea903390899088908890600401614607565b6020604051808303816000875af1925050508015613425575060408051601f3d908101601f1916820190925261342291810190614644565b60015b613482573d808015613453576040519150601f19603f3d011682016040523d82523d6000602084013e613458565b606091505b50805160000361347a5760405162461bcd60e51b8152600401610d4b90614540565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112ed565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106134db5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613507576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061352557662386f26fc10000830492506010015b6305f5e100831061353d576305f5e100830492506008015b612710831061355157612710830492506004015b60648310613563576064830492506002015b600a8310610c185760010192915050565b6060610c186001600160a01b03831660145b606060006135958360026143b3565b6135a0906002614374565b6001600160401b038111156135b7576135b7613f61565b6040519080825280601f01601f1916602001820160405280156135e1576020820181803683370190505b509050600360fc1b816000815181106135fc576135fc614661565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061362b5761362b614661565b60200101906001600160f81b031916908160001a905350600061364f8460026143b3565b61365a906001614374565b90505b60018111156136d2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061368e5761368e614661565b1a60f81b8282815181106136a4576136a4614661565b60200101906001600160f81b031916908160001a90535060049490941c936136cb81614677565b905061365d565b508315612f685760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d4b565b6001600160a01b0382166137775760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610d4b565b6000818152600260205260409020546001600160a01b0316156137dc5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610d4b565b6137ea60008383600161331e565b6000818152600260205260409020546001600160a01b03161561384f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610d4b565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820152906101008201905b8152602001600081525090565b604080516060810182526000808252602082015290810161392d613932565b905290565b604080516060810190915260008082526020820190613901565b6001600160e01b031981168114612cb357600080fd5b60006020828403121561397457600080fd5b8135612f688161394c565b60005b8381101561399a578181015183820152602001613982565b50506000910152565b600081518084526139bb81602086016020860161397f565b601f01601f19169290920160200192915050565b602081526000612f6860208301846139a3565b6000602082840312156139f457600080fd5b5035919050565b6001600160a01b0381168114612cb357600080fd5b60008060408385031215613a2357600080fd5b8235613a2e816139fb565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b60038110612cb357612cb3613a3c565b60208101613a6f83613a52565b91905290565b60008060408385031215613a8857600080fd5b82359150602083013560038110613a9e57600080fd5b809150509250929050565b80356001600160c01b0381168114613ac057600080fd5b919050565b60008060408385031215613ad857600080fd5b8235613ae3816139fb565b9150613af160208401613aa9565b90509250929050565b600080600060608486031215613b0f57600080fd5b8335613b1a816139fb565b92506020840135613b2a816139fb565b929592945050506040919091013590565b600060208284031215613b4d57600080fd5b612f6882613aa9565b60008060408385031215613b6957600080fd5b823591506020830135613a9e816139fb565b60028110613b8b57613b8b613a3c565b9052565b60208152613ba96020820183516001600160c01b03169052565b6020820151604082015260006040830151613bcf60608401826001600160801b03169052565b5060608301516001600160801b038116608084015250608083015160a083015260a083015160c083015260c083015160e083015260e08301516101406101008181860152613c216101608601846139a3565b90860151909250610120613c3786820183613b7b565b959095015193019290925250919050565b60008060408385031215613c5b57600080fd5b50508035926020909101359150565b60058110613b8b57613b8b613a3c565b8781526001600160a01b03871660208201526001600160c01b03861660408201526060810185905264ffffffffff8481166080830152831660a082015260e08101613cc860c0830184613c6a565b98975050505050505050565b60208101610c188284613c6a565b80356001600160401b0381168114613ac057600080fd5b600080600080600060a08688031215613d1157600080fd5b85359450613d2160208701613ce2565b94979496505050506040830135926060810135926080909101359150565b600060208284031215613d5157600080fd5b8135612f68816139fb565b60008060408385031215613d6f57600080fd5b82359150602083013560ff81168114613a9e57600080fd5b60008060408385031215613d9a57600080fd5b613a2e83613aa9565b600061014060018060c01b038d1683528b60208401526001600160801b03808c166040850152808b166060850152508860808401528760a08401528660c08401528060e0840152613df6818401876139a3565b915050613e07610100830185613b7b565b826101208301529b9a5050505050505050505050565b60008060408385031215613e3057600080fd5b613e3983613aa9565b9150613af160208401613ce2565b805182526020810151613e5981613a52565b6020830152604090810151910152565b600060a0820190508251825260ff6020840151166020830152604083015161121c6040840182613e47565b60008060408385031215613ea757600080fd5b8235613eb2816139fb565b915060208301358015158114613a9e57600080fd5b60008083601f840112613ed957600080fd5b5081356001600160401b03811115613ef057600080fd5b602083019150836020828501011115613f0857600080fd5b9250929050565b600080600060408486031215613f2457600080fd5b613f2d84613aa9565b925060208401356001600160401b03811115613f4857600080fd5b613f5486828701613ec7565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215613f8d57600080fd5b8435613f98816139fb565b93506020850135613fa8816139fb565b92506040850135915060608501356001600160401b0380821115613fcb57600080fd5b818701915087601f830112613fdf57600080fd5b813581811115613ff157613ff1613f61565b604051601f8201601f19908116603f0116810190838211818310171561401957614019613f61565b816040528281528a602084870101111561403257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b83815260ff8316602082015260a081016112ed6040830184613e47565b6000806040838503121561408657600080fd5b8235614091816139fb565b91506020830135613a9e816139fb565b600080602083850312156140b457600080fd5b82356001600160401b038111156140ca57600080fd5b6140d685828601613ec7565b90969095509350505050565b600181811c908216806140f657607f821691505b60208210810361411657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601390820152724d757374206f776e20746865204d6f7361696360681b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681810361417b5761417b614149565b6001019392505050565b60006001600160801b0380831681810361417b5761417b614149565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60008261420b57634e487b7160e01b600052601260045260246000fd5b500490565b64ffffffffff81811683821601908082111561121c5761121c614149565b60006020828403121561424057600080fd5b8151612f68816139fb565b60006001600160c01b038281166002600160c01b0319810161417b5761417b614149565b601f821115610dec57600081815260208120601f850160051c810160208610156142965750805b601f850160051c820191505b8181101561276f578281556001016142a2565b81516001600160401b038111156142ce576142ce613f61565b6142e2816142dc84546140e2565b8461426f565b602080601f83116001811461431757600084156142ff5750858301515b600019600386901b1c1916600185901b17855561276f565b600085815260208120601f198616915b8281101561434657888601518255948401946001909101908401614327565b50858210156143645787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115610c1857610c18614149565b81810381811115610c1857610c18614149565b6000600182016143ac576143ac614149565b5060010190565b8082028115828204841417610c1857610c18614149565b6001600160401b038311156143e1576143e1613f61565b6143f5836143ef83546140e2565b8361426f565b6000601f84116001811461442957600085156144115750838201355b600019600387901b1c1916600186901b178355614483565b600083815260209020601f19861690835b8281101561445a578685013582556020948501946001909201910161443a565b50868210156144775760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6000845161449c81846020890161397f565b602f60f81b90830190815284516144ba81600184016020890161397f565b605f60f81b6001929091019182015283516144dc81600284016020880161397f565b64173539b7b760d91b6002929091019182015260070195945050505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516145ca81601785016020880161397f565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516145fb81602884016020880161397f565b01602801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061463a908301846139a3565b9695505050505050565b60006020828403121561465657600080fd5b8151612f688161394c565b634e487b7160e01b600052603260045260246000fd5b60008161468657614686614149565b50600019019056fea2646970667358221220acbf13f0c5a6b9ce935eae9586f91c52db32f6cf3d7a27673d2bbcc0a5f2d51d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1869,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1871,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1875,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1879,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1883,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1889,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 24,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 6887,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "invalidMetadataUri",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 6889,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "latestOriginalId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint192"
      },
      {
        "astId": 6894,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "originals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint192,t_struct(Original)8332_storage)"
      },
      {
        "astId": 6898,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "latestMonoIds",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint192,t_uint64)"
      },
      {
        "astId": 6903,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "monos",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Mono)8343_storage)"
      },
      {
        "astId": 6908,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "bids",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Bid)8375_storage)"
      },
      {
        "astId": 6912,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "bidDeposits",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6916,
        "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
        "label": "resalePrices",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint192,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(BidState)8381": {
        "encoding": "inplace",
        "label": "enum UsingCryptoPunksMosaicRegistryStructs.BidState",
        "numberOfBytes": "1"
      },
      "t_enum(MonoBidResponse)8359": {
        "encoding": "inplace",
        "label": "enum UsingCryptoPunksMosaicRegistryStructs.MonoBidResponse",
        "numberOfBytes": "1"
      },
      "t_enum(OriginalStatus)8335": {
        "encoding": "inplace",
        "label": "enum UsingCryptoPunksMosaicRegistryStructs.OriginalStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint192,t_struct(Original)8332_storage)": {
        "encoding": "mapping",
        "key": "t_uint192",
        "label": "mapping(uint192 => struct UsingCryptoPunksMosaicRegistryStructs.Original)",
        "numberOfBytes": "32",
        "value": "t_struct(Original)8332_storage"
      },
      "t_mapping(t_uint192,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint192",
        "label": "mapping(uint192 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint192,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint192",
        "label": "mapping(uint192 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Bid)8375_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UsingCryptoPunksMosaicRegistryStructs.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)8375_storage"
      },
      "t_mapping(t_uint256,t_struct(Mono)8343_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct UsingCryptoPunksMosaicRegistryStructs.Mono)",
        "numberOfBytes": "32",
        "value": "t_struct(Mono)8343_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bid)8375_storage": {
        "encoding": "inplace",
        "label": "struct UsingCryptoPunksMosaicRegistryStructs.Bid",
        "members": [
          {
            "astId": 8361,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8363,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "bidder",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 8365,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "originalId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint192"
          },
          {
            "astId": 8367,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8369,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "createdAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint40"
          },
          {
            "astId": 8371,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "expiry",
            "offset": 5,
            "slot": "4",
            "type": "t_uint40"
          },
          {
            "astId": 8374,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "state",
            "offset": 10,
            "slot": "4",
            "type": "t_enum(BidState)8381"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Mono)8343_storage": {
        "encoding": "inplace",
        "label": "struct UsingCryptoPunksMosaicRegistryStructs.Mono",
        "members": [
          {
            "astId": 8337,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "mosaicId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8339,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "presetId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 8342,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "governanceOptions",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(MonoGovernanceOptions)8355_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(MonoGovernanceOptions)8355_storage": {
        "encoding": "inplace",
        "label": "struct UsingCryptoPunksMosaicRegistryStructs.MonoGovernanceOptions",
        "members": [
          {
            "astId": 8349,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "proposedReservePrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8352,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "bidResponse",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(MonoBidResponse)8359"
          },
          {
            "astId": 8354,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "bidId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Original)8332_storage": {
        "encoding": "inplace",
        "label": "struct UsingCryptoPunksMosaicRegistryStructs.Original",
        "members": [
          {
            "astId": 8311,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint192"
          },
          {
            "astId": 8313,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "punkId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8316,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "totalMonoSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 8318,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "claimedMonoCount",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 8320,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "purchasePrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8322,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "minReservePrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8324,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "maxReservePrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8326,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "metadataBaseUri",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 8329,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "status",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(OriginalStatus)8335"
          },
          {
            "astId": 8331,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "activeBidId",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/CryptoPunksMosaicRegistry.sol:CryptoPunksMosaicRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}