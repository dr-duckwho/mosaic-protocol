// Generated by @wagmi/cli@0.1.15 on 5/6/2023 at 11:41:02 AM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControlUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BasisPointTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const basisPointTestABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_calculateBasisPoint',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BasisPoint
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const basisPointABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'WHOLE_BPS',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContextUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contextUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CryptoPunksGroupRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cryptoPunksGroupRegistryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'claimer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'mosaicId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Claimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'ticketQuantity',
        internalType: 'uint96',
        type: 'uint96',
        indexed: true,
      },
    ],
    name: 'Contributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'targetMaxPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'totalTicketSupply',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'unitTicketPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'GroupWon',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CURATOR_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_RESERVE_PRICE_BPS',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MIN_RESERVE_PRICE_BPS',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'TICKET_SUPPLY_PER_GROUP',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint192', type: 'uint192' }],
    name: 'buy',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'purchasePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'calculateMaxReservePrice',
    outputs: [
      { name: 'maxReservePrice', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'purchasePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'calculateMinReservePrice',
    outputs: [
      { name: 'minReservePrice', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint192', type: 'uint192' }],
    name: 'claim',
    outputs: [
      { name: 'mosaicIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint192', type: 'uint192' },
      { name: 'ticketQuantity', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'contribute',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targetPunkId', internalType: 'uint256', type: 'uint256' },
      { name: 'targetMaxPrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'create',
    outputs: [{ name: 'groupId', internalType: 'uint192', type: 'uint192' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint192', type: 'uint192' }],
    name: 'getGroup',
    outputs: [
      {
        name: '',
        internalType: 'struct UsingCryptoPunksGroupRegistryStructs.Group',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint192', type: 'uint192' },
          { name: 'creator', internalType: 'address', type: 'address' },
          { name: 'targetPunkId', internalType: 'uint256', type: 'uint256' },
          { name: 'targetMaxPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'totalTicketSupply', internalType: 'uint64', type: 'uint64' },
          { name: 'unitTicketPrice', internalType: 'uint256', type: 'uint256' },
          {
            name: 'totalContribution',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'ticketsBought', internalType: 'uint64', type: 'uint64' },
          { name: 'expiresAt', internalType: 'uint40', type: 'uint40' },
          {
            name: 'status',
            internalType:
              'enum UsingCryptoPunksGroupRegistryStructs.GroupStatus',
            type: 'uint8',
          },
          { name: 'purchasePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'originalId', internalType: 'uint192', type: 'uint192' },
          { name: 'metadataUri', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint192', type: 'uint192' }],
    name: 'getGroupLifeCycle',
    outputs: [
      {
        name: '',
        internalType:
          'enum UsingCryptoPunksGroupRegistryStructs.GroupLifeCycle',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint192', type: 'uint192' }],
    name: 'getGroupTotalContribution',
    outputs: [
      { name: 'totalContribution', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLatestGroupId',
    outputs: [
      { name: 'latestGroupId', internalType: 'uint192', type: 'uint192' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'inquired', internalType: 'address', type: 'address' },
      { name: 'groupId', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'getTickets',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'inquired', internalType: 'address', type: 'address' },
      { name: 'groupId', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'hasContribution',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'museumAddress', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'inquired', internalType: 'address', type: 'address' },
      { name: 'groupId', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'isCreator',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'museum',
    outputs: [
      { name: '', internalType: 'contract CryptoPunksMuseum', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint192', type: 'uint192' }],
    name: 'refundExpired',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'isSet', internalType: 'bool', type: 'bool' },
      { name: 'minReservePriceBps', internalType: 'uint64', type: 'uint64' },
      { name: 'maxReservePriceBps', internalType: 'uint64', type: 'uint64' },
      { name: 'ticketSupplyPerGroup', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'setAdminGovernanceOptions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CryptoPunksGroupRegistryTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cryptoPunksGroupRegistryTestABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'claimer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'mosaicId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Claimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'ticketQuantity',
        internalType: 'uint96',
        type: 'uint96',
        indexed: true,
      },
    ],
    name: 'Contributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'targetMaxPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'totalTicketSupply',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'unitTicketPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'GroupWon',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'groupRegistry',
    outputs: [
      {
        name: '',
        internalType: 'contract CryptoPunksGroupRegistry',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mockCryptoPunksMarket',
    outputs: [
      {
        name: '',
        internalType: 'contract MockCryptoPunksMarketProvider',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mockMosaicRegistry',
    outputs: [
      { name: '', internalType: 'contract MockProvider', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'museum',
    outputs: [
      { name: '', internalType: 'contract CryptoPunksMuseum', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'originalOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setUp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_buy',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_calculateReservePrice',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_claim',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_claim_refund',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_claim_refund_noSurplus',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_create',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_refundExpired',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CryptoPunksMarketDeployer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cryptoPunksMarketDeployerABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'run',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CryptoPunksMosaicRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cryptoPunksMosaicRegistryABI = [
  {
    type: 'error',
    inputs: [
      {
        name: 'given',
        internalType: 'enum UsingCryptoPunksMosaicRegistryStructs.BidState',
        type: 'uint8',
      },
      {
        name: 'required',
        internalType: 'enum UsingCryptoPunksMosaicRegistryStructs.BidState',
        type: 'uint8',
      },
    ],
    name: 'IllegalBidStateTransition',
  },
  { type: 'error', inputs: [], name: 'NotActive' },
  { type: 'error', inputs: [], name: 'NotEnoughFund' },
  {
    type: 'error',
    inputs: [
      { name: 'validCount', internalType: 'uint64', type: 'uint64' },
      { name: 'thresholdBps', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughProposals',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expectedGte', internalType: 'uint256', type: 'uint256' },
      { name: 'expectedLte', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutOfExpectedRange',
  },
  {
    type: 'error',
    inputs: [{ name: 'expected', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidProposed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidRefunded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidRejected',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidWon',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'monoOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MonoRefunded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'OriginalSold',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BID_ACCEPTANCE_THRESHOLD_BPS',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BID_EXPIRY_BLOCK_SECONDS',
    outputs: [{ name: '', internalType: 'uint40', type: 'uint40' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MINTER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RESERVE_PRICE_PROPOSAL_TURNOUT_THRESHOLD_BPS',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'originalId', internalType: 'uint192', type: 'uint192' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'bid',
    outputs: [{ name: 'newBidId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'punkId', internalType: 'uint256', type: 'uint256' },
      { name: 'totalClaimableCount', internalType: 'uint64', type: 'uint64' },
      { name: 'purchasePrice', internalType: 'uint256', type: 'uint256' },
      { name: 'minReservePrice', internalType: 'uint256', type: 'uint256' },
      { name: 'maxReservePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'create',
    outputs: [{ name: 'originalId', internalType: 'uint192', type: 'uint192' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'bidId', internalType: 'uint256', type: 'uint256' }],
    name: 'finalizeAcceptedBid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'bidId', internalType: 'uint256', type: 'uint256' }],
    name: 'finalizeProposedBid',
    outputs: [
      {
        name: '',
        internalType: 'enum UsingCryptoPunksMosaicRegistryStructs.BidState',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'mosaicId', internalType: 'uint256', type: 'uint256' }],
    name: 'fromMosaicId',
    outputs: [
      { name: 'originalId', internalType: 'uint192', type: 'uint192' },
      { name: 'monoId', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'originalId', internalType: 'uint192', type: 'uint192' }],
    name: 'getAverageReservePriceProposals',
    outputs: [{ name: 'average', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'bidId', internalType: 'uint256', type: 'uint256' }],
    name: 'getBid',
    outputs: [
      {
        name: 'bid',
        internalType: 'struct UsingCryptoPunksMosaicRegistryStructs.Bid',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'bidder', internalType: 'address payable', type: 'address' },
          { name: 'originalId', internalType: 'uint192', type: 'uint192' },
          { name: 'price', internalType: 'uint256', type: 'uint256' },
          { name: 'createdAt', internalType: 'uint40', type: 'uint40' },
          { name: 'expiry', internalType: 'uint40', type: 'uint40' },
          {
            name: 'state',
            internalType: 'enum UsingCryptoPunksMosaicRegistryStructs.BidState',
            type: 'uint8',
          },
        ],
      },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'originalId', internalType: 'uint192', type: 'uint192' }],
    name: 'getDistributionStatus',
    outputs: [
      {
        name: '',
        internalType:
          'enum UsingCryptoPunksMosaicRegistryStructs.DistributionStatus',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLatestOriginalId',
    outputs: [
      { name: 'latestOriginalId', internalType: 'uint192', type: 'uint192' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'originalId', internalType: 'uint192', type: 'uint192' },
      { name: 'monoId', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'getMono',
    outputs: [
      {
        name: '',
        internalType: 'struct UsingCryptoPunksMosaicRegistryStructs.Mono',
        type: 'tuple',
        components: [
          { name: 'mosaicId', internalType: 'uint256', type: 'uint256' },
          { name: 'presetId', internalType: 'uint8', type: 'uint8' },
          {
            name: 'governanceOptions',
            internalType:
              'struct UsingCryptoPunksMosaicRegistryStructs.MonoGovernanceOptions',
            type: 'tuple',
            components: [
              {
                name: 'proposedReservePrice',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'bidResponse',
                internalType:
                  'enum UsingCryptoPunksMosaicRegistryStructs.MonoBidResponse',
                type: 'uint8',
              },
              { name: 'bidId', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'mosaicId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMonoLifeCycle',
    outputs: [
      {
        name: '',
        internalType:
          'enum UsingCryptoPunksMosaicRegistryStructs.MonoLifeCycle',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'originalId', internalType: 'uint192', type: 'uint192' }],
    name: 'getOriginal',
    outputs: [
      {
        name: '',
        internalType: 'struct UsingCryptoPunksMosaicRegistryStructs.Original',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint192', type: 'uint192' },
          { name: 'punkId', internalType: 'uint256', type: 'uint256' },
          { name: 'totalMonoSupply', internalType: 'uint96', type: 'uint96' },
          { name: 'claimedMonoCount', internalType: 'uint96', type: 'uint96' },
          { name: 'purchasePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'minReservePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'maxReservePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'metadataBaseUri', internalType: 'string', type: 'string' },
          {
            name: 'state',
            internalType:
              'enum UsingCryptoPunksMosaicRegistryStructs.OriginalState',
            type: 'uint8',
          },
          { name: 'activeBidId', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'originalId', internalType: 'uint192', type: 'uint192' }],
    name: 'getPerMonoResaleFund',
    outputs: [
      { name: 'perMonoResaleFund', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'originalId', internalType: 'uint192', type: 'uint192' }],
    name: 'getReconstitutionStatus',
    outputs: [
      {
        name: '',
        internalType:
          'enum UsingCryptoPunksMosaicRegistryStructs.ReconstitutionStatus',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'grantMintAuthority',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'originalId', internalType: 'uint192', type: 'uint192' }],
    name: 'hasVotableActiveBid',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'museumAddress', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'originalId', internalType: 'uint192', type: 'uint192' }],
    name: 'isBidAcceptable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'contributor', internalType: 'address', type: 'address' },
      { name: 'originalId', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'mint',
    outputs: [{ name: 'mosaicId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'museum',
    outputs: [
      { name: '', internalType: 'contract CryptoPunksMuseum', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'mosaicId', internalType: 'uint256', type: 'uint256' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeReservePrice',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'originalId', internalType: 'uint192', type: 'uint192' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeReservePriceBatch',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'bidId', internalType: 'uint256', type: 'uint256' }],
    name: 'refundBidDeposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'originalId', internalType: 'uint192', type: 'uint192' }],
    name: 'refundOnSold',
    outputs: [
      { name: 'totalResaleFund', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'originalId', internalType: 'uint192', type: 'uint192' },
      {
        name: 'response',
        internalType:
          'enum UsingCryptoPunksMosaicRegistryStructs.MonoBidResponse',
        type: 'uint8',
      },
    ],
    name: 'respondToBidBatch',
    outputs: [
      { name: 'bidId', internalType: 'uint256', type: 'uint256' },
      { name: 'changedMonoCount', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'isSet', internalType: 'bool', type: 'bool' },
      {
        name: 'reservePriceProposalTurnoutThresholdBps',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'bidExpiryBlockSeconds', internalType: 'uint40', type: 'uint40' },
      {
        name: 'bidAcceptanceThresholdBps',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setAdminGovernanceOptions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_uri', internalType: 'string', type: 'string' }],
    name: 'setInvalidMetadataUri',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'originalId', internalType: 'uint192', type: 'uint192' },
      { name: '_uri', internalType: 'string', type: 'string' },
    ],
    name: 'setMetadataBaseUri',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'originalId', internalType: 'uint192', type: 'uint192' },
      { name: 'minReservePrice', internalType: 'uint256', type: 'uint256' },
      { name: 'maxReservePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setOriginalReservePrice',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'mosaicId', internalType: 'uint256', type: 'uint256' },
      { name: 'presetId', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'setPresetId',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'originalId', internalType: 'uint192', type: 'uint192' }],
    name: 'sumBidResponses',
    outputs: [
      { name: 'yes', internalType: 'uint64', type: 'uint64' },
      { name: 'no', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'originalId', internalType: 'uint192', type: 'uint192' }],
    name: 'sumReservePriceProposals',
    outputs: [
      { name: 'priceSum', internalType: 'uint256', type: 'uint256' },
      { name: 'validProposalCount', internalType: 'uint64', type: 'uint64' },
      { name: 'invalidProposalCount', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'originalId', internalType: 'uint192', type: 'uint192' },
      { name: 'bidder', internalType: 'address', type: 'address' },
      { name: 'blockTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'toBidId',
    outputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'originalId', internalType: 'uint192', type: 'uint192' },
      { name: 'monoId', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'toMosaicId',
    outputs: [{ name: 'mosaicId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'mosaicId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CryptoPunksMosaicRegistryTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cryptoPunksMosaicRegistryTestABI = [
  {
    type: 'error',
    inputs: [
      {
        name: 'given',
        internalType: 'enum UsingCryptoPunksMosaicRegistryStructs.BidState',
        type: 'uint8',
      },
      {
        name: 'required',
        internalType: 'enum UsingCryptoPunksMosaicRegistryStructs.BidState',
        type: 'uint8',
      },
    ],
    name: 'IllegalBidStateTransition',
  },
  { type: 'error', inputs: [], name: 'NotActive' },
  { type: 'error', inputs: [], name: 'NotEnoughFund' },
  {
    type: 'error',
    inputs: [
      { name: 'validCount', internalType: 'uint64', type: 'uint64' },
      { name: 'thresholdBps', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughProposals',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expectedGte', internalType: 'uint256', type: 'uint256' },
      { name: 'expectedLte', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutOfExpectedRange',
  },
  {
    type: 'error',
    inputs: [{ name: 'expected', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidProposed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidRefunded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidRejected',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidWon',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'monoOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MonoRefunded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'OriginalSold',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mintAuthority',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mockCryptoPunksMarket',
    outputs: [
      {
        name: '',
        internalType: 'contract MockCryptoPunksMarketProvider',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mosaicRegistry',
    outputs: [
      {
        name: '',
        internalType: 'contract MockCryptoPunksMosaicRegistry',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'museum',
    outputs: [
      { name: '', internalType: 'contract CryptoPunksMuseum', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setUp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_bid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_bid_belowProposal',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_bid_originalNotActive',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_bid_previousBid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_bid_previousBid_wonOrAcceptedAlready',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_create',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_create_mustOwnPunk',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_finalizeAcceptedBid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'isBidAcceptable', internalType: 'bool', type: 'bool' }],
    name: 'test_finalizeProposedBid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_getAverageReservePriceProposals',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_getAverageReservePriceProposals_notEnough',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_getPerMonoResaleFund',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'isAcceptable', internalType: 'bool', type: 'bool' }],
    name: 'test_isBidAcceptable',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_mint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_proposeReservePrice',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_proposeReservePriceBatch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_proposeReservePriceBatch_notInRange',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_refundBidDeposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_refundBidDeposit_onlyBidder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_refundOnSold',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_respondToBidBatch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_sumBidResponses',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_sumBidResponses_halfValidResponses',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_sumBidResponses_noOngoingActiveBid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_sumReservePriceProposals',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'test_toMosaicId_fromMosaicId',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IOddEven
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iOddEvenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'expensiveFunction',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getEven',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getOdd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'x', internalType: 'uint256', type: 'uint256' }],
    name: 'isEven',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'x', internalType: 'uint256', type: 'uint256' }],
    name: 'isOdd',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITheAnswer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTheAnswerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'theUltimateQuestionOfLifeTheUniverseAndEverything',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CryptoPunksMarket
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cryptoPunksMarketABI = [
  { stateMutability: 'payable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'punkIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Assign',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'punkIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fromAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PunkBidEntered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'punkIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fromAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PunkBidWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'punkIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fromAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PunkBought',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'punkIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'PunkNoLongerForSale',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'punkIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'minValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'toAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PunkOffered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'punkIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PunkTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'punkIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'minPrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'acceptBidForPunk',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'allInitialOwnersAssigned',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'allPunksAssigned',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'punkIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'buyPunk',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'punkIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'enterBidForPunk',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'punkIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getPunk',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'imageHash',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nextPunkIndexToAssign',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'punkIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'minSalePriceInWei', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'offerPunkForSale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'punkIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'minSalePriceInWei', internalType: 'uint256', type: 'uint256' },
      { name: 'toAddress', internalType: 'address', type: 'address' },
    ],
    name: 'offerPunkForSaleToAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'pendingWithdrawals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'punkBids',
    outputs: [
      { name: 'hasBid', internalType: 'bool', type: 'bool' },
      { name: 'punkIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'bidder', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'punkIndexToAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'punkIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'punkNoLongerForSale',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'punksOfferedForSale',
    outputs: [
      { name: 'isForSale', internalType: 'bool', type: 'bool' },
      { name: 'punkIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'seller', internalType: 'address', type: 'address' },
      { name: 'minValue', internalType: 'uint256', type: 'uint256' },
      { name: 'onlySellTo', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'punksRemainingToAssign',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'punkIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setInitialOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'addresses', internalType: 'address[]', type: 'address[]' },
      { name: 'indices', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'setInitialOwners',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'standard',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'punkIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPunk',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdraw',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'punkIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawBidForPunk',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CryptoPunksMuseum
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cryptoPunksMuseumABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'cryptoPunksMarketAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'activate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'cryptoPunksMarket',
    outputs: [
      {
        name: '',
        internalType: 'contract ICryptoPunksMarket',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'deactivate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'groupRegistry',
    outputs: [
      {
        name: '',
        internalType: 'contract ICryptoPunksGroupRegistry',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isActive',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mosaicRegistry',
    outputs: [
      {
        name: '',
        internalType: 'contract ICryptoPunksMosaicRegistry',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'setGroupRegistry',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'setMosaicRegistry',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DeployByteCode
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const deployByteCodeABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_bytecode', internalType: 'bytes', type: 'bytes' }],
    name: 'deploy',
    outputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DummyERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dummyErc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'mint',
    outputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'isApproved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1155
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1155ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'uri_', internalType: 'string', type: 'string' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1155Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1155UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967Upgrade
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967UpgradeUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TicketRegistryScript
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ticketRegistryScriptABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'run',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControlUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeacon
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeaconUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICryptoPunksGroupRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iCryptoPunksGroupRegistryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'claimer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'mosaicId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Claimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'ticketQuantity',
        internalType: 'uint96',
        type: 'uint96',
        indexed: true,
      },
    ],
    name: 'Contributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'targetMaxPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'totalTicketSupply',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'unitTicketPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'GroupWon',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint192', type: 'uint192' }],
    name: 'buy',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint192', type: 'uint192' }],
    name: 'claim',
    outputs: [
      { name: 'mosaicIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint192', type: 'uint192' },
      { name: 'ticketQuantity', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'contribute',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targetPunkId', internalType: 'uint256', type: 'uint256' },
      { name: 'targetMaxPrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'create',
    outputs: [{ name: 'groupId', internalType: 'uint192', type: 'uint192' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint192', type: 'uint192' }],
    name: 'refundExpired',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICryptoPunksMosaicRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iCryptoPunksMosaicRegistryABI = [
  {
    type: 'error',
    inputs: [
      {
        name: 'given',
        internalType: 'enum UsingCryptoPunksMosaicRegistryStructs.BidState',
        type: 'uint8',
      },
      {
        name: 'required',
        internalType: 'enum UsingCryptoPunksMosaicRegistryStructs.BidState',
        type: 'uint8',
      },
    ],
    name: 'IllegalBidStateTransition',
  },
  { type: 'error', inputs: [], name: 'NotActive' },
  { type: 'error', inputs: [], name: 'NotEnoughFund' },
  {
    type: 'error',
    inputs: [
      { name: 'validCount', internalType: 'uint64', type: 'uint64' },
      { name: 'thresholdBps', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughProposals',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expectedGte', internalType: 'uint256', type: 'uint256' },
      { name: 'expectedLte', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutOfExpectedRange',
  },
  {
    type: 'error',
    inputs: [{ name: 'expected', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidProposed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidRefunded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidRejected',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidWon',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'monoOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MonoRefunded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'OriginalSold',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'originalId', internalType: 'uint192', type: 'uint192' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'bid',
    outputs: [{ name: 'newBidId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'punkId', internalType: 'uint256', type: 'uint256' },
      { name: 'totalClaimableCount', internalType: 'uint64', type: 'uint64' },
      { name: 'purchasePrice', internalType: 'uint256', type: 'uint256' },
      { name: 'minReservePrice', internalType: 'uint256', type: 'uint256' },
      { name: 'maxReservePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'create',
    outputs: [{ name: 'originalId', internalType: 'uint192', type: 'uint192' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'bidId', internalType: 'uint256', type: 'uint256' }],
    name: 'finalizeAcceptedBid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'bidId', internalType: 'uint256', type: 'uint256' }],
    name: 'finalizeProposedBid',
    outputs: [
      {
        name: '',
        internalType: 'enum UsingCryptoPunksMosaicRegistryStructs.BidState',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'grantMintAuthority',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'contributor', internalType: 'address', type: 'address' },
      { name: 'originalId', internalType: 'uint192', type: 'uint192' },
    ],
    name: 'mint',
    outputs: [{ name: 'mosaicId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'mosaicId', internalType: 'uint256', type: 'uint256' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeReservePrice',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'originalId', internalType: 'uint192', type: 'uint192' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'proposeReservePriceBatch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'bidId', internalType: 'uint256', type: 'uint256' }],
    name: 'refundBidDeposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'originalId', internalType: 'uint192', type: 'uint192' }],
    name: 'refundOnSold',
    outputs: [
      { name: 'totalResaleFund', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'originalId', internalType: 'uint192', type: 'uint192' },
      {
        name: 'response',
        internalType:
          'enum UsingCryptoPunksMosaicRegistryStructs.MonoBidResponse',
        type: 'uint8',
      },
    ],
    name: 'respondToBidBatch',
    outputs: [
      { name: 'bidId', internalType: 'uint256', type: 'uint256' },
      { name: 'changedMonoCount', internalType: 'uint64', type: 'uint64' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155MetadataURI
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155MetadataUriABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155MetadataURIUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155MetadataUriUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICryptoPunksMarket
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iCryptoPunksMarketABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'punkIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Assign',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'punkIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fromAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PunkBidEntered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'punkIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fromAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PunkBidWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'punkIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fromAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PunkBought',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'punkIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'PunkNoLongerForSale',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'punkIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'minValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'toAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PunkOffered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'punkIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PunkTransfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'punkIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'minPrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'acceptBidForPunk',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'allInitialOwnersAssigned',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'allPunksAssigned',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'punkIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'buyPunk',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'punkIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'enterBidForPunk',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'punkIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getPunk',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'imageHash',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nextPunkIndexToAssign',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'punkIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'minSalePriceInWei', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'offerPunkForSale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'punkIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'minSalePriceInWei', internalType: 'uint256', type: 'uint256' },
      { name: 'toAddress', internalType: 'address', type: 'address' },
    ],
    name: 'offerPunkForSaleToAddress',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'pendingWithdrawals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'punkBids',
    outputs: [
      { name: 'hasBid', internalType: 'bool', type: 'bool' },
      { name: 'punkIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'bidder', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'punkIndexToAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'punkIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'punkNoLongerForSale',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'punksOfferedForSale',
    outputs: [
      { name: 'isForSale', internalType: 'bool', type: 'bool' },
      { name: 'punkIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'seller', internalType: 'address', type: 'address' },
      { name: 'minValue', internalType: 'uint256', type: 'uint256' },
      { name: 'onlySellTo', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'punksRemainingToAssign',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'punkIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setInitialOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'addresses', internalType: 'address[]', type: 'address[]' },
      { name: 'indices', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'setInitialOwners',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'standard',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'punkIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferPunk',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdraw',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'punkIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawBidForPunk',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155ReceiverUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ReceiverUpgradeableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165UpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721MetadataUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721ReceiverUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverUpgradeableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Proxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const proxyABI = [
  { stateMutability: 'payable', type: 'fallback' },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReentrancyGuardUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const reentrancyGuardUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Script
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const scriptABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_SCRIPT',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdAssertions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdAssertionsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// stdError
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdErrorABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'arithmeticError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'assertionError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'divisionError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'encodeStorageError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'enumConversionError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'indexOOBError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'memOverflowError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'popError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'zeroVarError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// stdStorageSafe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdStorageSafeABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'who', internalType: 'address', type: 'address', indexed: false },
      { name: 'fsig', internalType: 'bytes4', type: 'bytes4', indexed: false },
      {
        name: 'keysHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'slot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SlotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'who', internalType: 'address', type: 'address', indexed: false },
      {
        name: 'slot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WARNING_UninitedSlot',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DSTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dsTestABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Test
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TestUtils
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testUtilsABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uupsUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UsingCryptoPunksGroupRegistryStructs
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const usingCryptoPunksGroupRegistryStructsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'claimer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'mosaicId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Claimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'ticketQuantity',
        internalType: 'uint96',
        type: 'uint96',
        indexed: true,
      },
    ],
    name: 'Contributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'targetMaxPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'totalTicketSupply',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'unitTicketPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'GroupWon',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vm
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vmABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'accesses',
    outputs: [
      { name: 'reads', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'writes', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'activeFork',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'addr',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'allowCheatcodes',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    name: 'assume',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'chainId',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'clearMockedCalls',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'closeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'coinbase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'createFork',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createFork',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'createFork',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSelectFork',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'createSelectFork',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'createSelectFork',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deal',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'difficulty',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envAddress',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envBool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envBool',
    outputs: [{ name: '', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes32',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envBytes32',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envInt',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envInt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envString',
    outputs: [{ name: '', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envUint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envUint',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'etch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
    name: 'expectEmit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'expectEmit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
    name: 'expectRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    name: 'expectRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'expectRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'fee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string[]', type: 'string[]' }],
    name: 'ffi',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'getCode',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'getDeployedCode',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'getNonce',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getRecordedLogs',
    outputs: [
      {
        name: '',
        internalType: 'struct VmSafe.Log[]',
        type: 'tuple[]',
        components: [
          { name: 'topics', internalType: 'bytes32[]', type: 'bytes32[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
          { name: 'emitter', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isPersistent',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'label',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'load',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mockCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mockCall',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseBool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseBytes32',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseInt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseJson',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJson',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseUint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'prank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'prank',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projectRoot',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'readFile',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'readFileBinary',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'readLine',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'record',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'recordLogs',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'rememberKey',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'removeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'revertTo',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    name: 'revokePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'revokePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'roll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'transaction', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'rpcUrl',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrlStructs',
    outputs: [
      {
        name: '',
        internalType: 'struct VmSafe.Rpc[]',
        type: 'tuple[]',
        components: [
          { name: 'key', internalType: 'string', type: 'string' },
          { name: 'url', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrls',
    outputs: [{ name: '', internalType: 'string[2][]', type: 'string[2][]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'selectFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'serializeBool',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
    name: 'serializeBool',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'int256', type: 'int256' },
    ],
    name: 'serializeInt',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'int256[]', type: 'int256[]' },
    ],
    name: 'serializeInt',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'serializeString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'serializeString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'serializeUint',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'serializeUint',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'setEnv',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'setNonce',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'sign',
    outputs: [
      { name: '', internalType: 'uint8', type: 'uint8' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'snapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'startPrank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'startPrank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stopBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stopPrank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'store',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'transact',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'txHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'transact',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'warp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'writeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'writeFileBinary',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'writeLine',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VmSafe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vmSafeABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'accesses',
    outputs: [
      { name: 'reads', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'writes', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'addr',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    name: 'assume',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'closeFile',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envAddress',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envBool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envBool',
    outputs: [{ name: '', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes32',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envBytes32',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envInt',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envInt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envString',
    outputs: [{ name: '', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'envUint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'envUint',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string[]', type: 'string[]' }],
    name: 'ffi',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'getCode',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'getDeployedCode',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'getNonce',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getRecordedLogs',
    outputs: [
      {
        name: '',
        internalType: 'struct VmSafe.Log[]',
        type: 'tuple[]',
        components: [
          { name: 'topics', internalType: 'bytes32[]', type: 'bytes32[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
          { name: 'emitter', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'label',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'load',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseBool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseBytes32',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseInt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseJson',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJson',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'parseUint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projectRoot',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'readFile',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'readFileBinary',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'readLine',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'record',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'recordLogs',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'rememberKey',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'removeFile',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'rpcUrl',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrlStructs',
    outputs: [
      {
        name: '',
        internalType: 'struct VmSafe.Rpc[]',
        type: 'tuple[]',
        components: [
          { name: 'key', internalType: 'string', type: 'string' },
          { name: 'url', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrls',
    outputs: [{ name: '', internalType: 'string[2][]', type: 'string[2][]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'serializeBool',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
    name: 'serializeBool',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'int256', type: 'int256' },
    ],
    name: 'serializeInt',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'int256[]', type: 'int256[]' },
    ],
    name: 'serializeInt',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'serializeString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'serializeString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'serializeUint',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'serializeUint',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'setEnv',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'sign',
    outputs: [
      { name: '', internalType: 'uint8', type: 'uint8' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'stopBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'toString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'writeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'writeFileBinary',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'writeLine',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UsingCryptoPunksMosaicRegistryStructs
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const usingCryptoPunksMosaicRegistryStructsABI = [
  {
    type: 'error',
    inputs: [
      {
        name: 'given',
        internalType: 'enum UsingCryptoPunksMosaicRegistryStructs.BidState',
        type: 'uint8',
      },
      {
        name: 'required',
        internalType: 'enum UsingCryptoPunksMosaicRegistryStructs.BidState',
        type: 'uint8',
      },
    ],
    name: 'IllegalBidStateTransition',
  },
  { type: 'error', inputs: [], name: 'NotActive' },
  { type: 'error', inputs: [], name: 'NotEnoughFund' },
  {
    type: 'error',
    inputs: [
      { name: 'validCount', internalType: 'uint64', type: 'uint64' },
      { name: 'thresholdBps', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughProposals',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expectedGte', internalType: 'uint256', type: 'uint256' },
      { name: 'expectedLte', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutOfExpectedRange',
  },
  {
    type: 'error',
    inputs: [{ name: 'expected', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidProposed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidRefunded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidRejected',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
    ],
    name: 'BidWon',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'monoOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MonoRefunded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'originalId',
        internalType: 'uint192',
        type: 'uint192',
        indexed: true,
      },
      {
        name: 'bidId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'OriginalSold',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822Proxiable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822ProxiableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function useAccessControlUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: accessControlUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function useAccessControlUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof accessControlUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof accessControlUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlUpgradeableDefaultAdminRole<
  TSelectData = ReadContractResult<
    typeof accessControlUpgradeableABI,
    'DEFAULT_ADMIN_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlUpgradeableABI,
      'DEFAULT_ADMIN_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlUpgradeableABI,
    'DEFAULT_ADMIN_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlUpgradeableGetRoleAdmin<
  TSelectData = ReadContractResult<
    typeof accessControlUpgradeableABI,
    'getRoleAdmin'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlUpgradeableABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlUpgradeableABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlUpgradeableHasRole<
  TSelectData = ReadContractResult<
    typeof accessControlUpgradeableABI,
    'hasRole'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlUpgradeableABI,
      'hasRole',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlUpgradeableABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlUpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof accessControlUpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlUpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlUpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function useAccessControlUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof accessControlUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof accessControlUpgradeableABI,
    TFunctionName
  >({ abi: accessControlUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlUpgradeableGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlUpgradeableABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof accessControlUpgradeableABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof accessControlUpgradeableABI,
    'grantRole'
  >({
    abi: accessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlUpgradeableRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlUpgradeableABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof accessControlUpgradeableABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof accessControlUpgradeableABI,
    'renounceRole'
  >({
    abi: accessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlUpgradeableRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlUpgradeableABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof accessControlUpgradeableABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof accessControlUpgradeableABI,
    'revokeRole'
  >({
    abi: accessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function usePrepareAccessControlUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlUpgradeableGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlUpgradeableABI,
      'grantRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlUpgradeableABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlUpgradeableRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlUpgradeableABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlUpgradeableABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlUpgradeableRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlUpgradeableABI,
      'revokeRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlUpgradeableABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__.
 */
export function useAccessControlUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useAccessControlUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof accessControlUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlUpgradeableRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof accessControlUpgradeableABI,
      'RoleAdminChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof accessControlUpgradeableABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlUpgradeableRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<
    typeof accessControlUpgradeableABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlUpgradeableABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlUpgradeableRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlUpgradeableABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlUpgradeableABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<
    typeof accessControlUpgradeableABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControl(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: accessControlABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlDefaultAdminRole<
  TSelectData = ReadContractResult<
    typeof accessControlABI,
    'DEFAULT_ADMIN_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlABI,
      'DEFAULT_ADMIN_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    'DEFAULT_ADMIN_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlGetRoleAdmin<
  TSelectData = ReadContractResult<typeof accessControlABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'getRoleAdmin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlHasRole<
  TSelectData = ReadContractResult<typeof accessControlABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof accessControlABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlSupportsInterface<
  TSelectData = ReadContractResult<
    typeof accessControlABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof accessControlABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, TFunctionName>({
    abi: accessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof accessControlABI, 'grantRole'>['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'grantRole'>({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'renounceRole'> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'renounceRole'>({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof accessControlABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof accessControlABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof accessControlABI, 'revokeRole'>({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function usePrepareAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link basisPointTestABI}__.
 */
export function useBasisPointTest(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: basisPointTestABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basisPointTestABI}__.
 */
export function useBasisPointTestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof basisPointTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basisPointTestABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: basisPointTestABI,
    ...config,
  } as UseContractReadConfig<
    typeof basisPointTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basisPointTestABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useBasisPointTestIsTest<
  TSelectData = ReadContractResult<typeof basisPointTestABI, 'IS_TEST'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basisPointTestABI, 'IS_TEST', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basisPointTestABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof basisPointTestABI, 'IS_TEST', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basisPointTestABI}__ and `functionName` set to `"failed"`.
 */
export function useBasisPointTestFailed<
  TSelectData = ReadContractResult<typeof basisPointTestABI, 'failed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basisPointTestABI, 'failed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basisPointTestABI,
    functionName: 'failed',
    ...config,
  } as UseContractReadConfig<typeof basisPointTestABI, 'failed', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basisPointTestABI}__.
 */
export function useBasisPointTestWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof basisPointTestABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof basisPointTestABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof basisPointTestABI, TFunctionName>({
    abi: basisPointTestABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basisPointTestABI}__ and `functionName` set to `"test_calculateBasisPoint"`.
 */
export function useBasisPointTestTestCalculateBasisPoint<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof basisPointTestABI,
          'test_calculateBasisPoint'
        >['abi'],
        'test_calculateBasisPoint'
      > & { functionName?: 'test_calculateBasisPoint' }
    : UseContractWriteConfig<
        TMode,
        typeof basisPointTestABI,
        'test_calculateBasisPoint'
      > & {
        abi?: never
        functionName?: 'test_calculateBasisPoint'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof basisPointTestABI,
    'test_calculateBasisPoint'
  >({
    abi: basisPointTestABI,
    functionName: 'test_calculateBasisPoint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basisPointTestABI}__.
 */
export function usePrepareBasisPointTestWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basisPointTestABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basisPointTestABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof basisPointTestABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basisPointTestABI}__ and `functionName` set to `"test_calculateBasisPoint"`.
 */
export function usePrepareBasisPointTestTestCalculateBasisPoint(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof basisPointTestABI,
      'test_calculateBasisPoint'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basisPointTestABI,
    functionName: 'test_calculateBasisPoint',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof basisPointTestABI,
    'test_calculateBasisPoint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__.
 */
export function useBasisPointTestEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log"`.
 */
export function useBasisPointTestLogEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_address"`.
 */
export function useBasisPointTestLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_array"`.
 */
export function useBasisPointTestLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useBasisPointTestLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useBasisPointTestLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_int"`.
 */
export function useBasisPointTestLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useBasisPointTestLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useBasisPointTestLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_named_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log_named_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useBasisPointTestLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useBasisPointTestLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useBasisPointTestLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<
    typeof basisPointTestABI,
    'log_named_decimal_int'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useBasisPointTestLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<
    typeof basisPointTestABI,
    'log_named_decimal_uint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useBasisPointTestLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useBasisPointTestLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useBasisPointTestLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_string"`.
 */
export function useBasisPointTestLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"log_uint"`.
 */
export function useBasisPointTestLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basisPointTestABI}__ and `eventName` set to `"logs"`.
 */
export function useBasisPointTestLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof basisPointTestABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basisPointTestABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof basisPointTestABI, 'logs'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link basisPointABI}__.
 */
export function useBasisPoint(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: basisPointABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basisPointABI}__.
 */
export function useBasisPointRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof basisPointABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basisPointABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: basisPointABI,
    ...config,
  } as UseContractReadConfig<typeof basisPointABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basisPointABI}__ and `functionName` set to `"WHOLE_BPS"`.
 */
export function useBasisPointWholeBps<
  TSelectData = ReadContractResult<typeof basisPointABI, 'WHOLE_BPS'>,
>(
  config: Omit<
    UseContractReadConfig<typeof basisPointABI, 'WHOLE_BPS', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basisPointABI,
    functionName: 'WHOLE_BPS',
    ...config,
  } as UseContractReadConfig<typeof basisPointABI, 'WHOLE_BPS', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: contextUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof contextUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useContextUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__.
 */
export function useCryptoPunksGroupRegistry(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: cryptoPunksGroupRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__.
 */
export function useCryptoPunksGroupRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"CURATOR_ROLE"`.
 */
export function useCryptoPunksGroupRegistryCuratorRole<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'CURATOR_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'CURATOR_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'CURATOR_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'CURATOR_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useCryptoPunksGroupRegistryDefaultAdminRole<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'DEFAULT_ADMIN_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'DEFAULT_ADMIN_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'DEFAULT_ADMIN_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"MAX_RESERVE_PRICE_BPS"`.
 */
export function useCryptoPunksGroupRegistryMaxReservePriceBps<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'MAX_RESERVE_PRICE_BPS'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'MAX_RESERVE_PRICE_BPS',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'MAX_RESERVE_PRICE_BPS',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'MAX_RESERVE_PRICE_BPS',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"MIN_RESERVE_PRICE_BPS"`.
 */
export function useCryptoPunksGroupRegistryMinReservePriceBps<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'MIN_RESERVE_PRICE_BPS'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'MIN_RESERVE_PRICE_BPS',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'MIN_RESERVE_PRICE_BPS',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'MIN_RESERVE_PRICE_BPS',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"TICKET_SUPPLY_PER_GROUP"`.
 */
export function useCryptoPunksGroupRegistryTicketSupplyPerGroup<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'TICKET_SUPPLY_PER_GROUP'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'TICKET_SUPPLY_PER_GROUP',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'TICKET_SUPPLY_PER_GROUP',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'TICKET_SUPPLY_PER_GROUP',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCryptoPunksGroupRegistryBalanceOf<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'balanceOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useCryptoPunksGroupRegistryBalanceOfBatch<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'balanceOfBatch'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'balanceOfBatch',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'balanceOfBatch',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"calculateMaxReservePrice"`.
 */
export function useCryptoPunksGroupRegistryCalculateMaxReservePrice<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'calculateMaxReservePrice'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'calculateMaxReservePrice',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'calculateMaxReservePrice',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'calculateMaxReservePrice',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"calculateMinReservePrice"`.
 */
export function useCryptoPunksGroupRegistryCalculateMinReservePrice<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'calculateMinReservePrice'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'calculateMinReservePrice',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'calculateMinReservePrice',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'calculateMinReservePrice',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"getGroup"`.
 */
export function useCryptoPunksGroupRegistryGetGroup<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'getGroup'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'getGroup',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'getGroup',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'getGroup',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"getGroupLifeCycle"`.
 */
export function useCryptoPunksGroupRegistryGetGroupLifeCycle<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'getGroupLifeCycle'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'getGroupLifeCycle',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'getGroupLifeCycle',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'getGroupLifeCycle',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"getGroupTotalContribution"`.
 */
export function useCryptoPunksGroupRegistryGetGroupTotalContribution<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'getGroupTotalContribution'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'getGroupTotalContribution',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'getGroupTotalContribution',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'getGroupTotalContribution',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"getLatestGroupId"`.
 */
export function useCryptoPunksGroupRegistryGetLatestGroupId<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'getLatestGroupId'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'getLatestGroupId',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'getLatestGroupId',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'getLatestGroupId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useCryptoPunksGroupRegistryGetRoleAdmin<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'getRoleAdmin'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"getTickets"`.
 */
export function useCryptoPunksGroupRegistryGetTickets<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'getTickets'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'getTickets',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'getTickets',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'getTickets',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"hasContribution"`.
 */
export function useCryptoPunksGroupRegistryHasContribution<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'hasContribution'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'hasContribution',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'hasContribution',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'hasContribution',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"hasRole"`.
 */
export function useCryptoPunksGroupRegistryHasRole<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'hasRole'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'hasRole',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useCryptoPunksGroupRegistryIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"isCreator"`.
 */
export function useCryptoPunksGroupRegistryIsCreator<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'isCreator'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'isCreator',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'isCreator',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'isCreator',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"museum"`.
 */
export function useCryptoPunksGroupRegistryMuseum<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'museum'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'museum',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'museum',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'museum',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useCryptoPunksGroupRegistryProxiableUuid<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'proxiableUUID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'proxiableUUID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'proxiableUUID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCryptoPunksGroupRegistrySupportsInterface<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"uri"`.
 */
export function useCryptoPunksGroupRegistryUri<
  TSelectData = ReadContractResult<typeof cryptoPunksGroupRegistryABI, 'uri'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryABI,
      'uri',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryABI,
    'uri',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__.
 */
export function useCryptoPunksGroupRegistryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryABI,
    TFunctionName
  >({ abi: cryptoPunksGroupRegistryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"buy"`.
 */
export function useCryptoPunksGroupRegistryBuy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'buy'
        >['abi'],
        'buy'
      > & { functionName?: 'buy' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'buy'
      > & {
        abi?: never
        functionName?: 'buy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksGroupRegistryABI, 'buy'>({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'buy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"claim"`.
 */
export function useCryptoPunksGroupRegistryClaim<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'claim'
        >['abi'],
        'claim'
      > & { functionName?: 'claim' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'claim'
      > & {
        abi?: never
        functionName?: 'claim'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksGroupRegistryABI, 'claim'>({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'claim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"contribute"`.
 */
export function useCryptoPunksGroupRegistryContribute<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'contribute'
        >['abi'],
        'contribute'
      > & { functionName?: 'contribute' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'contribute'
      > & {
        abi?: never
        functionName?: 'contribute'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryABI,
    'contribute'
  >({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'contribute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"create"`.
 */
export function useCryptoPunksGroupRegistryCreate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'create'
        >['abi'],
        'create'
      > & { functionName?: 'create' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'create'
      > & {
        abi?: never
        functionName?: 'create'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksGroupRegistryABI, 'create'>({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'create',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"grantRole"`.
 */
export function useCryptoPunksGroupRegistryGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryABI,
    'grantRole'
  >({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"initialize"`.
 */
export function useCryptoPunksGroupRegistryInitialize<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'initialize'
        >['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'initialize'
      > & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryABI,
    'initialize'
  >({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"refundExpired"`.
 */
export function useCryptoPunksGroupRegistryRefundExpired<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'refundExpired'
        >['abi'],
        'refundExpired'
      > & { functionName?: 'refundExpired' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'refundExpired'
      > & {
        abi?: never
        functionName?: 'refundExpired'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryABI,
    'refundExpired'
  >({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'refundExpired',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useCryptoPunksGroupRegistryRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryABI,
    'renounceRole'
  >({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useCryptoPunksGroupRegistryRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryABI,
    'revokeRole'
  >({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useCryptoPunksGroupRegistrySafeBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryABI,
    'safeBatchTransferFrom'
  >({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useCryptoPunksGroupRegistrySafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryABI,
    'safeTransferFrom'
  >({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"setAdminGovernanceOptions"`.
 */
export function useCryptoPunksGroupRegistrySetAdminGovernanceOptions<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'setAdminGovernanceOptions'
        >['abi'],
        'setAdminGovernanceOptions'
      > & { functionName?: 'setAdminGovernanceOptions' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'setAdminGovernanceOptions'
      > & {
        abi?: never
        functionName?: 'setAdminGovernanceOptions'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryABI,
    'setAdminGovernanceOptions'
  >({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'setAdminGovernanceOptions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useCryptoPunksGroupRegistrySetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryABI,
    'setApprovalForAll'
  >({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useCryptoPunksGroupRegistryUpgradeTo<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'upgradeTo'
        >['abi'],
        'upgradeTo'
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'upgradeTo'
      > & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryABI,
    'upgradeTo'
  >({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useCryptoPunksGroupRegistryUpgradeToAndCall<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryABI,
          'upgradeToAndCall'
        >['abi'],
        'upgradeToAndCall'
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryABI,
        'upgradeToAndCall'
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryABI,
    'upgradeToAndCall'
  >({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__.
 */
export function usePrepareCryptoPunksGroupRegistryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"buy"`.
 */
export function usePrepareCryptoPunksGroupRegistryBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksGroupRegistryABI, 'buy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'buy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cryptoPunksGroupRegistryABI, 'buy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"claim"`.
 */
export function usePrepareCryptoPunksGroupRegistryClaim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksGroupRegistryABI, 'claim'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'claim',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    'claim'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"contribute"`.
 */
export function usePrepareCryptoPunksGroupRegistryContribute(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryABI,
      'contribute'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'contribute',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    'contribute'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"create"`.
 */
export function usePrepareCryptoPunksGroupRegistryCreate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksGroupRegistryABI, 'create'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'create',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    'create'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareCryptoPunksGroupRegistryGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryABI,
      'grantRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareCryptoPunksGroupRegistryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryABI,
      'initialize'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"refundExpired"`.
 */
export function usePrepareCryptoPunksGroupRegistryRefundExpired(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryABI,
      'refundExpired'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'refundExpired',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    'refundExpired'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareCryptoPunksGroupRegistryRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareCryptoPunksGroupRegistryRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryABI,
      'revokeRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareCryptoPunksGroupRegistrySafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryABI,
      'safeBatchTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareCryptoPunksGroupRegistrySafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"setAdminGovernanceOptions"`.
 */
export function usePrepareCryptoPunksGroupRegistrySetAdminGovernanceOptions(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryABI,
      'setAdminGovernanceOptions'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'setAdminGovernanceOptions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    'setAdminGovernanceOptions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareCryptoPunksGroupRegistrySetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareCryptoPunksGroupRegistryUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryABI,
      'upgradeTo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    'upgradeTo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareCryptoPunksGroupRegistryUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__.
 */
export function useCryptoPunksGroupRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useCryptoPunksGroupRegistryAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useCryptoPunksGroupRegistryApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useCryptoPunksGroupRegistryBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryABI,
      'BeaconUpgraded'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"Claimed"`.
 */
export function useCryptoPunksGroupRegistryClaimedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'Claimed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'Claimed',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'Claimed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"Contributed"`.
 */
export function useCryptoPunksGroupRegistryContributedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'Contributed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'Contributed',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryABI,
    'Contributed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useCryptoPunksGroupRegistryGroupCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'GroupCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'GroupCreated',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryABI,
    'GroupCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"GroupWon"`.
 */
export function useCryptoPunksGroupRegistryGroupWonEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'GroupWon'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'GroupWon',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'GroupWon'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"Initialized"`.
 */
export function useCryptoPunksGroupRegistryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useCryptoPunksGroupRegistryRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryABI,
      'RoleAdminChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useCryptoPunksGroupRegistryRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useCryptoPunksGroupRegistryRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useCryptoPunksGroupRegistryTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryABI,
    'TransferBatch'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useCryptoPunksGroupRegistryTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryABI,
      'TransferSingle'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryABI,
    'TransferSingle'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"URI"`.
 */
export function useCryptoPunksGroupRegistryUriEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'URI'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useCryptoPunksGroupRegistryUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksGroupRegistryABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__.
 */
export function useCryptoPunksGroupRegistryTest(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: cryptoPunksGroupRegistryTestABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__.
 */
export function useCryptoPunksGroupRegistryTestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryTestABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryTestABI,
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useCryptoPunksGroupRegistryTestIsTest<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryTestABI,
    'IS_TEST'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'IS_TEST',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'IS_TEST',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"failed"`.
 */
export function useCryptoPunksGroupRegistryTestFailed<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryTestABI,
    'failed'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'failed',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'failed',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'failed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"groupRegistry"`.
 */
export function useCryptoPunksGroupRegistryTestGroupRegistry<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryTestABI,
    'groupRegistry'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'groupRegistry',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'groupRegistry',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'groupRegistry',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"mockCryptoPunksMarket"`.
 */
export function useCryptoPunksGroupRegistryTestMockCryptoPunksMarket<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryTestABI,
    'mockCryptoPunksMarket'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'mockCryptoPunksMarket',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'mockCryptoPunksMarket',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'mockCryptoPunksMarket',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"mockMosaicRegistry"`.
 */
export function useCryptoPunksGroupRegistryTestMockMosaicRegistry<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryTestABI,
    'mockMosaicRegistry'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'mockMosaicRegistry',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'mockMosaicRegistry',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'mockMosaicRegistry',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"museum"`.
 */
export function useCryptoPunksGroupRegistryTestMuseum<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryTestABI,
    'museum'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'museum',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'museum',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'museum',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"originalOwner"`.
 */
export function useCryptoPunksGroupRegistryTestOriginalOwner<
  TSelectData = ReadContractResult<
    typeof cryptoPunksGroupRegistryTestABI,
    'originalOwner'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'originalOwner',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'originalOwner',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'originalOwner',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__.
 */
export function useCryptoPunksGroupRegistryTestWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryTestABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryTestABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryTestABI,
    TFunctionName
  >({ abi: cryptoPunksGroupRegistryTestABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"setUp"`.
 */
export function useCryptoPunksGroupRegistryTestSetUp<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryTestABI,
          'setUp'
        >['abi'],
        'setUp'
      > & { functionName?: 'setUp' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryTestABI,
        'setUp'
      > & {
        abi?: never
        functionName?: 'setUp'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryTestABI,
    'setUp'
  >({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'setUp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"test_buy"`.
 */
export function useCryptoPunksGroupRegistryTestTestBuy<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryTestABI,
          'test_buy'
        >['abi'],
        'test_buy'
      > & { functionName?: 'test_buy' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryTestABI,
        'test_buy'
      > & {
        abi?: never
        functionName?: 'test_buy'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryTestABI,
    'test_buy'
  >({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'test_buy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"test_calculateReservePrice"`.
 */
export function useCryptoPunksGroupRegistryTestTestCalculateReservePrice<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryTestABI,
          'test_calculateReservePrice'
        >['abi'],
        'test_calculateReservePrice'
      > & { functionName?: 'test_calculateReservePrice' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryTestABI,
        'test_calculateReservePrice'
      > & {
        abi?: never
        functionName?: 'test_calculateReservePrice'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryTestABI,
    'test_calculateReservePrice'
  >({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'test_calculateReservePrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"test_claim"`.
 */
export function useCryptoPunksGroupRegistryTestTestClaim<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryTestABI,
          'test_claim'
        >['abi'],
        'test_claim'
      > & { functionName?: 'test_claim' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryTestABI,
        'test_claim'
      > & {
        abi?: never
        functionName?: 'test_claim'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryTestABI,
    'test_claim'
  >({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'test_claim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"test_claim_refund"`.
 */
export function useCryptoPunksGroupRegistryTestTestClaimRefund<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryTestABI,
          'test_claim_refund'
        >['abi'],
        'test_claim_refund'
      > & { functionName?: 'test_claim_refund' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryTestABI,
        'test_claim_refund'
      > & {
        abi?: never
        functionName?: 'test_claim_refund'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryTestABI,
    'test_claim_refund'
  >({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'test_claim_refund',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"test_claim_refund_noSurplus"`.
 */
export function useCryptoPunksGroupRegistryTestTestClaimRefundNoSurplus<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryTestABI,
          'test_claim_refund_noSurplus'
        >['abi'],
        'test_claim_refund_noSurplus'
      > & { functionName?: 'test_claim_refund_noSurplus' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryTestABI,
        'test_claim_refund_noSurplus'
      > & {
        abi?: never
        functionName?: 'test_claim_refund_noSurplus'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryTestABI,
    'test_claim_refund_noSurplus'
  >({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'test_claim_refund_noSurplus',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"test_create"`.
 */
export function useCryptoPunksGroupRegistryTestTestCreate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryTestABI,
          'test_create'
        >['abi'],
        'test_create'
      > & { functionName?: 'test_create' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryTestABI,
        'test_create'
      > & {
        abi?: never
        functionName?: 'test_create'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryTestABI,
    'test_create'
  >({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'test_create',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"test_refundExpired"`.
 */
export function useCryptoPunksGroupRegistryTestTestRefundExpired<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksGroupRegistryTestABI,
          'test_refundExpired'
        >['abi'],
        'test_refundExpired'
      > & { functionName?: 'test_refundExpired' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksGroupRegistryTestABI,
        'test_refundExpired'
      > & {
        abi?: never
        functionName?: 'test_refundExpired'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksGroupRegistryTestABI,
    'test_refundExpired'
  >({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'test_refundExpired',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__.
 */
export function usePrepareCryptoPunksGroupRegistryTestWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryTestABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"setUp"`.
 */
export function usePrepareCryptoPunksGroupRegistryTestSetUp(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'setUp'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'setUp',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'setUp'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"test_buy"`.
 */
export function usePrepareCryptoPunksGroupRegistryTestTestBuy(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'test_buy'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'test_buy',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'test_buy'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"test_calculateReservePrice"`.
 */
export function usePrepareCryptoPunksGroupRegistryTestTestCalculateReservePrice(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'test_calculateReservePrice'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'test_calculateReservePrice',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'test_calculateReservePrice'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"test_claim"`.
 */
export function usePrepareCryptoPunksGroupRegistryTestTestClaim(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'test_claim'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'test_claim',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'test_claim'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"test_claim_refund"`.
 */
export function usePrepareCryptoPunksGroupRegistryTestTestClaimRefund(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'test_claim_refund'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'test_claim_refund',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'test_claim_refund'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"test_claim_refund_noSurplus"`.
 */
export function usePrepareCryptoPunksGroupRegistryTestTestClaimRefundNoSurplus(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'test_claim_refund_noSurplus'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'test_claim_refund_noSurplus',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'test_claim_refund_noSurplus'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"test_create"`.
 */
export function usePrepareCryptoPunksGroupRegistryTestTestCreate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'test_create'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'test_create',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'test_create'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `functionName` set to `"test_refundExpired"`.
 */
export function usePrepareCryptoPunksGroupRegistryTestTestRefundExpired(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'test_refundExpired'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksGroupRegistryTestABI,
    functionName: 'test_refundExpired',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'test_refundExpired'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__.
 */
export function useCryptoPunksGroupRegistryTestEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryTestABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"Claimed"`.
 */
export function useCryptoPunksGroupRegistryTestClaimedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryTestABI, 'Claimed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'Claimed',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'Claimed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"Contributed"`.
 */
export function useCryptoPunksGroupRegistryTestContributedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'Contributed'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'Contributed',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'Contributed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useCryptoPunksGroupRegistryTestGroupCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'GroupCreated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'GroupCreated',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'GroupCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"GroupWon"`.
 */
export function useCryptoPunksGroupRegistryTestGroupWonEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryTestABI, 'GroupWon'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'GroupWon',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'GroupWon'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log"`.
 */
export function useCryptoPunksGroupRegistryTestLogEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryTestABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksGroupRegistryTestABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_address"`.
 */
export function useCryptoPunksGroupRegistryTestLogAddressEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'log_address'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_address'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_array"`.
 */
export function useCryptoPunksGroupRegistryTestLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryTestABI, 'log_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_array'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useCryptoPunksGroupRegistryTestLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryTestABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_bytes'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useCryptoPunksGroupRegistryTestLogBytes32Event(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'log_bytes32'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_bytes32'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_int"`.
 */
export function useCryptoPunksGroupRegistryTestLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryTestABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_int'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useCryptoPunksGroupRegistryTestLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'log_named_address'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_named_address'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useCryptoPunksGroupRegistryTestLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'log_named_array'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_named_array'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useCryptoPunksGroupRegistryTestLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'log_named_bytes'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_named_bytes'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useCryptoPunksGroupRegistryTestLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'log_named_bytes32'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_named_bytes32'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useCryptoPunksGroupRegistryTestLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'log_named_decimal_int'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_named_decimal_int'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useCryptoPunksGroupRegistryTestLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'log_named_decimal_uint'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_named_decimal_uint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useCryptoPunksGroupRegistryTestLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'log_named_int'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_named_int'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useCryptoPunksGroupRegistryTestLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'log_named_string'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_named_string'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useCryptoPunksGroupRegistryTestLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'log_named_uint'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_named_uint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_string"`.
 */
export function useCryptoPunksGroupRegistryTestLogStringEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksGroupRegistryTestABI,
      'log_string'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_string'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"log_uint"`.
 */
export function useCryptoPunksGroupRegistryTestLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryTestABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksGroupRegistryTestABI,
    'log_uint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksGroupRegistryTestABI}__ and `eventName` set to `"logs"`.
 */
export function useCryptoPunksGroupRegistryTestLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksGroupRegistryTestABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksGroupRegistryTestABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksGroupRegistryTestABI, 'logs'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link cryptoPunksMarketDeployerABI}__.
 */
export function useCryptoPunksMarketDeployer(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: cryptoPunksMarketDeployerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketDeployerABI}__.
 */
export function useCryptoPunksMarketDeployerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof cryptoPunksMarketDeployerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMarketDeployerABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketDeployerABI,
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketDeployerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketDeployerABI}__ and `functionName` set to `"IS_SCRIPT"`.
 */
export function useCryptoPunksMarketDeployerIsScript<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMarketDeployerABI,
    'IS_SCRIPT'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMarketDeployerABI,
      'IS_SCRIPT',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketDeployerABI,
    functionName: 'IS_SCRIPT',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketDeployerABI,
    'IS_SCRIPT',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketDeployerABI}__.
 */
export function useCryptoPunksMarketDeployerWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketDeployerABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMarketDeployerABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMarketDeployerABI,
    TFunctionName
  >({ abi: cryptoPunksMarketDeployerABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketDeployerABI}__ and `functionName` set to `"run"`.
 */
export function useCryptoPunksMarketDeployerRun<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketDeployerABI,
          'run'
        >['abi'],
        'run'
      > & { functionName?: 'run' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMarketDeployerABI,
        'run'
      > & {
        abi?: never
        functionName?: 'run'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMarketDeployerABI, 'run'>({
    abi: cryptoPunksMarketDeployerABI,
    functionName: 'run',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketDeployerABI}__.
 */
export function usePrepareCryptoPunksMarketDeployerWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMarketDeployerABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketDeployerABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMarketDeployerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketDeployerABI}__ and `functionName` set to `"run"`.
 */
export function usePrepareCryptoPunksMarketDeployerRun(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksMarketDeployerABI, 'run'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketDeployerABI,
    functionName: 'run',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMarketDeployerABI,
    'run'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__.
 */
export function useCryptoPunksMosaicRegistry(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: cryptoPunksMosaicRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__.
 */
export function useCryptoPunksMosaicRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"BID_ACCEPTANCE_THRESHOLD_BPS"`.
 */
export function useCryptoPunksMosaicRegistryBidAcceptanceThresholdBps<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'BID_ACCEPTANCE_THRESHOLD_BPS'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'BID_ACCEPTANCE_THRESHOLD_BPS',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'BID_ACCEPTANCE_THRESHOLD_BPS',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'BID_ACCEPTANCE_THRESHOLD_BPS',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"BID_EXPIRY_BLOCK_SECONDS"`.
 */
export function useCryptoPunksMosaicRegistryBidExpiryBlockSeconds<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'BID_EXPIRY_BLOCK_SECONDS'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'BID_EXPIRY_BLOCK_SECONDS',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'BID_EXPIRY_BLOCK_SECONDS',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'BID_EXPIRY_BLOCK_SECONDS',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useCryptoPunksMosaicRegistryDefaultAdminRole<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'DEFAULT_ADMIN_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'DEFAULT_ADMIN_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'DEFAULT_ADMIN_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"MINTER_ROLE"`.
 */
export function useCryptoPunksMosaicRegistryMinterRole<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'MINTER_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'MINTER_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'MINTER_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'MINTER_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"RESERVE_PRICE_PROPOSAL_TURNOUT_THRESHOLD_BPS"`.
 */
export function useCryptoPunksMosaicRegistryReservePriceProposalTurnoutThresholdBps<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'RESERVE_PRICE_PROPOSAL_TURNOUT_THRESHOLD_BPS'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'RESERVE_PRICE_PROPOSAL_TURNOUT_THRESHOLD_BPS',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'RESERVE_PRICE_PROPOSAL_TURNOUT_THRESHOLD_BPS',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'RESERVE_PRICE_PROPOSAL_TURNOUT_THRESHOLD_BPS',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCryptoPunksMosaicRegistryBalanceOf<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'balanceOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"fromMosaicId"`.
 */
export function useCryptoPunksMosaicRegistryFromMosaicId<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'fromMosaicId'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'fromMosaicId',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'fromMosaicId',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'fromMosaicId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"getApproved"`.
 */
export function useCryptoPunksMosaicRegistryGetApproved<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'getApproved'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"getAverageReservePriceProposals"`.
 */
export function useCryptoPunksMosaicRegistryGetAverageReservePriceProposals<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'getAverageReservePriceProposals'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'getAverageReservePriceProposals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'getAverageReservePriceProposals',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'getAverageReservePriceProposals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"getBid"`.
 */
export function useCryptoPunksMosaicRegistryGetBid<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'getBid'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'getBid',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'getBid',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'getBid',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"getDistributionStatus"`.
 */
export function useCryptoPunksMosaicRegistryGetDistributionStatus<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'getDistributionStatus'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'getDistributionStatus',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'getDistributionStatus',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'getDistributionStatus',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"getLatestOriginalId"`.
 */
export function useCryptoPunksMosaicRegistryGetLatestOriginalId<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'getLatestOriginalId'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'getLatestOriginalId',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'getLatestOriginalId',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'getLatestOriginalId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"getMono"`.
 */
export function useCryptoPunksMosaicRegistryGetMono<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'getMono'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'getMono',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'getMono',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'getMono',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"getMonoLifeCycle"`.
 */
export function useCryptoPunksMosaicRegistryGetMonoLifeCycle<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'getMonoLifeCycle'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'getMonoLifeCycle',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'getMonoLifeCycle',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'getMonoLifeCycle',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"getOriginal"`.
 */
export function useCryptoPunksMosaicRegistryGetOriginal<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'getOriginal'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'getOriginal',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'getOriginal',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'getOriginal',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"getPerMonoResaleFund"`.
 */
export function useCryptoPunksMosaicRegistryGetPerMonoResaleFund<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'getPerMonoResaleFund'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'getPerMonoResaleFund',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'getPerMonoResaleFund',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'getPerMonoResaleFund',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"getReconstitutionStatus"`.
 */
export function useCryptoPunksMosaicRegistryGetReconstitutionStatus<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'getReconstitutionStatus'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'getReconstitutionStatus',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'getReconstitutionStatus',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'getReconstitutionStatus',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useCryptoPunksMosaicRegistryGetRoleAdmin<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'getRoleAdmin'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"hasRole"`.
 */
export function useCryptoPunksMosaicRegistryHasRole<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'hasRole'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'hasRole',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"hasVotableActiveBid"`.
 */
export function useCryptoPunksMosaicRegistryHasVotableActiveBid<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'hasVotableActiveBid'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'hasVotableActiveBid',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'hasVotableActiveBid',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'hasVotableActiveBid',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useCryptoPunksMosaicRegistryIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"isBidAcceptable"`.
 */
export function useCryptoPunksMosaicRegistryIsBidAcceptable<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'isBidAcceptable'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'isBidAcceptable',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'isBidAcceptable',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'isBidAcceptable',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"museum"`.
 */
export function useCryptoPunksMosaicRegistryMuseum<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'museum'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'museum',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'museum',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'museum',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"name"`.
 */
export function useCryptoPunksMosaicRegistryName<
  TSelectData = ReadContractResult<typeof cryptoPunksMosaicRegistryABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useCryptoPunksMosaicRegistryOwnerOf<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'ownerOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'ownerOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useCryptoPunksMosaicRegistryProxiableUuid<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'proxiableUUID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'proxiableUUID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'proxiableUUID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"sumBidResponses"`.
 */
export function useCryptoPunksMosaicRegistrySumBidResponses<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'sumBidResponses'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'sumBidResponses',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'sumBidResponses',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'sumBidResponses',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"sumReservePriceProposals"`.
 */
export function useCryptoPunksMosaicRegistrySumReservePriceProposals<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'sumReservePriceProposals'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'sumReservePriceProposals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'sumReservePriceProposals',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'sumReservePriceProposals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCryptoPunksMosaicRegistrySupportsInterface<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"symbol"`.
 */
export function useCryptoPunksMosaicRegistrySymbol<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'symbol'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'symbol',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"toBidId"`.
 */
export function useCryptoPunksMosaicRegistryToBidId<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'toBidId'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'toBidId',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'toBidId',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'toBidId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"toMosaicId"`.
 */
export function useCryptoPunksMosaicRegistryToMosaicId<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'toMosaicId'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'toMosaicId',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'toMosaicId',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'toMosaicId',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useCryptoPunksMosaicRegistryTokenUri<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryABI,
    'tokenURI'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'tokenURI',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__.
 */
export function useCryptoPunksMosaicRegistryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    TFunctionName
  >({ abi: cryptoPunksMosaicRegistryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"approve"`.
 */
export function useCryptoPunksMosaicRegistryApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'approve'
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'approve'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"bid"`.
 */
export function useCryptoPunksMosaicRegistryBid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'bid'
        >['abi'],
        'bid'
      > & { functionName?: 'bid' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'bid'
      > & {
        abi?: never
        functionName?: 'bid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMosaicRegistryABI, 'bid'>({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'bid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"create"`.
 */
export function useCryptoPunksMosaicRegistryCreate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'create'
        >['abi'],
        'create'
      > & { functionName?: 'create' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'create'
      > & {
        abi?: never
        functionName?: 'create'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMosaicRegistryABI, 'create'>(
    {
      abi: cryptoPunksMosaicRegistryABI,
      functionName: 'create',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"finalizeAcceptedBid"`.
 */
export function useCryptoPunksMosaicRegistryFinalizeAcceptedBid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'finalizeAcceptedBid'
        >['abi'],
        'finalizeAcceptedBid'
      > & { functionName?: 'finalizeAcceptedBid' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'finalizeAcceptedBid'
      > & {
        abi?: never
        functionName?: 'finalizeAcceptedBid'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'finalizeAcceptedBid'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'finalizeAcceptedBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"finalizeProposedBid"`.
 */
export function useCryptoPunksMosaicRegistryFinalizeProposedBid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'finalizeProposedBid'
        >['abi'],
        'finalizeProposedBid'
      > & { functionName?: 'finalizeProposedBid' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'finalizeProposedBid'
      > & {
        abi?: never
        functionName?: 'finalizeProposedBid'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'finalizeProposedBid'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'finalizeProposedBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"grantMintAuthority"`.
 */
export function useCryptoPunksMosaicRegistryGrantMintAuthority<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'grantMintAuthority'
        >['abi'],
        'grantMintAuthority'
      > & { functionName?: 'grantMintAuthority' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'grantMintAuthority'
      > & {
        abi?: never
        functionName?: 'grantMintAuthority'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'grantMintAuthority'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'grantMintAuthority',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"grantRole"`.
 */
export function useCryptoPunksMosaicRegistryGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'grantRole'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"initialize"`.
 */
export function useCryptoPunksMosaicRegistryInitialize<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'initialize'
        >['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'initialize'
      > & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'initialize'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"mint"`.
 */
export function useCryptoPunksMosaicRegistryMint<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'mint'
        >['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'mint'
      > & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMosaicRegistryABI, 'mint'>({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"proposeReservePrice"`.
 */
export function useCryptoPunksMosaicRegistryProposeReservePrice<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'proposeReservePrice'
        >['abi'],
        'proposeReservePrice'
      > & { functionName?: 'proposeReservePrice' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'proposeReservePrice'
      > & {
        abi?: never
        functionName?: 'proposeReservePrice'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'proposeReservePrice'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'proposeReservePrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"proposeReservePriceBatch"`.
 */
export function useCryptoPunksMosaicRegistryProposeReservePriceBatch<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'proposeReservePriceBatch'
        >['abi'],
        'proposeReservePriceBatch'
      > & { functionName?: 'proposeReservePriceBatch' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'proposeReservePriceBatch'
      > & {
        abi?: never
        functionName?: 'proposeReservePriceBatch'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'proposeReservePriceBatch'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'proposeReservePriceBatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"refundBidDeposit"`.
 */
export function useCryptoPunksMosaicRegistryRefundBidDeposit<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'refundBidDeposit'
        >['abi'],
        'refundBidDeposit'
      > & { functionName?: 'refundBidDeposit' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'refundBidDeposit'
      > & {
        abi?: never
        functionName?: 'refundBidDeposit'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'refundBidDeposit'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'refundBidDeposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"refundOnSold"`.
 */
export function useCryptoPunksMosaicRegistryRefundOnSold<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'refundOnSold'
        >['abi'],
        'refundOnSold'
      > & { functionName?: 'refundOnSold' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'refundOnSold'
      > & {
        abi?: never
        functionName?: 'refundOnSold'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'refundOnSold'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'refundOnSold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useCryptoPunksMosaicRegistryRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'renounceRole'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"respondToBidBatch"`.
 */
export function useCryptoPunksMosaicRegistryRespondToBidBatch<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'respondToBidBatch'
        >['abi'],
        'respondToBidBatch'
      > & { functionName?: 'respondToBidBatch' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'respondToBidBatch'
      > & {
        abi?: never
        functionName?: 'respondToBidBatch'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'respondToBidBatch'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'respondToBidBatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useCryptoPunksMosaicRegistryRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'revokeRole'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useCryptoPunksMosaicRegistrySafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'safeTransferFrom'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"setAdminGovernanceOptions"`.
 */
export function useCryptoPunksMosaicRegistrySetAdminGovernanceOptions<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'setAdminGovernanceOptions'
        >['abi'],
        'setAdminGovernanceOptions'
      > & { functionName?: 'setAdminGovernanceOptions' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'setAdminGovernanceOptions'
      > & {
        abi?: never
        functionName?: 'setAdminGovernanceOptions'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'setAdminGovernanceOptions'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'setAdminGovernanceOptions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useCryptoPunksMosaicRegistrySetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'setApprovalForAll'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"setInvalidMetadataUri"`.
 */
export function useCryptoPunksMosaicRegistrySetInvalidMetadataUri<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'setInvalidMetadataUri'
        >['abi'],
        'setInvalidMetadataUri'
      > & { functionName?: 'setInvalidMetadataUri' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'setInvalidMetadataUri'
      > & {
        abi?: never
        functionName?: 'setInvalidMetadataUri'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'setInvalidMetadataUri'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'setInvalidMetadataUri',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"setMetadataBaseUri"`.
 */
export function useCryptoPunksMosaicRegistrySetMetadataBaseUri<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'setMetadataBaseUri'
        >['abi'],
        'setMetadataBaseUri'
      > & { functionName?: 'setMetadataBaseUri' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'setMetadataBaseUri'
      > & {
        abi?: never
        functionName?: 'setMetadataBaseUri'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'setMetadataBaseUri'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'setMetadataBaseUri',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"setOriginalReservePrice"`.
 */
export function useCryptoPunksMosaicRegistrySetOriginalReservePrice<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'setOriginalReservePrice'
        >['abi'],
        'setOriginalReservePrice'
      > & { functionName?: 'setOriginalReservePrice' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'setOriginalReservePrice'
      > & {
        abi?: never
        functionName?: 'setOriginalReservePrice'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'setOriginalReservePrice'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'setOriginalReservePrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"setPresetId"`.
 */
export function useCryptoPunksMosaicRegistrySetPresetId<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'setPresetId'
        >['abi'],
        'setPresetId'
      > & { functionName?: 'setPresetId' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'setPresetId'
      > & {
        abi?: never
        functionName?: 'setPresetId'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'setPresetId'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'setPresetId',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useCryptoPunksMosaicRegistryTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'transferFrom'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useCryptoPunksMosaicRegistryUpgradeTo<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'upgradeTo'
        >['abi'],
        'upgradeTo'
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'upgradeTo'
      > & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'upgradeTo'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useCryptoPunksMosaicRegistryUpgradeToAndCall<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryABI,
          'upgradeToAndCall'
        >['abi'],
        'upgradeToAndCall'
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryABI,
        'upgradeToAndCall'
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryABI,
    'upgradeToAndCall'
  >({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__.
 */
export function usePrepareCryptoPunksMosaicRegistryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareCryptoPunksMosaicRegistryApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"bid"`.
 */
export function usePrepareCryptoPunksMosaicRegistryBid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksMosaicRegistryABI, 'bid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'bid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'bid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"create"`.
 */
export function usePrepareCryptoPunksMosaicRegistryCreate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'create'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'create',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'create'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"finalizeAcceptedBid"`.
 */
export function usePrepareCryptoPunksMosaicRegistryFinalizeAcceptedBid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'finalizeAcceptedBid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'finalizeAcceptedBid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'finalizeAcceptedBid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"finalizeProposedBid"`.
 */
export function usePrepareCryptoPunksMosaicRegistryFinalizeProposedBid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'finalizeProposedBid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'finalizeProposedBid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'finalizeProposedBid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"grantMintAuthority"`.
 */
export function usePrepareCryptoPunksMosaicRegistryGrantMintAuthority(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'grantMintAuthority'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'grantMintAuthority',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'grantMintAuthority'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareCryptoPunksMosaicRegistryGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'grantRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareCryptoPunksMosaicRegistryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'initialize'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareCryptoPunksMosaicRegistryMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksMosaicRegistryABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'mint'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"proposeReservePrice"`.
 */
export function usePrepareCryptoPunksMosaicRegistryProposeReservePrice(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'proposeReservePrice'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'proposeReservePrice',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'proposeReservePrice'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"proposeReservePriceBatch"`.
 */
export function usePrepareCryptoPunksMosaicRegistryProposeReservePriceBatch(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'proposeReservePriceBatch'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'proposeReservePriceBatch',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'proposeReservePriceBatch'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"refundBidDeposit"`.
 */
export function usePrepareCryptoPunksMosaicRegistryRefundBidDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'refundBidDeposit'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'refundBidDeposit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'refundBidDeposit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"refundOnSold"`.
 */
export function usePrepareCryptoPunksMosaicRegistryRefundOnSold(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'refundOnSold'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'refundOnSold',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'refundOnSold'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareCryptoPunksMosaicRegistryRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"respondToBidBatch"`.
 */
export function usePrepareCryptoPunksMosaicRegistryRespondToBidBatch(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'respondToBidBatch'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'respondToBidBatch',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'respondToBidBatch'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareCryptoPunksMosaicRegistryRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'revokeRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareCryptoPunksMosaicRegistrySafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"setAdminGovernanceOptions"`.
 */
export function usePrepareCryptoPunksMosaicRegistrySetAdminGovernanceOptions(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'setAdminGovernanceOptions'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'setAdminGovernanceOptions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'setAdminGovernanceOptions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareCryptoPunksMosaicRegistrySetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"setInvalidMetadataUri"`.
 */
export function usePrepareCryptoPunksMosaicRegistrySetInvalidMetadataUri(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'setInvalidMetadataUri'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'setInvalidMetadataUri',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'setInvalidMetadataUri'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"setMetadataBaseUri"`.
 */
export function usePrepareCryptoPunksMosaicRegistrySetMetadataBaseUri(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'setMetadataBaseUri'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'setMetadataBaseUri',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'setMetadataBaseUri'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"setOriginalReservePrice"`.
 */
export function usePrepareCryptoPunksMosaicRegistrySetOriginalReservePrice(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'setOriginalReservePrice'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'setOriginalReservePrice',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'setOriginalReservePrice'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"setPresetId"`.
 */
export function usePrepareCryptoPunksMosaicRegistrySetPresetId(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'setPresetId'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'setPresetId',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'setPresetId'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareCryptoPunksMosaicRegistryUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'upgradeTo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'upgradeTo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareCryptoPunksMosaicRegistryUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__.
 */
export function useCryptoPunksMosaicRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useCryptoPunksMosaicRegistryAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"Approval"`.
 */
export function useCryptoPunksMosaicRegistryApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useCryptoPunksMosaicRegistryApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useCryptoPunksMosaicRegistryBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'BeaconUpgraded'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"BidAccepted"`.
 */
export function useCryptoPunksMosaicRegistryBidAcceptedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'BidAccepted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'BidAccepted',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'BidAccepted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"BidProposed"`.
 */
export function useCryptoPunksMosaicRegistryBidProposedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'BidProposed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'BidProposed',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'BidProposed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"BidRefunded"`.
 */
export function useCryptoPunksMosaicRegistryBidRefundedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'BidRefunded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'BidRefunded',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'BidRefunded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"BidRejected"`.
 */
export function useCryptoPunksMosaicRegistryBidRejectedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'BidRejected'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'BidRejected',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'BidRejected'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"BidWon"`.
 */
export function useCryptoPunksMosaicRegistryBidWonEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'BidWon'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'BidWon',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'BidWon'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"Initialized"`.
 */
export function useCryptoPunksMosaicRegistryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"MonoRefunded"`.
 */
export function useCryptoPunksMosaicRegistryMonoRefundedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'MonoRefunded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'MonoRefunded',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'MonoRefunded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"OriginalSold"`.
 */
export function useCryptoPunksMosaicRegistryOriginalSoldEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'OriginalSold'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'OriginalSold',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'OriginalSold'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useCryptoPunksMosaicRegistryRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryABI,
      'RoleAdminChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useCryptoPunksMosaicRegistryRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useCryptoPunksMosaicRegistryRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCryptoPunksMosaicRegistryTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useCryptoPunksMosaicRegistryUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMosaicRegistryABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__.
 */
export function useCryptoPunksMosaicRegistryTest(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: cryptoPunksMosaicRegistryTestABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__.
 */
export function useCryptoPunksMosaicRegistryTestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryTestABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryTestABI,
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useCryptoPunksMosaicRegistryTestIsTest<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryTestABI,
    'IS_TEST'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'IS_TEST',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'IS_TEST',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"failed"`.
 */
export function useCryptoPunksMosaicRegistryTestFailed<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryTestABI,
    'failed'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'failed',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'failed',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'failed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"mintAuthority"`.
 */
export function useCryptoPunksMosaicRegistryTestMintAuthority<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryTestABI,
    'mintAuthority'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'mintAuthority',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'mintAuthority',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'mintAuthority',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"mockCryptoPunksMarket"`.
 */
export function useCryptoPunksMosaicRegistryTestMockCryptoPunksMarket<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryTestABI,
    'mockCryptoPunksMarket'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'mockCryptoPunksMarket',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'mockCryptoPunksMarket',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'mockCryptoPunksMarket',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"mosaicRegistry"`.
 */
export function useCryptoPunksMosaicRegistryTestMosaicRegistry<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryTestABI,
    'mosaicRegistry'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'mosaicRegistry',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'mosaicRegistry',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'mosaicRegistry',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"museum"`.
 */
export function useCryptoPunksMosaicRegistryTestMuseum<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMosaicRegistryTestABI,
    'museum'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'museum',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'museum',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'museum',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__.
 */
export function useCryptoPunksMosaicRegistryTestWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    TFunctionName
  >({ abi: cryptoPunksMosaicRegistryTestABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"setUp"`.
 */
export function useCryptoPunksMosaicRegistryTestSetUp<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'setUp'
        >['abi'],
        'setUp'
      > & { functionName?: 'setUp' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'setUp'
      > & {
        abi?: never
        functionName?: 'setUp'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'setUp'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'setUp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_bid"`.
 */
export function useCryptoPunksMosaicRegistryTestTestBid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_bid'
        >['abi'],
        'test_bid'
      > & { functionName?: 'test_bid' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_bid'
      > & {
        abi?: never
        functionName?: 'test_bid'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_bid'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_bid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_bid_belowProposal"`.
 */
export function useCryptoPunksMosaicRegistryTestTestBidBelowProposal<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_bid_belowProposal'
        >['abi'],
        'test_bid_belowProposal'
      > & { functionName?: 'test_bid_belowProposal' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_bid_belowProposal'
      > & {
        abi?: never
        functionName?: 'test_bid_belowProposal'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_bid_belowProposal'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_bid_belowProposal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_bid_originalNotActive"`.
 */
export function useCryptoPunksMosaicRegistryTestTestBidOriginalNotActive<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_bid_originalNotActive'
        >['abi'],
        'test_bid_originalNotActive'
      > & { functionName?: 'test_bid_originalNotActive' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_bid_originalNotActive'
      > & {
        abi?: never
        functionName?: 'test_bid_originalNotActive'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_bid_originalNotActive'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_bid_originalNotActive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_bid_previousBid"`.
 */
export function useCryptoPunksMosaicRegistryTestTestBidPreviousBid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_bid_previousBid'
        >['abi'],
        'test_bid_previousBid'
      > & { functionName?: 'test_bid_previousBid' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_bid_previousBid'
      > & {
        abi?: never
        functionName?: 'test_bid_previousBid'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_bid_previousBid'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_bid_previousBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_bid_previousBid_wonOrAcceptedAlready"`.
 */
export function useCryptoPunksMosaicRegistryTestTestBidPreviousBidWonOrAcceptedAlready<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_bid_previousBid_wonOrAcceptedAlready'
        >['abi'],
        'test_bid_previousBid_wonOrAcceptedAlready'
      > & { functionName?: 'test_bid_previousBid_wonOrAcceptedAlready' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_bid_previousBid_wonOrAcceptedAlready'
      > & {
        abi?: never
        functionName?: 'test_bid_previousBid_wonOrAcceptedAlready'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_bid_previousBid_wonOrAcceptedAlready'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_bid_previousBid_wonOrAcceptedAlready',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_create"`.
 */
export function useCryptoPunksMosaicRegistryTestTestCreate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_create'
        >['abi'],
        'test_create'
      > & { functionName?: 'test_create' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_create'
      > & {
        abi?: never
        functionName?: 'test_create'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_create'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_create',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_create_mustOwnPunk"`.
 */
export function useCryptoPunksMosaicRegistryTestTestCreateMustOwnPunk<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_create_mustOwnPunk'
        >['abi'],
        'test_create_mustOwnPunk'
      > & { functionName?: 'test_create_mustOwnPunk' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_create_mustOwnPunk'
      > & {
        abi?: never
        functionName?: 'test_create_mustOwnPunk'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_create_mustOwnPunk'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_create_mustOwnPunk',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_finalizeAcceptedBid"`.
 */
export function useCryptoPunksMosaicRegistryTestTestFinalizeAcceptedBid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_finalizeAcceptedBid'
        >['abi'],
        'test_finalizeAcceptedBid'
      > & { functionName?: 'test_finalizeAcceptedBid' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_finalizeAcceptedBid'
      > & {
        abi?: never
        functionName?: 'test_finalizeAcceptedBid'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_finalizeAcceptedBid'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_finalizeAcceptedBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_finalizeProposedBid"`.
 */
export function useCryptoPunksMosaicRegistryTestTestFinalizeProposedBid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_finalizeProposedBid'
        >['abi'],
        'test_finalizeProposedBid'
      > & { functionName?: 'test_finalizeProposedBid' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_finalizeProposedBid'
      > & {
        abi?: never
        functionName?: 'test_finalizeProposedBid'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_finalizeProposedBid'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_finalizeProposedBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_getAverageReservePriceProposals"`.
 */
export function useCryptoPunksMosaicRegistryTestTestGetAverageReservePriceProposals<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_getAverageReservePriceProposals'
        >['abi'],
        'test_getAverageReservePriceProposals'
      > & { functionName?: 'test_getAverageReservePriceProposals' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_getAverageReservePriceProposals'
      > & {
        abi?: never
        functionName?: 'test_getAverageReservePriceProposals'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_getAverageReservePriceProposals'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_getAverageReservePriceProposals',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_getAverageReservePriceProposals_notEnough"`.
 */
export function useCryptoPunksMosaicRegistryTestTestGetAverageReservePriceProposalsNotEnough<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_getAverageReservePriceProposals_notEnough'
        >['abi'],
        'test_getAverageReservePriceProposals_notEnough'
      > & { functionName?: 'test_getAverageReservePriceProposals_notEnough' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_getAverageReservePriceProposals_notEnough'
      > & {
        abi?: never
        functionName?: 'test_getAverageReservePriceProposals_notEnough'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_getAverageReservePriceProposals_notEnough'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_getAverageReservePriceProposals_notEnough',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_getPerMonoResaleFund"`.
 */
export function useCryptoPunksMosaicRegistryTestTestGetPerMonoResaleFund<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_getPerMonoResaleFund'
        >['abi'],
        'test_getPerMonoResaleFund'
      > & { functionName?: 'test_getPerMonoResaleFund' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_getPerMonoResaleFund'
      > & {
        abi?: never
        functionName?: 'test_getPerMonoResaleFund'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_getPerMonoResaleFund'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_getPerMonoResaleFund',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_isBidAcceptable"`.
 */
export function useCryptoPunksMosaicRegistryTestTestIsBidAcceptable<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_isBidAcceptable'
        >['abi'],
        'test_isBidAcceptable'
      > & { functionName?: 'test_isBidAcceptable' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_isBidAcceptable'
      > & {
        abi?: never
        functionName?: 'test_isBidAcceptable'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_isBidAcceptable'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_isBidAcceptable',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_mint"`.
 */
export function useCryptoPunksMosaicRegistryTestTestMint<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_mint'
        >['abi'],
        'test_mint'
      > & { functionName?: 'test_mint' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_mint'
      > & {
        abi?: never
        functionName?: 'test_mint'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_mint'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_proposeReservePrice"`.
 */
export function useCryptoPunksMosaicRegistryTestTestProposeReservePrice<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_proposeReservePrice'
        >['abi'],
        'test_proposeReservePrice'
      > & { functionName?: 'test_proposeReservePrice' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_proposeReservePrice'
      > & {
        abi?: never
        functionName?: 'test_proposeReservePrice'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_proposeReservePrice'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_proposeReservePrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_proposeReservePriceBatch"`.
 */
export function useCryptoPunksMosaicRegistryTestTestProposeReservePriceBatch<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_proposeReservePriceBatch'
        >['abi'],
        'test_proposeReservePriceBatch'
      > & { functionName?: 'test_proposeReservePriceBatch' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_proposeReservePriceBatch'
      > & {
        abi?: never
        functionName?: 'test_proposeReservePriceBatch'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_proposeReservePriceBatch'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_proposeReservePriceBatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_proposeReservePriceBatch_notInRange"`.
 */
export function useCryptoPunksMosaicRegistryTestTestProposeReservePriceBatchNotInRange<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_proposeReservePriceBatch_notInRange'
        >['abi'],
        'test_proposeReservePriceBatch_notInRange'
      > & { functionName?: 'test_proposeReservePriceBatch_notInRange' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_proposeReservePriceBatch_notInRange'
      > & {
        abi?: never
        functionName?: 'test_proposeReservePriceBatch_notInRange'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_proposeReservePriceBatch_notInRange'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_proposeReservePriceBatch_notInRange',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_refundBidDeposit"`.
 */
export function useCryptoPunksMosaicRegistryTestTestRefundBidDeposit<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_refundBidDeposit'
        >['abi'],
        'test_refundBidDeposit'
      > & { functionName?: 'test_refundBidDeposit' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_refundBidDeposit'
      > & {
        abi?: never
        functionName?: 'test_refundBidDeposit'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_refundBidDeposit'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_refundBidDeposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_refundBidDeposit_onlyBidder"`.
 */
export function useCryptoPunksMosaicRegistryTestTestRefundBidDepositOnlyBidder<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_refundBidDeposit_onlyBidder'
        >['abi'],
        'test_refundBidDeposit_onlyBidder'
      > & { functionName?: 'test_refundBidDeposit_onlyBidder' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_refundBidDeposit_onlyBidder'
      > & {
        abi?: never
        functionName?: 'test_refundBidDeposit_onlyBidder'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_refundBidDeposit_onlyBidder'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_refundBidDeposit_onlyBidder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_refundOnSold"`.
 */
export function useCryptoPunksMosaicRegistryTestTestRefundOnSold<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_refundOnSold'
        >['abi'],
        'test_refundOnSold'
      > & { functionName?: 'test_refundOnSold' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_refundOnSold'
      > & {
        abi?: never
        functionName?: 'test_refundOnSold'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_refundOnSold'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_refundOnSold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_respondToBidBatch"`.
 */
export function useCryptoPunksMosaicRegistryTestTestRespondToBidBatch<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_respondToBidBatch'
        >['abi'],
        'test_respondToBidBatch'
      > & { functionName?: 'test_respondToBidBatch' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_respondToBidBatch'
      > & {
        abi?: never
        functionName?: 'test_respondToBidBatch'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_respondToBidBatch'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_respondToBidBatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_sumBidResponses"`.
 */
export function useCryptoPunksMosaicRegistryTestTestSumBidResponses<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_sumBidResponses'
        >['abi'],
        'test_sumBidResponses'
      > & { functionName?: 'test_sumBidResponses' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_sumBidResponses'
      > & {
        abi?: never
        functionName?: 'test_sumBidResponses'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_sumBidResponses'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_sumBidResponses',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_sumBidResponses_halfValidResponses"`.
 */
export function useCryptoPunksMosaicRegistryTestTestSumBidResponsesHalfValidResponses<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_sumBidResponses_halfValidResponses'
        >['abi'],
        'test_sumBidResponses_halfValidResponses'
      > & { functionName?: 'test_sumBidResponses_halfValidResponses' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_sumBidResponses_halfValidResponses'
      > & {
        abi?: never
        functionName?: 'test_sumBidResponses_halfValidResponses'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_sumBidResponses_halfValidResponses'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_sumBidResponses_halfValidResponses',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_sumBidResponses_noOngoingActiveBid"`.
 */
export function useCryptoPunksMosaicRegistryTestTestSumBidResponsesNoOngoingActiveBid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_sumBidResponses_noOngoingActiveBid'
        >['abi'],
        'test_sumBidResponses_noOngoingActiveBid'
      > & { functionName?: 'test_sumBidResponses_noOngoingActiveBid' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_sumBidResponses_noOngoingActiveBid'
      > & {
        abi?: never
        functionName?: 'test_sumBidResponses_noOngoingActiveBid'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_sumBidResponses_noOngoingActiveBid'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_sumBidResponses_noOngoingActiveBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_sumReservePriceProposals"`.
 */
export function useCryptoPunksMosaicRegistryTestTestSumReservePriceProposals<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_sumReservePriceProposals'
        >['abi'],
        'test_sumReservePriceProposals'
      > & { functionName?: 'test_sumReservePriceProposals' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_sumReservePriceProposals'
      > & {
        abi?: never
        functionName?: 'test_sumReservePriceProposals'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_sumReservePriceProposals'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_sumReservePriceProposals',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_toMosaicId_fromMosaicId"`.
 */
export function useCryptoPunksMosaicRegistryTestTestToMosaicIdFromMosaicId<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMosaicRegistryTestABI,
          'test_toMosaicId_fromMosaicId'
        >['abi'],
        'test_toMosaicId_fromMosaicId'
      > & { functionName?: 'test_toMosaicId_fromMosaicId' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMosaicRegistryTestABI,
        'test_toMosaicId_fromMosaicId'
      > & {
        abi?: never
        functionName?: 'test_toMosaicId_fromMosaicId'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_toMosaicId_fromMosaicId'
  >({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_toMosaicId_fromMosaicId',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__.
 */
export function usePrepareCryptoPunksMosaicRegistryTestWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"setUp"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestSetUp(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'setUp'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'setUp',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'setUp'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_bid"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestBid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_bid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_bid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_bid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_bid_belowProposal"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestBidBelowProposal(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_bid_belowProposal'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_bid_belowProposal',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_bid_belowProposal'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_bid_originalNotActive"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestBidOriginalNotActive(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_bid_originalNotActive'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_bid_originalNotActive',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_bid_originalNotActive'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_bid_previousBid"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestBidPreviousBid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_bid_previousBid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_bid_previousBid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_bid_previousBid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_bid_previousBid_wonOrAcceptedAlready"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestBidPreviousBidWonOrAcceptedAlready(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_bid_previousBid_wonOrAcceptedAlready'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_bid_previousBid_wonOrAcceptedAlready',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_bid_previousBid_wonOrAcceptedAlready'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_create"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestCreate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_create'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_create',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_create'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_create_mustOwnPunk"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestCreateMustOwnPunk(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_create_mustOwnPunk'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_create_mustOwnPunk',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_create_mustOwnPunk'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_finalizeAcceptedBid"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestFinalizeAcceptedBid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_finalizeAcceptedBid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_finalizeAcceptedBid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_finalizeAcceptedBid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_finalizeProposedBid"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestFinalizeProposedBid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_finalizeProposedBid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_finalizeProposedBid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_finalizeProposedBid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_getAverageReservePriceProposals"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestGetAverageReservePriceProposals(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_getAverageReservePriceProposals'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_getAverageReservePriceProposals',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_getAverageReservePriceProposals'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_getAverageReservePriceProposals_notEnough"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestGetAverageReservePriceProposalsNotEnough(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_getAverageReservePriceProposals_notEnough'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_getAverageReservePriceProposals_notEnough',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_getAverageReservePriceProposals_notEnough'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_getPerMonoResaleFund"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestGetPerMonoResaleFund(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_getPerMonoResaleFund'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_getPerMonoResaleFund',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_getPerMonoResaleFund'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_isBidAcceptable"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestIsBidAcceptable(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_isBidAcceptable'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_isBidAcceptable',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_isBidAcceptable'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_mint"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestMint(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_mint'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_mint',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_mint'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_proposeReservePrice"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestProposeReservePrice(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_proposeReservePrice'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_proposeReservePrice',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_proposeReservePrice'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_proposeReservePriceBatch"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestProposeReservePriceBatch(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_proposeReservePriceBatch'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_proposeReservePriceBatch',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_proposeReservePriceBatch'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_proposeReservePriceBatch_notInRange"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestProposeReservePriceBatchNotInRange(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_proposeReservePriceBatch_notInRange'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_proposeReservePriceBatch_notInRange',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_proposeReservePriceBatch_notInRange'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_refundBidDeposit"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestRefundBidDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_refundBidDeposit'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_refundBidDeposit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_refundBidDeposit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_refundBidDeposit_onlyBidder"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestRefundBidDepositOnlyBidder(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_refundBidDeposit_onlyBidder'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_refundBidDeposit_onlyBidder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_refundBidDeposit_onlyBidder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_refundOnSold"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestRefundOnSold(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_refundOnSold'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_refundOnSold',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_refundOnSold'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_respondToBidBatch"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestRespondToBidBatch(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_respondToBidBatch'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_respondToBidBatch',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_respondToBidBatch'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_sumBidResponses"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestSumBidResponses(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_sumBidResponses'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_sumBidResponses',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_sumBidResponses'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_sumBidResponses_halfValidResponses"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestSumBidResponsesHalfValidResponses(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_sumBidResponses_halfValidResponses'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_sumBidResponses_halfValidResponses',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_sumBidResponses_halfValidResponses'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_sumBidResponses_noOngoingActiveBid"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestSumBidResponsesNoOngoingActiveBid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_sumBidResponses_noOngoingActiveBid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_sumBidResponses_noOngoingActiveBid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_sumBidResponses_noOngoingActiveBid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_sumReservePriceProposals"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestSumReservePriceProposals(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_sumReservePriceProposals'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_sumReservePriceProposals',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_sumReservePriceProposals'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `functionName` set to `"test_toMosaicId_fromMosaicId"`.
 */
export function usePrepareCryptoPunksMosaicRegistryTestTestToMosaicIdFromMosaicId(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'test_toMosaicId_fromMosaicId'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMosaicRegistryTestABI,
    functionName: 'test_toMosaicId_fromMosaicId',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'test_toMosaicId_fromMosaicId'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__.
 */
export function useCryptoPunksMosaicRegistryTestEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryTestABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"BidAccepted"`.
 */
export function useCryptoPunksMosaicRegistryTestBidAcceptedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'BidAccepted'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'BidAccepted',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'BidAccepted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"BidProposed"`.
 */
export function useCryptoPunksMosaicRegistryTestBidProposedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'BidProposed'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'BidProposed',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'BidProposed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"BidRefunded"`.
 */
export function useCryptoPunksMosaicRegistryTestBidRefundedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'BidRefunded'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'BidRefunded',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'BidRefunded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"BidRejected"`.
 */
export function useCryptoPunksMosaicRegistryTestBidRejectedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'BidRejected'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'BidRejected',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'BidRejected'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"BidWon"`.
 */
export function useCryptoPunksMosaicRegistryTestBidWonEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryTestABI, 'BidWon'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'BidWon',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'BidWon'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"MonoRefunded"`.
 */
export function useCryptoPunksMosaicRegistryTestMonoRefundedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'MonoRefunded'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'MonoRefunded',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'MonoRefunded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"OriginalSold"`.
 */
export function useCryptoPunksMosaicRegistryTestOriginalSoldEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'OriginalSold'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'OriginalSold',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'OriginalSold'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log"`.
 */
export function useCryptoPunksMosaicRegistryTestLogEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryTestABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMosaicRegistryTestABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_address"`.
 */
export function useCryptoPunksMosaicRegistryTestLogAddressEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'log_address'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_address'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_array"`.
 */
export function useCryptoPunksMosaicRegistryTestLogArrayEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'log_array'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_array'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useCryptoPunksMosaicRegistryTestLogBytesEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'log_bytes'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_bytes'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useCryptoPunksMosaicRegistryTestLogBytes32Event(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'log_bytes32'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_bytes32'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_int"`.
 */
export function useCryptoPunksMosaicRegistryTestLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryTestABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_int'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useCryptoPunksMosaicRegistryTestLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'log_named_address'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_named_address'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useCryptoPunksMosaicRegistryTestLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'log_named_array'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_named_array'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useCryptoPunksMosaicRegistryTestLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'log_named_bytes'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_named_bytes'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useCryptoPunksMosaicRegistryTestLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'log_named_bytes32'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_named_bytes32'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useCryptoPunksMosaicRegistryTestLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'log_named_decimal_int'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_named_decimal_int'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useCryptoPunksMosaicRegistryTestLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'log_named_decimal_uint'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_named_decimal_uint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useCryptoPunksMosaicRegistryTestLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'log_named_int'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_named_int'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useCryptoPunksMosaicRegistryTestLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'log_named_string'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_named_string'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useCryptoPunksMosaicRegistryTestLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'log_named_uint'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_named_uint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_string"`.
 */
export function useCryptoPunksMosaicRegistryTestLogStringEvent(
  config: Omit<
    UseContractEventConfig<
      typeof cryptoPunksMosaicRegistryTestABI,
      'log_string'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_string'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"log_uint"`.
 */
export function useCryptoPunksMosaicRegistryTestLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryTestABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMosaicRegistryTestABI,
    'log_uint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMosaicRegistryTestABI}__ and `eventName` set to `"logs"`.
 */
export function useCryptoPunksMosaicRegistryTestLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMosaicRegistryTestABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMosaicRegistryTestABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMosaicRegistryTestABI, 'logs'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iOddEvenABI}__.
 */
export function useIOddEven(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iOddEvenABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOddEvenABI}__.
 */
export function useIOddEvenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iOddEvenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOddEvenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iOddEvenABI,
    ...config,
  } as UseContractReadConfig<typeof iOddEvenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOddEvenABI}__ and `functionName` set to `"getEven"`.
 */
export function useIOddEvenGetEven<
  TSelectData = ReadContractResult<typeof iOddEvenABI, 'getEven'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOddEvenABI, 'getEven', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOddEvenABI,
    functionName: 'getEven',
    ...config,
  } as UseContractReadConfig<typeof iOddEvenABI, 'getEven', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOddEvenABI}__ and `functionName` set to `"getOdd"`.
 */
export function useIOddEvenGetOdd<
  TSelectData = ReadContractResult<typeof iOddEvenABI, 'getOdd'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOddEvenABI, 'getOdd', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOddEvenABI,
    functionName: 'getOdd',
    ...config,
  } as UseContractReadConfig<typeof iOddEvenABI, 'getOdd', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOddEvenABI}__ and `functionName` set to `"isEven"`.
 */
export function useIOddEvenIsEven<
  TSelectData = ReadContractResult<typeof iOddEvenABI, 'isEven'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOddEvenABI, 'isEven', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOddEvenABI,
    functionName: 'isEven',
    ...config,
  } as UseContractReadConfig<typeof iOddEvenABI, 'isEven', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOddEvenABI}__ and `functionName` set to `"isOdd"`.
 */
export function useIOddEvenIsOdd<
  TSelectData = ReadContractResult<typeof iOddEvenABI, 'isOdd'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iOddEvenABI, 'isOdd', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOddEvenABI,
    functionName: 'isOdd',
    ...config,
  } as UseContractReadConfig<typeof iOddEvenABI, 'isOdd', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOddEvenABI}__.
 */
export function useIOddEvenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iOddEvenABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iOddEvenABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iOddEvenABI, TFunctionName>({
    abi: iOddEvenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOddEvenABI}__ and `functionName` set to `"expensiveFunction"`.
 */
export function useIOddEvenExpensiveFunction<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iOddEvenABI,
          'expensiveFunction'
        >['abi'],
        'expensiveFunction'
      > & { functionName?: 'expensiveFunction' }
    : UseContractWriteConfig<TMode, typeof iOddEvenABI, 'expensiveFunction'> & {
        abi?: never
        functionName?: 'expensiveFunction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iOddEvenABI, 'expensiveFunction'>({
    abi: iOddEvenABI,
    functionName: 'expensiveFunction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOddEvenABI}__.
 */
export function usePrepareIOddEvenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iOddEvenABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOddEvenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iOddEvenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOddEvenABI}__ and `functionName` set to `"expensiveFunction"`.
 */
export function usePrepareIOddEvenExpensiveFunction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iOddEvenABI, 'expensiveFunction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOddEvenABI,
    functionName: 'expensiveFunction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iOddEvenABI, 'expensiveFunction'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iTheAnswerABI}__.
 */
export function useITheAnswer(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iTheAnswerABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTheAnswerABI}__.
 */
export function useITheAnswerWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iTheAnswerABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iTheAnswerABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTheAnswerABI, TFunctionName>({
    abi: iTheAnswerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTheAnswerABI}__ and `functionName` set to `"theUltimateQuestionOfLifeTheUniverseAndEverything"`.
 */
export function useITheAnswerTheUltimateQuestionOfLifeTheUniverseAndEverything<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iTheAnswerABI,
          'theUltimateQuestionOfLifeTheUniverseAndEverything'
        >['abi'],
        'theUltimateQuestionOfLifeTheUniverseAndEverything'
      > & { functionName?: 'theUltimateQuestionOfLifeTheUniverseAndEverything' }
    : UseContractWriteConfig<
        TMode,
        typeof iTheAnswerABI,
        'theUltimateQuestionOfLifeTheUniverseAndEverything'
      > & {
        abi?: never
        functionName?: 'theUltimateQuestionOfLifeTheUniverseAndEverything'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iTheAnswerABI,
    'theUltimateQuestionOfLifeTheUniverseAndEverything'
  >({
    abi: iTheAnswerABI,
    functionName: 'theUltimateQuestionOfLifeTheUniverseAndEverything',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTheAnswerABI}__.
 */
export function usePrepareITheAnswerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTheAnswerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTheAnswerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTheAnswerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTheAnswerABI}__ and `functionName` set to `"theUltimateQuestionOfLifeTheUniverseAndEverything"`.
 */
export function usePrepareITheAnswerTheUltimateQuestionOfLifeTheUniverseAndEverything(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iTheAnswerABI,
      'theUltimateQuestionOfLifeTheUniverseAndEverything'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTheAnswerABI,
    functionName: 'theUltimateQuestionOfLifeTheUniverseAndEverything',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iTheAnswerABI,
    'theUltimateQuestionOfLifeTheUniverseAndEverything'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link cryptoPunksMarketABI}__.
 */
export function useCryptoPunksMarket(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: cryptoPunksMarketABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__.
 */
export function useCryptoPunksMarketRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof cryptoPunksMarketABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMarketABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"allPunksAssigned"`.
 */
export function useCryptoPunksMarketAllPunksAssigned<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMarketABI,
    'allPunksAssigned'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMarketABI,
      'allPunksAssigned',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    functionName: 'allPunksAssigned',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketABI,
    'allPunksAssigned',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useCryptoPunksMarketBalanceOf<
  TSelectData = ReadContractResult<typeof cryptoPunksMarketABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMarketABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"decimals"`.
 */
export function useCryptoPunksMarketDecimals<
  TSelectData = ReadContractResult<typeof cryptoPunksMarketABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cryptoPunksMarketABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"imageHash"`.
 */
export function useCryptoPunksMarketImageHash<
  TSelectData = ReadContractResult<typeof cryptoPunksMarketABI, 'imageHash'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMarketABI,
      'imageHash',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    functionName: 'imageHash',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketABI,
    'imageHash',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"name"`.
 */
export function useCryptoPunksMarketName<
  TSelectData = ReadContractResult<typeof cryptoPunksMarketABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cryptoPunksMarketABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof cryptoPunksMarketABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"nextPunkIndexToAssign"`.
 */
export function useCryptoPunksMarketNextPunkIndexToAssign<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMarketABI,
    'nextPunkIndexToAssign'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMarketABI,
      'nextPunkIndexToAssign',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    functionName: 'nextPunkIndexToAssign',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketABI,
    'nextPunkIndexToAssign',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"pendingWithdrawals"`.
 */
export function useCryptoPunksMarketPendingWithdrawals<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMarketABI,
    'pendingWithdrawals'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMarketABI,
      'pendingWithdrawals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    functionName: 'pendingWithdrawals',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketABI,
    'pendingWithdrawals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"punkBids"`.
 */
export function useCryptoPunksMarketPunkBids<
  TSelectData = ReadContractResult<typeof cryptoPunksMarketABI, 'punkBids'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cryptoPunksMarketABI, 'punkBids', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    functionName: 'punkBids',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketABI,
    'punkBids',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"punkIndexToAddress"`.
 */
export function useCryptoPunksMarketPunkIndexToAddress<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMarketABI,
    'punkIndexToAddress'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMarketABI,
      'punkIndexToAddress',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    functionName: 'punkIndexToAddress',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketABI,
    'punkIndexToAddress',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"punksOfferedForSale"`.
 */
export function useCryptoPunksMarketPunksOfferedForSale<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMarketABI,
    'punksOfferedForSale'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMarketABI,
      'punksOfferedForSale',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    functionName: 'punksOfferedForSale',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketABI,
    'punksOfferedForSale',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"punksRemainingToAssign"`.
 */
export function useCryptoPunksMarketPunksRemainingToAssign<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMarketABI,
    'punksRemainingToAssign'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMarketABI,
      'punksRemainingToAssign',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    functionName: 'punksRemainingToAssign',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketABI,
    'punksRemainingToAssign',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"standard"`.
 */
export function useCryptoPunksMarketStandard<
  TSelectData = ReadContractResult<typeof cryptoPunksMarketABI, 'standard'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cryptoPunksMarketABI, 'standard', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    functionName: 'standard',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketABI,
    'standard',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"symbol"`.
 */
export function useCryptoPunksMarketSymbol<
  TSelectData = ReadContractResult<typeof cryptoPunksMarketABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cryptoPunksMarketABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useCryptoPunksMarketTotalSupply<
  TSelectData = ReadContractResult<typeof cryptoPunksMarketABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMarketABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMarketABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMarketABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__.
 */
export function useCryptoPunksMarketWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cryptoPunksMarketABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMarketABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMarketABI, TFunctionName>({
    abi: cryptoPunksMarketABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"acceptBidForPunk"`.
 */
export function useCryptoPunksMarketAcceptBidForPunk<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketABI,
          'acceptBidForPunk'
        >['abi'],
        'acceptBidForPunk'
      > & { functionName?: 'acceptBidForPunk' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMarketABI,
        'acceptBidForPunk'
      > & {
        abi?: never
        functionName?: 'acceptBidForPunk'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMarketABI,
    'acceptBidForPunk'
  >({
    abi: cryptoPunksMarketABI,
    functionName: 'acceptBidForPunk',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"allInitialOwnersAssigned"`.
 */
export function useCryptoPunksMarketAllInitialOwnersAssigned<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketABI,
          'allInitialOwnersAssigned'
        >['abi'],
        'allInitialOwnersAssigned'
      > & { functionName?: 'allInitialOwnersAssigned' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMarketABI,
        'allInitialOwnersAssigned'
      > & {
        abi?: never
        functionName?: 'allInitialOwnersAssigned'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMarketABI,
    'allInitialOwnersAssigned'
  >({
    abi: cryptoPunksMarketABI,
    functionName: 'allInitialOwnersAssigned',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"buyPunk"`.
 */
export function useCryptoPunksMarketBuyPunk<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketABI,
          'buyPunk'
        >['abi'],
        'buyPunk'
      > & { functionName?: 'buyPunk' }
    : UseContractWriteConfig<TMode, typeof cryptoPunksMarketABI, 'buyPunk'> & {
        abi?: never
        functionName?: 'buyPunk'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMarketABI, 'buyPunk'>({
    abi: cryptoPunksMarketABI,
    functionName: 'buyPunk',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"enterBidForPunk"`.
 */
export function useCryptoPunksMarketEnterBidForPunk<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketABI,
          'enterBidForPunk'
        >['abi'],
        'enterBidForPunk'
      > & { functionName?: 'enterBidForPunk' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMarketABI,
        'enterBidForPunk'
      > & {
        abi?: never
        functionName?: 'enterBidForPunk'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMarketABI,
    'enterBidForPunk'
  >({
    abi: cryptoPunksMarketABI,
    functionName: 'enterBidForPunk',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"getPunk"`.
 */
export function useCryptoPunksMarketGetPunk<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketABI,
          'getPunk'
        >['abi'],
        'getPunk'
      > & { functionName?: 'getPunk' }
    : UseContractWriteConfig<TMode, typeof cryptoPunksMarketABI, 'getPunk'> & {
        abi?: never
        functionName?: 'getPunk'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMarketABI, 'getPunk'>({
    abi: cryptoPunksMarketABI,
    functionName: 'getPunk',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"offerPunkForSale"`.
 */
export function useCryptoPunksMarketOfferPunkForSale<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketABI,
          'offerPunkForSale'
        >['abi'],
        'offerPunkForSale'
      > & { functionName?: 'offerPunkForSale' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMarketABI,
        'offerPunkForSale'
      > & {
        abi?: never
        functionName?: 'offerPunkForSale'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMarketABI,
    'offerPunkForSale'
  >({
    abi: cryptoPunksMarketABI,
    functionName: 'offerPunkForSale',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"offerPunkForSaleToAddress"`.
 */
export function useCryptoPunksMarketOfferPunkForSaleToAddress<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketABI,
          'offerPunkForSaleToAddress'
        >['abi'],
        'offerPunkForSaleToAddress'
      > & { functionName?: 'offerPunkForSaleToAddress' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMarketABI,
        'offerPunkForSaleToAddress'
      > & {
        abi?: never
        functionName?: 'offerPunkForSaleToAddress'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMarketABI,
    'offerPunkForSaleToAddress'
  >({
    abi: cryptoPunksMarketABI,
    functionName: 'offerPunkForSaleToAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"punkNoLongerForSale"`.
 */
export function useCryptoPunksMarketPunkNoLongerForSale<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketABI,
          'punkNoLongerForSale'
        >['abi'],
        'punkNoLongerForSale'
      > & { functionName?: 'punkNoLongerForSale' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMarketABI,
        'punkNoLongerForSale'
      > & {
        abi?: never
        functionName?: 'punkNoLongerForSale'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMarketABI,
    'punkNoLongerForSale'
  >({
    abi: cryptoPunksMarketABI,
    functionName: 'punkNoLongerForSale',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"setInitialOwner"`.
 */
export function useCryptoPunksMarketSetInitialOwner<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketABI,
          'setInitialOwner'
        >['abi'],
        'setInitialOwner'
      > & { functionName?: 'setInitialOwner' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMarketABI,
        'setInitialOwner'
      > & {
        abi?: never
        functionName?: 'setInitialOwner'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMarketABI,
    'setInitialOwner'
  >({
    abi: cryptoPunksMarketABI,
    functionName: 'setInitialOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"setInitialOwners"`.
 */
export function useCryptoPunksMarketSetInitialOwners<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketABI,
          'setInitialOwners'
        >['abi'],
        'setInitialOwners'
      > & { functionName?: 'setInitialOwners' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMarketABI,
        'setInitialOwners'
      > & {
        abi?: never
        functionName?: 'setInitialOwners'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMarketABI,
    'setInitialOwners'
  >({
    abi: cryptoPunksMarketABI,
    functionName: 'setInitialOwners',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"transferPunk"`.
 */
export function useCryptoPunksMarketTransferPunk<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketABI,
          'transferPunk'
        >['abi'],
        'transferPunk'
      > & { functionName?: 'transferPunk' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMarketABI,
        'transferPunk'
      > & {
        abi?: never
        functionName?: 'transferPunk'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMarketABI, 'transferPunk'>({
    abi: cryptoPunksMarketABI,
    functionName: 'transferPunk',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"withdraw"`.
 */
export function useCryptoPunksMarketWithdraw<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketABI,
          'withdraw'
        >['abi'],
        'withdraw'
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<TMode, typeof cryptoPunksMarketABI, 'withdraw'> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMarketABI, 'withdraw'>({
    abi: cryptoPunksMarketABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"withdrawBidForPunk"`.
 */
export function useCryptoPunksMarketWithdrawBidForPunk<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMarketABI,
          'withdrawBidForPunk'
        >['abi'],
        'withdrawBidForPunk'
      > & { functionName?: 'withdrawBidForPunk' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMarketABI,
        'withdrawBidForPunk'
      > & {
        abi?: never
        functionName?: 'withdrawBidForPunk'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMarketABI,
    'withdrawBidForPunk'
  >({
    abi: cryptoPunksMarketABI,
    functionName: 'withdrawBidForPunk',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__.
 */
export function usePrepareCryptoPunksMarketWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksMarketABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMarketABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"acceptBidForPunk"`.
 */
export function usePrepareCryptoPunksMarketAcceptBidForPunk(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMarketABI,
      'acceptBidForPunk'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketABI,
    functionName: 'acceptBidForPunk',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMarketABI,
    'acceptBidForPunk'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"allInitialOwnersAssigned"`.
 */
export function usePrepareCryptoPunksMarketAllInitialOwnersAssigned(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMarketABI,
      'allInitialOwnersAssigned'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketABI,
    functionName: 'allInitialOwnersAssigned',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMarketABI,
    'allInitialOwnersAssigned'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"buyPunk"`.
 */
export function usePrepareCryptoPunksMarketBuyPunk(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksMarketABI, 'buyPunk'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketABI,
    functionName: 'buyPunk',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cryptoPunksMarketABI, 'buyPunk'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"enterBidForPunk"`.
 */
export function usePrepareCryptoPunksMarketEnterBidForPunk(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMarketABI,
      'enterBidForPunk'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketABI,
    functionName: 'enterBidForPunk',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMarketABI,
    'enterBidForPunk'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"getPunk"`.
 */
export function usePrepareCryptoPunksMarketGetPunk(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksMarketABI, 'getPunk'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketABI,
    functionName: 'getPunk',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cryptoPunksMarketABI, 'getPunk'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"offerPunkForSale"`.
 */
export function usePrepareCryptoPunksMarketOfferPunkForSale(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMarketABI,
      'offerPunkForSale'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketABI,
    functionName: 'offerPunkForSale',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMarketABI,
    'offerPunkForSale'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"offerPunkForSaleToAddress"`.
 */
export function usePrepareCryptoPunksMarketOfferPunkForSaleToAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMarketABI,
      'offerPunkForSaleToAddress'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketABI,
    functionName: 'offerPunkForSaleToAddress',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMarketABI,
    'offerPunkForSaleToAddress'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"punkNoLongerForSale"`.
 */
export function usePrepareCryptoPunksMarketPunkNoLongerForSale(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMarketABI,
      'punkNoLongerForSale'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketABI,
    functionName: 'punkNoLongerForSale',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMarketABI,
    'punkNoLongerForSale'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"setInitialOwner"`.
 */
export function usePrepareCryptoPunksMarketSetInitialOwner(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMarketABI,
      'setInitialOwner'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketABI,
    functionName: 'setInitialOwner',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMarketABI,
    'setInitialOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"setInitialOwners"`.
 */
export function usePrepareCryptoPunksMarketSetInitialOwners(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMarketABI,
      'setInitialOwners'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketABI,
    functionName: 'setInitialOwners',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMarketABI,
    'setInitialOwners'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"transferPunk"`.
 */
export function usePrepareCryptoPunksMarketTransferPunk(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksMarketABI, 'transferPunk'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketABI,
    functionName: 'transferPunk',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMarketABI,
    'transferPunk'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareCryptoPunksMarketWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksMarketABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cryptoPunksMarketABI, 'withdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `functionName` set to `"withdrawBidForPunk"`.
 */
export function usePrepareCryptoPunksMarketWithdrawBidForPunk(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMarketABI,
      'withdrawBidForPunk'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMarketABI,
    functionName: 'withdrawBidForPunk',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMarketABI,
    'withdrawBidForPunk'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMarketABI}__.
 */
export function useCryptoPunksMarketEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMarketABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMarketABI,
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMarketABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `eventName` set to `"Assign"`.
 */
export function useCryptoPunksMarketAssignEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMarketABI, 'Assign'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMarketABI,
    eventName: 'Assign',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMarketABI, 'Assign'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `eventName` set to `"PunkBidEntered"`.
 */
export function useCryptoPunksMarketPunkBidEnteredEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMarketABI, 'PunkBidEntered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMarketABI,
    eventName: 'PunkBidEntered',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMarketABI, 'PunkBidEntered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `eventName` set to `"PunkBidWithdrawn"`.
 */
export function useCryptoPunksMarketPunkBidWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMarketABI, 'PunkBidWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMarketABI,
    eventName: 'PunkBidWithdrawn',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMarketABI, 'PunkBidWithdrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `eventName` set to `"PunkBought"`.
 */
export function useCryptoPunksMarketPunkBoughtEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMarketABI, 'PunkBought'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMarketABI,
    eventName: 'PunkBought',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMarketABI, 'PunkBought'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `eventName` set to `"PunkNoLongerForSale"`.
 */
export function useCryptoPunksMarketPunkNoLongerForSaleEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMarketABI, 'PunkNoLongerForSale'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMarketABI,
    eventName: 'PunkNoLongerForSale',
    ...config,
  } as UseContractEventConfig<
    typeof cryptoPunksMarketABI,
    'PunkNoLongerForSale'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `eventName` set to `"PunkOffered"`.
 */
export function useCryptoPunksMarketPunkOfferedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMarketABI, 'PunkOffered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMarketABI,
    eventName: 'PunkOffered',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMarketABI, 'PunkOffered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `eventName` set to `"PunkTransfer"`.
 */
export function useCryptoPunksMarketPunkTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMarketABI, 'PunkTransfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMarketABI,
    eventName: 'PunkTransfer',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMarketABI, 'PunkTransfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMarketABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCryptoPunksMarketTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMarketABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMarketABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMarketABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link cryptoPunksMuseumABI}__.
 */
export function useCryptoPunksMuseum(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: cryptoPunksMuseumABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMuseumABI}__.
 */
export function useCryptoPunksMuseumRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof cryptoPunksMuseumABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMuseumABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMuseumABI,
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMuseumABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useCryptoPunksMuseumDefaultAdminRole<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMuseumABI,
    'DEFAULT_ADMIN_ROLE'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMuseumABI,
      'DEFAULT_ADMIN_ROLE',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMuseumABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMuseumABI,
    'DEFAULT_ADMIN_ROLE',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"cryptoPunksMarket"`.
 */
export function useCryptoPunksMuseumCryptoPunksMarket<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMuseumABI,
    'cryptoPunksMarket'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMuseumABI,
      'cryptoPunksMarket',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMuseumABI,
    functionName: 'cryptoPunksMarket',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMuseumABI,
    'cryptoPunksMarket',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useCryptoPunksMuseumGetRoleAdmin<
  TSelectData = ReadContractResult<typeof cryptoPunksMuseumABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMuseumABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMuseumABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMuseumABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"groupRegistry"`.
 */
export function useCryptoPunksMuseumGroupRegistry<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMuseumABI,
    'groupRegistry'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMuseumABI,
      'groupRegistry',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMuseumABI,
    functionName: 'groupRegistry',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMuseumABI,
    'groupRegistry',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"hasRole"`.
 */
export function useCryptoPunksMuseumHasRole<
  TSelectData = ReadContractResult<typeof cryptoPunksMuseumABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cryptoPunksMuseumABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMuseumABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMuseumABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"isActive"`.
 */
export function useCryptoPunksMuseumIsActive<
  TSelectData = ReadContractResult<typeof cryptoPunksMuseumABI, 'isActive'>,
>(
  config: Omit<
    UseContractReadConfig<typeof cryptoPunksMuseumABI, 'isActive', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMuseumABI,
    functionName: 'isActive',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMuseumABI,
    'isActive',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"mosaicRegistry"`.
 */
export function useCryptoPunksMuseumMosaicRegistry<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMuseumABI,
    'mosaicRegistry'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMuseumABI,
      'mosaicRegistry',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMuseumABI,
    functionName: 'mosaicRegistry',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMuseumABI,
    'mosaicRegistry',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCryptoPunksMuseumSupportsInterface<
  TSelectData = ReadContractResult<
    typeof cryptoPunksMuseumABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof cryptoPunksMuseumABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cryptoPunksMuseumABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof cryptoPunksMuseumABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__.
 */
export function useCryptoPunksMuseumWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof cryptoPunksMuseumABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMuseumABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMuseumABI, TFunctionName>({
    abi: cryptoPunksMuseumABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"activate"`.
 */
export function useCryptoPunksMuseumActivate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMuseumABI,
          'activate'
        >['abi'],
        'activate'
      > & { functionName?: 'activate' }
    : UseContractWriteConfig<TMode, typeof cryptoPunksMuseumABI, 'activate'> & {
        abi?: never
        functionName?: 'activate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMuseumABI, 'activate'>({
    abi: cryptoPunksMuseumABI,
    functionName: 'activate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"deactivate"`.
 */
export function useCryptoPunksMuseumDeactivate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMuseumABI,
          'deactivate'
        >['abi'],
        'deactivate'
      > & { functionName?: 'deactivate' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMuseumABI,
        'deactivate'
      > & {
        abi?: never
        functionName?: 'deactivate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMuseumABI, 'deactivate'>({
    abi: cryptoPunksMuseumABI,
    functionName: 'deactivate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"grantRole"`.
 */
export function useCryptoPunksMuseumGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMuseumABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMuseumABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMuseumABI, 'grantRole'>({
    abi: cryptoPunksMuseumABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useCryptoPunksMuseumRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMuseumABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMuseumABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMuseumABI, 'renounceRole'>({
    abi: cryptoPunksMuseumABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useCryptoPunksMuseumRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMuseumABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMuseumABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof cryptoPunksMuseumABI, 'revokeRole'>({
    abi: cryptoPunksMuseumABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"setGroupRegistry"`.
 */
export function useCryptoPunksMuseumSetGroupRegistry<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMuseumABI,
          'setGroupRegistry'
        >['abi'],
        'setGroupRegistry'
      > & { functionName?: 'setGroupRegistry' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMuseumABI,
        'setGroupRegistry'
      > & {
        abi?: never
        functionName?: 'setGroupRegistry'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMuseumABI,
    'setGroupRegistry'
  >({
    abi: cryptoPunksMuseumABI,
    functionName: 'setGroupRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"setMosaicRegistry"`.
 */
export function useCryptoPunksMuseumSetMosaicRegistry<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof cryptoPunksMuseumABI,
          'setMosaicRegistry'
        >['abi'],
        'setMosaicRegistry'
      > & { functionName?: 'setMosaicRegistry' }
    : UseContractWriteConfig<
        TMode,
        typeof cryptoPunksMuseumABI,
        'setMosaicRegistry'
      > & {
        abi?: never
        functionName?: 'setMosaicRegistry'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof cryptoPunksMuseumABI,
    'setMosaicRegistry'
  >({
    abi: cryptoPunksMuseumABI,
    functionName: 'setMosaicRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__.
 */
export function usePrepareCryptoPunksMuseumWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksMuseumABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMuseumABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMuseumABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"activate"`.
 */
export function usePrepareCryptoPunksMuseumActivate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksMuseumABI, 'activate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMuseumABI,
    functionName: 'activate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cryptoPunksMuseumABI, 'activate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"deactivate"`.
 */
export function usePrepareCryptoPunksMuseumDeactivate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksMuseumABI, 'deactivate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMuseumABI,
    functionName: 'deactivate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cryptoPunksMuseumABI, 'deactivate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareCryptoPunksMuseumGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksMuseumABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMuseumABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cryptoPunksMuseumABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareCryptoPunksMuseumRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksMuseumABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMuseumABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMuseumABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareCryptoPunksMuseumRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cryptoPunksMuseumABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMuseumABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cryptoPunksMuseumABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"setGroupRegistry"`.
 */
export function usePrepareCryptoPunksMuseumSetGroupRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMuseumABI,
      'setGroupRegistry'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMuseumABI,
    functionName: 'setGroupRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMuseumABI,
    'setGroupRegistry'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `functionName` set to `"setMosaicRegistry"`.
 */
export function usePrepareCryptoPunksMuseumSetMosaicRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cryptoPunksMuseumABI,
      'setMosaicRegistry'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cryptoPunksMuseumABI,
    functionName: 'setMosaicRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cryptoPunksMuseumABI,
    'setMosaicRegistry'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMuseumABI}__.
 */
export function useCryptoPunksMuseumEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMuseumABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMuseumABI,
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMuseumABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useCryptoPunksMuseumRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMuseumABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMuseumABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMuseumABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useCryptoPunksMuseumRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMuseumABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMuseumABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMuseumABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link cryptoPunksMuseumABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useCryptoPunksMuseumRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof cryptoPunksMuseumABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: cryptoPunksMuseumABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof cryptoPunksMuseumABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link deployByteCodeABI}__.
 */
export function useDeployByteCode(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: deployByteCodeABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployByteCodeABI}__.
 */
export function useDeployByteCodeWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof deployByteCodeABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof deployByteCodeABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof deployByteCodeABI, TFunctionName>({
    abi: deployByteCodeABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployByteCodeABI}__ and `functionName` set to `"deploy"`.
 */
export function useDeployByteCodeDeploy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof deployByteCodeABI, 'deploy'>['abi'],
        'deploy'
      > & { functionName?: 'deploy' }
    : UseContractWriteConfig<TMode, typeof deployByteCodeABI, 'deploy'> & {
        abi?: never
        functionName?: 'deploy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof deployByteCodeABI, 'deploy'>({
    abi: deployByteCodeABI,
    functionName: 'deploy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployByteCodeABI}__.
 */
export function usePrepareDeployByteCodeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployByteCodeABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployByteCodeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployByteCodeABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployByteCodeABI}__ and `functionName` set to `"deploy"`.
 */
export function usePrepareDeployByteCodeDeploy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployByteCodeABI, 'deploy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployByteCodeABI,
    functionName: 'deploy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployByteCodeABI, 'deploy'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link dummyErc721ABI}__.
 */
export function useDummyErc721(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: dummyErc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyErc721ABI}__.
 */
export function useDummyErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dummyErc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyErc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: dummyErc721ABI,
    ...config,
  } as UseContractReadConfig<typeof dummyErc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useDummyErc721BalanceOf<
  TSelectData = ReadContractResult<typeof dummyErc721ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyErc721ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dummyErc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof dummyErc721ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useDummyErc721GetApproved<
  TSelectData = ReadContractResult<typeof dummyErc721ABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyErc721ABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dummyErc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof dummyErc721ABI, 'getApproved', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useDummyErc721IsApprovedForAll<
  TSelectData = ReadContractResult<typeof dummyErc721ABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyErc721ABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dummyErc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof dummyErc721ABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"name"`.
 */
export function useDummyErc721Name<
  TSelectData = ReadContractResult<typeof dummyErc721ABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyErc721ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dummyErc721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof dummyErc721ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useDummyErc721OwnerOf<
  TSelectData = ReadContractResult<typeof dummyErc721ABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyErc721ABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dummyErc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof dummyErc721ABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useDummyErc721SupportsInterface<
  TSelectData = ReadContractResult<typeof dummyErc721ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof dummyErc721ABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dummyErc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof dummyErc721ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useDummyErc721Symbol<
  TSelectData = ReadContractResult<typeof dummyErc721ABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyErc721ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dummyErc721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof dummyErc721ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyErc721ABI}__.
 */
export function useDummyErc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dummyErc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof dummyErc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dummyErc721ABI, TFunctionName>({
    abi: dummyErc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useDummyErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dummyErc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof dummyErc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dummyErc721ABI, 'approve'>({
    abi: dummyErc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"mint"`.
 */
export function useDummyErc721Mint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dummyErc721ABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof dummyErc721ABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dummyErc721ABI, 'mint'>({
    abi: dummyErc721ABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useDummyErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dummyErc721ABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof dummyErc721ABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dummyErc721ABI, 'safeTransferFrom'>({
    abi: dummyErc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useDummyErc721SetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dummyErc721ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof dummyErc721ABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dummyErc721ABI, 'setApprovalForAll'>({
    abi: dummyErc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useDummyErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dummyErc721ABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof dummyErc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dummyErc721ABI, 'transferFrom'>({
    abi: dummyErc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyErc721ABI}__.
 */
export function usePrepareDummyErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyErc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyErc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof dummyErc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareDummyErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyErc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyErc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dummyErc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareDummyErc721Mint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyErc721ABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyErc721ABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dummyErc721ABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareDummyErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyErc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyErc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dummyErc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareDummyErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyErc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyErc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dummyErc721ABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyErc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareDummyErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyErc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyErc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dummyErc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyErc721ABI}__.
 */
export function useDummyErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dummyErc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyErc721ABI,
    ...config,
  } as UseContractEventConfig<typeof dummyErc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyErc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useDummyErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyErc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyErc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof dummyErc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyErc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useDummyErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyErc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyErc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof dummyErc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyErc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useDummyErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyErc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyErc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof dummyErc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc1155ABI}__.
 */
export function useErc1155(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc1155ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__.
 */
export function useErc1155Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc1155ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc1155ABI,
    ...config,
  } as UseContractReadConfig<typeof erc1155ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc1155BalanceOf<
  TSelectData = ReadContractResult<typeof erc1155ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc1155ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc1155ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useErc1155BalanceOfBatch<
  TSelectData = ReadContractResult<typeof erc1155ABI, 'balanceOfBatch'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155ABI, 'balanceOfBatch', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc1155ABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<typeof erc1155ABI, 'balanceOfBatch', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc1155IsApprovedForAll<
  TSelectData = ReadContractResult<typeof erc1155ABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc1155ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc1155ABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc1155SupportsInterface<
  TSelectData = ReadContractResult<typeof erc1155ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc1155ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc1155ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"uri"`.
 */
export function useErc1155Uri<
  TSelectData = ReadContractResult<typeof erc1155ABI, 'uri'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155ABI, 'uri', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc1155ABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<typeof erc1155ABI, 'uri', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__.
 */
export function useErc1155Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc1155ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc1155ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc1155ABI, TFunctionName>({
    abi: erc1155ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useErc1155SafeBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc1155ABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc1155ABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc1155ABI, 'safeBatchTransferFrom'>({
    abi: erc1155ABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc1155SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc1155ABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc1155ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc1155ABI, 'safeTransferFrom'>({
    abi: erc1155ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc1155SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc1155ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc1155ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc1155ABI, 'setApprovalForAll'>({
    abi: erc1155ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__.
 */
export function usePrepareErc1155Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc1155ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc1155ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc1155ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareErc1155SafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc1155ABI, 'safeBatchTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc1155ABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc1155ABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc1155SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc1155ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc1155ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc1155ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc1155SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc1155ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc1155ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc1155ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__.
 */
export function useErc1155Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1155ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1155ABI,
    ...config,
  } as UseContractEventConfig<typeof erc1155ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc1155ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1155ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc1155ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useErc1155TransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155ABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1155ABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof erc1155ABI, 'TransferBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useErc1155TransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155ABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1155ABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof erc1155ABI, 'TransferSingle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155ABI}__ and `eventName` set to `"URI"`.
 */
export function useErc1155UriEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155ABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1155ABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof erc1155ABI, 'URI'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc1155UpgradeableABI}__.
 */
export function useErc1155Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc1155UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UpgradeableABI}__.
 */
export function useErc1155UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc1155UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc1155UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc1155UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc1155UpgradeableBalanceOf<
  TSelectData = ReadContractResult<typeof erc1155UpgradeableABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc1155UpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc1155UpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc1155UpgradeableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useErc1155UpgradeableBalanceOfBatch<
  TSelectData = ReadContractResult<
    typeof erc1155UpgradeableABI,
    'balanceOfBatch'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc1155UpgradeableABI,
      'balanceOfBatch',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc1155UpgradeableABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<
    typeof erc1155UpgradeableABI,
    'balanceOfBatch',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc1155UpgradeableIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof erc1155UpgradeableABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc1155UpgradeableABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc1155UpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc1155UpgradeableABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc1155UpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof erc1155UpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc1155UpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc1155UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc1155UpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"uri"`.
 */
export function useErc1155UpgradeableUri<
  TSelectData = ReadContractResult<typeof erc1155UpgradeableABI, 'uri'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc1155UpgradeableABI, 'uri', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc1155UpgradeableABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<typeof erc1155UpgradeableABI, 'uri', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__.
 */
export function useErc1155UpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc1155UpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc1155UpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc1155UpgradeableABI, TFunctionName>({
    abi: erc1155UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useErc1155UpgradeableSafeBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc1155UpgradeableABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc1155UpgradeableABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc1155UpgradeableABI,
    'safeBatchTransferFrom'
  >({
    abi: erc1155UpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc1155UpgradeableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc1155UpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc1155UpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc1155UpgradeableABI,
    'safeTransferFrom'
  >({
    abi: erc1155UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc1155UpgradeableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc1155UpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc1155UpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc1155UpgradeableABI,
    'setApprovalForAll'
  >({
    abi: erc1155UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__.
 */
export function usePrepareErc1155UpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc1155UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc1155UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc1155UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareErc1155UpgradeableSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc1155UpgradeableABI,
      'safeBatchTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc1155UpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc1155UpgradeableABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc1155UpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc1155UpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc1155UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc1155UpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc1155UpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc1155UpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc1155UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc1155UpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UpgradeableABI}__.
 */
export function useErc1155UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1155UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1155UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc1155UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc1155UpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155UpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1155UpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc1155UpgradeableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc1155UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1155UpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc1155UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useErc1155UpgradeableTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155UpgradeableABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1155UpgradeableABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof erc1155UpgradeableABI, 'TransferBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useErc1155UpgradeableTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155UpgradeableABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1155UpgradeableABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof erc1155UpgradeableABI, 'TransferSingle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `eventName` set to `"URI"`.
 */
export function useErc1155UpgradeableUriEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1155UpgradeableABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1155UpgradeableABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof erc1155UpgradeableABI, 'URI'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc165UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165UpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof erc165UpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc165UpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc165UpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc165UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc165UpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc1967UpgradeABI}__.
 */
export function useErc1967Upgrade(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc1967UpgradeABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__.
 */
export function useErc1967UpgradeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__.
 */
export function useErc1967UpgradeUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc1967UpgradeUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__.
 */
export function useErc1967UpgradeUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc1967UpgradeUpgradeableABI,
      'BeaconUpgraded'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc1967UpgradeUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: erc721UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721UpgradeableBalanceOf<
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721UpgradeableGetApproved<
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721UpgradeableIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof erc721UpgradeableABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721UpgradeableName<
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721UpgradeableABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721UpgradeableOwnerOf<
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721UpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof erc721UpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721UpgradeableSymbol<
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721UpgradeableTokenUri<
  TSelectData = ReadContractResult<typeof erc721UpgradeableABI, 'tokenURI'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721UpgradeableABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UpgradeableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UpgradeableABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721UpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721UpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof erc721UpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721UpgradeableABI, TFunctionName>({
    abi: erc721UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721UpgradeableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721UpgradeableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721UpgradeableABI, 'approve'>({
    abi: erc721UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721UpgradeableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721UpgradeableABI,
    'safeTransferFrom'
  >({
    abi: erc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721UpgradeableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof erc721UpgradeableABI,
    'setApprovalForAll'
  >({
    abi: erc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721UpgradeableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721UpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof erc721UpgradeableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721UpgradeableABI, 'transferFrom'>({
    abi: erc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function usePrepareErc721UpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721UpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721UpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__.
 */
export function useErc721UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721UpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721UpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc721UpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721UpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721UpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ticketRegistryScriptABI}__.
 */
export function useTicketRegistryScript(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ticketRegistryScriptABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticketRegistryScriptABI}__.
 */
export function useTicketRegistryScriptRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ticketRegistryScriptABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ticketRegistryScriptABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ticketRegistryScriptABI,
    ...config,
  } as UseContractReadConfig<
    typeof ticketRegistryScriptABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ticketRegistryScriptABI}__ and `functionName` set to `"IS_SCRIPT"`.
 */
export function useTicketRegistryScriptIsScript<
  TSelectData = ReadContractResult<typeof ticketRegistryScriptABI, 'IS_SCRIPT'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ticketRegistryScriptABI,
      'IS_SCRIPT',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ticketRegistryScriptABI,
    functionName: 'IS_SCRIPT',
    ...config,
  } as UseContractReadConfig<
    typeof ticketRegistryScriptABI,
    'IS_SCRIPT',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ticketRegistryScriptABI}__.
 */
export function useTicketRegistryScriptWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ticketRegistryScriptABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ticketRegistryScriptABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ticketRegistryScriptABI, TFunctionName>(
    { abi: ticketRegistryScriptABI, ...config } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ticketRegistryScriptABI}__ and `functionName` set to `"run"`.
 */
export function useTicketRegistryScriptRun<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ticketRegistryScriptABI,
          'run'
        >['abi'],
        'run'
      > & { functionName?: 'run' }
    : UseContractWriteConfig<TMode, typeof ticketRegistryScriptABI, 'run'> & {
        abi?: never
        functionName?: 'run'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ticketRegistryScriptABI, 'run'>({
    abi: ticketRegistryScriptABI,
    functionName: 'run',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ticketRegistryScriptABI}__.
 */
export function usePrepareTicketRegistryScriptWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ticketRegistryScriptABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ticketRegistryScriptABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ticketRegistryScriptABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ticketRegistryScriptABI}__ and `functionName` set to `"run"`.
 */
export function usePrepareTicketRegistryScriptRun(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ticketRegistryScriptABI, 'run'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ticketRegistryScriptABI,
    functionName: 'run',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ticketRegistryScriptABI, 'run'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<
  TSelectData = ReadContractResult<typeof erc165ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc165ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControl(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iAccessControlABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlGetRoleAdmin<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'getRoleAdmin'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlHasRole<
  TSelectData = ReadContractResult<typeof iAccessControlABI, 'hasRole'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, 'hasRole', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof iAccessControlABI, 'hasRole', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iAccessControlABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, TFunctionName>({
    abi: iAccessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlGrantRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'grantRole'> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'grantRole'>({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlRenounceRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'renounceRole'>({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlRevokeRole<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<TMode, typeof iAccessControlABI, 'revokeRole'> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iAccessControlABI, 'revokeRole'>({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function usePrepareIAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function useIAccessControlUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iAccessControlUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function useIAccessControlUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iAccessControlUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlUpgradeableGetRoleAdmin<
  TSelectData = ReadContractResult<
    typeof iAccessControlUpgradeableABI,
    'getRoleAdmin'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlUpgradeableABI,
      'getRoleAdmin',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlUpgradeableABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlUpgradeableABI,
    'getRoleAdmin',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlUpgradeableHasRole<
  TSelectData = ReadContractResult<
    typeof iAccessControlUpgradeableABI,
    'hasRole'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iAccessControlUpgradeableABI,
      'hasRole',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlUpgradeableABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlUpgradeableABI,
    'hasRole',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function useIAccessControlUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iAccessControlUpgradeableABI,
    TFunctionName
  >({ abi: iAccessControlUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlUpgradeableGrantRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlUpgradeableABI,
          'grantRole'
        >['abi'],
        'grantRole'
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlUpgradeableABI,
        'grantRole'
      > & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iAccessControlUpgradeableABI,
    'grantRole'
  >({
    abi: iAccessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlUpgradeableRenounceRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlUpgradeableABI,
          'renounceRole'
        >['abi'],
        'renounceRole'
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlUpgradeableABI,
        'renounceRole'
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iAccessControlUpgradeableABI,
    'renounceRole'
  >({
    abi: iAccessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlUpgradeableRevokeRole<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iAccessControlUpgradeableABI,
          'revokeRole'
        >['abi'],
        'revokeRole'
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        TMode,
        typeof iAccessControlUpgradeableABI,
        'revokeRole'
      > & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iAccessControlUpgradeableABI,
    'revokeRole'
  >({
    abi: iAccessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function usePrepareIAccessControlUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlUpgradeableGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlUpgradeableABI,
      'grantRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlUpgradeableABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlUpgradeableRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlUpgradeableABI,
      'renounceRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlUpgradeableABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlUpgradeableRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iAccessControlUpgradeableABI,
      'revokeRole'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlUpgradeableABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iAccessControlUpgradeableABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__.
 */
export function useIAccessControlUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlUpgradeableRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iAccessControlUpgradeableABI,
      'RoleAdminChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlUpgradeableABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iAccessControlUpgradeableABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlUpgradeableRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlUpgradeableABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<
    typeof iAccessControlUpgradeableABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlUpgradeableABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlUpgradeableRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlUpgradeableABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlUpgradeableABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<
    typeof iAccessControlUpgradeableABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBeaconABI}__.
 */
export function useIBeacon(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iBeaconABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconABI}__.
 */
export function useIBeaconRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconABI,
    ...config,
  } as UseContractReadConfig<typeof iBeaconABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconImplementation<
  TSelectData = ReadContractResult<typeof iBeaconABI, 'implementation'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBeaconABI, 'implementation', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<typeof iBeaconABI, 'implementation', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iBeaconUpgradeableABI}__.
 */
export function useIBeaconUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iBeaconUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__.
 */
export function useIBeaconUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBeaconUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof iBeaconUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconUpgradeableImplementation<
  TSelectData = ReadContractResult<
    typeof iBeaconUpgradeableABI,
    'implementation'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBeaconUpgradeableABI,
      'implementation',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof iBeaconUpgradeableABI,
    'implementation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__.
 */
export function useICryptoPunksGroupRegistry(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iCryptoPunksGroupRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__.
 */
export function useICryptoPunksGroupRegistryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksGroupRegistryABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksGroupRegistryABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksGroupRegistryABI,
    TFunctionName
  >({ abi: iCryptoPunksGroupRegistryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__ and `functionName` set to `"buy"`.
 */
export function useICryptoPunksGroupRegistryBuy<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksGroupRegistryABI,
          'buy'
        >['abi'],
        'buy'
      > & { functionName?: 'buy' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksGroupRegistryABI,
        'buy'
      > & {
        abi?: never
        functionName?: 'buy'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCryptoPunksGroupRegistryABI, 'buy'>({
    abi: iCryptoPunksGroupRegistryABI,
    functionName: 'buy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__ and `functionName` set to `"claim"`.
 */
export function useICryptoPunksGroupRegistryClaim<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksGroupRegistryABI,
          'claim'
        >['abi'],
        'claim'
      > & { functionName?: 'claim' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksGroupRegistryABI,
        'claim'
      > & {
        abi?: never
        functionName?: 'claim'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCryptoPunksGroupRegistryABI, 'claim'>({
    abi: iCryptoPunksGroupRegistryABI,
    functionName: 'claim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__ and `functionName` set to `"contribute"`.
 */
export function useICryptoPunksGroupRegistryContribute<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksGroupRegistryABI,
          'contribute'
        >['abi'],
        'contribute'
      > & { functionName?: 'contribute' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksGroupRegistryABI,
        'contribute'
      > & {
        abi?: never
        functionName?: 'contribute'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksGroupRegistryABI,
    'contribute'
  >({
    abi: iCryptoPunksGroupRegistryABI,
    functionName: 'contribute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__ and `functionName` set to `"create"`.
 */
export function useICryptoPunksGroupRegistryCreate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksGroupRegistryABI,
          'create'
        >['abi'],
        'create'
      > & { functionName?: 'create' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksGroupRegistryABI,
        'create'
      > & {
        abi?: never
        functionName?: 'create'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCryptoPunksGroupRegistryABI, 'create'>(
    {
      abi: iCryptoPunksGroupRegistryABI,
      functionName: 'create',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__ and `functionName` set to `"refundExpired"`.
 */
export function useICryptoPunksGroupRegistryRefundExpired<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksGroupRegistryABI,
          'refundExpired'
        >['abi'],
        'refundExpired'
      > & { functionName?: 'refundExpired' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksGroupRegistryABI,
        'refundExpired'
      > & {
        abi?: never
        functionName?: 'refundExpired'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksGroupRegistryABI,
    'refundExpired'
  >({
    abi: iCryptoPunksGroupRegistryABI,
    functionName: 'refundExpired',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__.
 */
export function usePrepareICryptoPunksGroupRegistryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksGroupRegistryABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksGroupRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksGroupRegistryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__ and `functionName` set to `"buy"`.
 */
export function usePrepareICryptoPunksGroupRegistryBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCryptoPunksGroupRegistryABI, 'buy'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksGroupRegistryABI,
    functionName: 'buy',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksGroupRegistryABI,
    'buy'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__ and `functionName` set to `"claim"`.
 */
export function usePrepareICryptoPunksGroupRegistryClaim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCryptoPunksGroupRegistryABI, 'claim'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksGroupRegistryABI,
    functionName: 'claim',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksGroupRegistryABI,
    'claim'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__ and `functionName` set to `"contribute"`.
 */
export function usePrepareICryptoPunksGroupRegistryContribute(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksGroupRegistryABI,
      'contribute'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksGroupRegistryABI,
    functionName: 'contribute',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksGroupRegistryABI,
    'contribute'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__ and `functionName` set to `"create"`.
 */
export function usePrepareICryptoPunksGroupRegistryCreate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksGroupRegistryABI,
      'create'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksGroupRegistryABI,
    functionName: 'create',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksGroupRegistryABI,
    'create'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__ and `functionName` set to `"refundExpired"`.
 */
export function usePrepareICryptoPunksGroupRegistryRefundExpired(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksGroupRegistryABI,
      'refundExpired'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksGroupRegistryABI,
    functionName: 'refundExpired',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksGroupRegistryABI,
    'refundExpired'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__.
 */
export function useICryptoPunksGroupRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksGroupRegistryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksGroupRegistryABI,
    ...config,
  } as UseContractEventConfig<typeof iCryptoPunksGroupRegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__ and `eventName` set to `"Claimed"`.
 */
export function useICryptoPunksGroupRegistryClaimedEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksGroupRegistryABI, 'Claimed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksGroupRegistryABI,
    eventName: 'Claimed',
    ...config,
  } as UseContractEventConfig<typeof iCryptoPunksGroupRegistryABI, 'Claimed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__ and `eventName` set to `"Contributed"`.
 */
export function useICryptoPunksGroupRegistryContributedEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksGroupRegistryABI, 'Contributed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksGroupRegistryABI,
    eventName: 'Contributed',
    ...config,
  } as UseContractEventConfig<
    typeof iCryptoPunksGroupRegistryABI,
    'Contributed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useICryptoPunksGroupRegistryGroupCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksGroupRegistryABI, 'GroupCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksGroupRegistryABI,
    eventName: 'GroupCreated',
    ...config,
  } as UseContractEventConfig<
    typeof iCryptoPunksGroupRegistryABI,
    'GroupCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksGroupRegistryABI}__ and `eventName` set to `"GroupWon"`.
 */
export function useICryptoPunksGroupRegistryGroupWonEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksGroupRegistryABI, 'GroupWon'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksGroupRegistryABI,
    eventName: 'GroupWon',
    ...config,
  } as UseContractEventConfig<typeof iCryptoPunksGroupRegistryABI, 'GroupWon'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__.
 */
export function useICryptoPunksMosaicRegistry(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iCryptoPunksMosaicRegistryABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__.
 */
export function useICryptoPunksMosaicRegistryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMosaicRegistryABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMosaicRegistryABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMosaicRegistryABI,
    TFunctionName
  >({ abi: iCryptoPunksMosaicRegistryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"bid"`.
 */
export function useICryptoPunksMosaicRegistryBid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMosaicRegistryABI,
          'bid'
        >['abi'],
        'bid'
      > & { functionName?: 'bid' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMosaicRegistryABI,
        'bid'
      > & {
        abi?: never
        functionName?: 'bid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCryptoPunksMosaicRegistryABI, 'bid'>({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'bid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"create"`.
 */
export function useICryptoPunksMosaicRegistryCreate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMosaicRegistryABI,
          'create'
        >['abi'],
        'create'
      > & { functionName?: 'create' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMosaicRegistryABI,
        'create'
      > & {
        abi?: never
        functionName?: 'create'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMosaicRegistryABI,
    'create'
  >({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'create',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"finalizeAcceptedBid"`.
 */
export function useICryptoPunksMosaicRegistryFinalizeAcceptedBid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMosaicRegistryABI,
          'finalizeAcceptedBid'
        >['abi'],
        'finalizeAcceptedBid'
      > & { functionName?: 'finalizeAcceptedBid' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMosaicRegistryABI,
        'finalizeAcceptedBid'
      > & {
        abi?: never
        functionName?: 'finalizeAcceptedBid'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMosaicRegistryABI,
    'finalizeAcceptedBid'
  >({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'finalizeAcceptedBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"finalizeProposedBid"`.
 */
export function useICryptoPunksMosaicRegistryFinalizeProposedBid<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMosaicRegistryABI,
          'finalizeProposedBid'
        >['abi'],
        'finalizeProposedBid'
      > & { functionName?: 'finalizeProposedBid' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMosaicRegistryABI,
        'finalizeProposedBid'
      > & {
        abi?: never
        functionName?: 'finalizeProposedBid'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMosaicRegistryABI,
    'finalizeProposedBid'
  >({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'finalizeProposedBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"grantMintAuthority"`.
 */
export function useICryptoPunksMosaicRegistryGrantMintAuthority<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMosaicRegistryABI,
          'grantMintAuthority'
        >['abi'],
        'grantMintAuthority'
      > & { functionName?: 'grantMintAuthority' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMosaicRegistryABI,
        'grantMintAuthority'
      > & {
        abi?: never
        functionName?: 'grantMintAuthority'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMosaicRegistryABI,
    'grantMintAuthority'
  >({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'grantMintAuthority',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"mint"`.
 */
export function useICryptoPunksMosaicRegistryMint<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMosaicRegistryABI,
          'mint'
        >['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMosaicRegistryABI,
        'mint'
      > & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCryptoPunksMosaicRegistryABI, 'mint'>({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"proposeReservePrice"`.
 */
export function useICryptoPunksMosaicRegistryProposeReservePrice<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMosaicRegistryABI,
          'proposeReservePrice'
        >['abi'],
        'proposeReservePrice'
      > & { functionName?: 'proposeReservePrice' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMosaicRegistryABI,
        'proposeReservePrice'
      > & {
        abi?: never
        functionName?: 'proposeReservePrice'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMosaicRegistryABI,
    'proposeReservePrice'
  >({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'proposeReservePrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"proposeReservePriceBatch"`.
 */
export function useICryptoPunksMosaicRegistryProposeReservePriceBatch<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMosaicRegistryABI,
          'proposeReservePriceBatch'
        >['abi'],
        'proposeReservePriceBatch'
      > & { functionName?: 'proposeReservePriceBatch' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMosaicRegistryABI,
        'proposeReservePriceBatch'
      > & {
        abi?: never
        functionName?: 'proposeReservePriceBatch'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMosaicRegistryABI,
    'proposeReservePriceBatch'
  >({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'proposeReservePriceBatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"refundBidDeposit"`.
 */
export function useICryptoPunksMosaicRegistryRefundBidDeposit<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMosaicRegistryABI,
          'refundBidDeposit'
        >['abi'],
        'refundBidDeposit'
      > & { functionName?: 'refundBidDeposit' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMosaicRegistryABI,
        'refundBidDeposit'
      > & {
        abi?: never
        functionName?: 'refundBidDeposit'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMosaicRegistryABI,
    'refundBidDeposit'
  >({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'refundBidDeposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"refundOnSold"`.
 */
export function useICryptoPunksMosaicRegistryRefundOnSold<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMosaicRegistryABI,
          'refundOnSold'
        >['abi'],
        'refundOnSold'
      > & { functionName?: 'refundOnSold' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMosaicRegistryABI,
        'refundOnSold'
      > & {
        abi?: never
        functionName?: 'refundOnSold'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMosaicRegistryABI,
    'refundOnSold'
  >({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'refundOnSold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"respondToBidBatch"`.
 */
export function useICryptoPunksMosaicRegistryRespondToBidBatch<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMosaicRegistryABI,
          'respondToBidBatch'
        >['abi'],
        'respondToBidBatch'
      > & { functionName?: 'respondToBidBatch' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMosaicRegistryABI,
        'respondToBidBatch'
      > & {
        abi?: never
        functionName?: 'respondToBidBatch'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMosaicRegistryABI,
    'respondToBidBatch'
  >({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'respondToBidBatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__.
 */
export function usePrepareICryptoPunksMosaicRegistryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMosaicRegistryABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMosaicRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"bid"`.
 */
export function usePrepareICryptoPunksMosaicRegistryBid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCryptoPunksMosaicRegistryABI, 'bid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'bid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'bid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"create"`.
 */
export function usePrepareICryptoPunksMosaicRegistryCreate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMosaicRegistryABI,
      'create'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'create',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'create'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"finalizeAcceptedBid"`.
 */
export function usePrepareICryptoPunksMosaicRegistryFinalizeAcceptedBid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMosaicRegistryABI,
      'finalizeAcceptedBid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'finalizeAcceptedBid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'finalizeAcceptedBid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"finalizeProposedBid"`.
 */
export function usePrepareICryptoPunksMosaicRegistryFinalizeProposedBid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMosaicRegistryABI,
      'finalizeProposedBid'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'finalizeProposedBid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'finalizeProposedBid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"grantMintAuthority"`.
 */
export function usePrepareICryptoPunksMosaicRegistryGrantMintAuthority(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMosaicRegistryABI,
      'grantMintAuthority'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'grantMintAuthority',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'grantMintAuthority'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareICryptoPunksMosaicRegistryMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCryptoPunksMosaicRegistryABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'mint'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"proposeReservePrice"`.
 */
export function usePrepareICryptoPunksMosaicRegistryProposeReservePrice(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMosaicRegistryABI,
      'proposeReservePrice'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'proposeReservePrice',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'proposeReservePrice'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"proposeReservePriceBatch"`.
 */
export function usePrepareICryptoPunksMosaicRegistryProposeReservePriceBatch(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMosaicRegistryABI,
      'proposeReservePriceBatch'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'proposeReservePriceBatch',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'proposeReservePriceBatch'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"refundBidDeposit"`.
 */
export function usePrepareICryptoPunksMosaicRegistryRefundBidDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMosaicRegistryABI,
      'refundBidDeposit'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'refundBidDeposit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'refundBidDeposit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"refundOnSold"`.
 */
export function usePrepareICryptoPunksMosaicRegistryRefundOnSold(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMosaicRegistryABI,
      'refundOnSold'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'refundOnSold',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'refundOnSold'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `functionName` set to `"respondToBidBatch"`.
 */
export function usePrepareICryptoPunksMosaicRegistryRespondToBidBatch(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMosaicRegistryABI,
      'respondToBidBatch'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMosaicRegistryABI,
    functionName: 'respondToBidBatch',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'respondToBidBatch'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__.
 */
export function useICryptoPunksMosaicRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMosaicRegistryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMosaicRegistryABI,
    ...config,
  } as UseContractEventConfig<typeof iCryptoPunksMosaicRegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `eventName` set to `"BidAccepted"`.
 */
export function useICryptoPunksMosaicRegistryBidAcceptedEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMosaicRegistryABI, 'BidAccepted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMosaicRegistryABI,
    eventName: 'BidAccepted',
    ...config,
  } as UseContractEventConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'BidAccepted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `eventName` set to `"BidProposed"`.
 */
export function useICryptoPunksMosaicRegistryBidProposedEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMosaicRegistryABI, 'BidProposed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMosaicRegistryABI,
    eventName: 'BidProposed',
    ...config,
  } as UseContractEventConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'BidProposed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `eventName` set to `"BidRefunded"`.
 */
export function useICryptoPunksMosaicRegistryBidRefundedEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMosaicRegistryABI, 'BidRefunded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMosaicRegistryABI,
    eventName: 'BidRefunded',
    ...config,
  } as UseContractEventConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'BidRefunded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `eventName` set to `"BidRejected"`.
 */
export function useICryptoPunksMosaicRegistryBidRejectedEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMosaicRegistryABI, 'BidRejected'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMosaicRegistryABI,
    eventName: 'BidRejected',
    ...config,
  } as UseContractEventConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'BidRejected'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `eventName` set to `"BidWon"`.
 */
export function useICryptoPunksMosaicRegistryBidWonEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMosaicRegistryABI, 'BidWon'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMosaicRegistryABI,
    eventName: 'BidWon',
    ...config,
  } as UseContractEventConfig<typeof iCryptoPunksMosaicRegistryABI, 'BidWon'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `eventName` set to `"MonoRefunded"`.
 */
export function useICryptoPunksMosaicRegistryMonoRefundedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iCryptoPunksMosaicRegistryABI,
      'MonoRefunded'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMosaicRegistryABI,
    eventName: 'MonoRefunded',
    ...config,
  } as UseContractEventConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'MonoRefunded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMosaicRegistryABI}__ and `eventName` set to `"OriginalSold"`.
 */
export function useICryptoPunksMosaicRegistryOriginalSoldEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iCryptoPunksMosaicRegistryABI,
      'OriginalSold'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMosaicRegistryABI,
    eventName: 'OriginalSold',
    ...config,
  } as UseContractEventConfig<
    typeof iCryptoPunksMosaicRegistryABI,
    'OriginalSold'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1155MetadataUriABI}__.
 */
export function useIerc1155MetadataUri(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1155MetadataUriABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriABI}__.
 */
export function useIerc1155MetadataUriRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc1155MetadataUriABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155MetadataUriABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc1155MetadataUriBalanceOf<
  TSelectData = ReadContractResult<typeof ierc1155MetadataUriABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155MetadataUriABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useIerc1155MetadataUriBalanceOfBatch<
  TSelectData = ReadContractResult<
    typeof ierc1155MetadataUriABI,
    'balanceOfBatch'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriABI,
      'balanceOfBatch',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155MetadataUriABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriABI,
    'balanceOfBatch',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc1155MetadataUriIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof ierc1155MetadataUriABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155MetadataUriABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155MetadataUriSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc1155MetadataUriABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155MetadataUriABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"uri"`.
 */
export function useIerc1155MetadataUriUri<
  TSelectData = ReadContractResult<typeof ierc1155MetadataUriABI, 'uri'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155MetadataUriABI, 'uri', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155MetadataUriABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<typeof ierc1155MetadataUriABI, 'uri', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__.
 */
export function useIerc1155MetadataUriWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155MetadataUriABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155MetadataUriABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc1155MetadataUriABI, TFunctionName>({
    abi: ierc1155MetadataUriABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useIerc1155MetadataUriSafeBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155MetadataUriABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155MetadataUriABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155MetadataUriABI,
    'safeBatchTransferFrom'
  >({
    abi: ierc1155MetadataUriABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc1155MetadataUriSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155MetadataUriABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155MetadataUriABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155MetadataUriABI,
    'safeTransferFrom'
  >({
    abi: ierc1155MetadataUriABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc1155MetadataUriSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155MetadataUriABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155MetadataUriABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155MetadataUriABI,
    'setApprovalForAll'
  >({
    abi: ierc1155MetadataUriABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__.
 */
export function usePrepareIerc1155MetadataUriWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155MetadataUriABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155MetadataUriABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareIerc1155MetadataUriSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155MetadataUriABI,
      'safeBatchTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155MetadataUriABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc1155MetadataUriSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155MetadataUriABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155MetadataUriABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc1155MetadataUriSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155MetadataUriABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155MetadataUriABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriABI}__.
 */
export function useIerc1155MetadataUriEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc1155MetadataUriABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155MetadataUriABI,
    ...config,
  } as UseContractEventConfig<typeof ierc1155MetadataUriABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc1155MetadataUriApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155MetadataUriABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155MetadataUriABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc1155MetadataUriABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useIerc1155MetadataUriTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155MetadataUriABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155MetadataUriABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof ierc1155MetadataUriABI, 'TransferBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useIerc1155MetadataUriTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155MetadataUriABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155MetadataUriABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof ierc1155MetadataUriABI, 'TransferSingle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriABI}__ and `eventName` set to `"URI"`.
 */
export function useIerc1155MetadataUriUriEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155MetadataUriABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155MetadataUriABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof ierc1155MetadataUriABI, 'URI'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__.
 */
export function useIerc1155MetadataUriUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1155MetadataUriUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__.
 */
export function useIerc1155MetadataUriUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc1155MetadataUriUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155MetadataUriUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc1155MetadataUriUpgradeableBalanceOf<
  TSelectData = ReadContractResult<
    typeof ierc1155MetadataUriUpgradeableABI,
    'balanceOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriUpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useIerc1155MetadataUriUpgradeableBalanceOfBatch<
  TSelectData = ReadContractResult<
    typeof ierc1155MetadataUriUpgradeableABI,
    'balanceOfBatch'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriUpgradeableABI,
      'balanceOfBatch',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'balanceOfBatch',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc1155MetadataUriUpgradeableIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof ierc1155MetadataUriUpgradeableABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriUpgradeableABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155MetadataUriUpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc1155MetadataUriUpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriUpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"uri"`.
 */
export function useIerc1155MetadataUriUpgradeableUri<
  TSelectData = ReadContractResult<
    typeof ierc1155MetadataUriUpgradeableABI,
    'uri'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155MetadataUriUpgradeableABI,
      'uri',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'uri',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__.
 */
export function useIerc1155MetadataUriUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155MetadataUriUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155MetadataUriUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155MetadataUriUpgradeableABI,
    TFunctionName
  >({ abi: ierc1155MetadataUriUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useIerc1155MetadataUriUpgradeableSafeBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155MetadataUriUpgradeableABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155MetadataUriUpgradeableABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155MetadataUriUpgradeableABI,
    'safeBatchTransferFrom'
  >({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc1155MetadataUriUpgradeableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155MetadataUriUpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155MetadataUriUpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155MetadataUriUpgradeableABI,
    'safeTransferFrom'
  >({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc1155MetadataUriUpgradeableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155MetadataUriUpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155MetadataUriUpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155MetadataUriUpgradeableABI,
    'setApprovalForAll'
  >({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__.
 */
export function usePrepareIerc1155MetadataUriUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155MetadataUriUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareIerc1155MetadataUriUpgradeableSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155MetadataUriUpgradeableABI,
      'safeBatchTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc1155MetadataUriUpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155MetadataUriUpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc1155MetadataUriUpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155MetadataUriUpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__.
 */
export function useIerc1155MetadataUriUpgradeableEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<
      typeof ierc1155MetadataUriUpgradeableABI,
      TEventName
    >,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155MetadataUriUpgradeableABI,
    ...config,
  } as UseContractEventConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc1155MetadataUriUpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ierc1155MetadataUriUpgradeableABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155MetadataUriUpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useIerc1155MetadataUriUpgradeableTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ierc1155MetadataUriUpgradeableABI,
      'TransferBatch'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155MetadataUriUpgradeableABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'TransferBatch'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useIerc1155MetadataUriUpgradeableTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ierc1155MetadataUriUpgradeableABI,
      'TransferSingle'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155MetadataUriUpgradeableABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'TransferSingle'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `eventName` set to `"URI"`.
 */
export function useIerc1155MetadataUriUpgradeableUriEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155MetadataUriUpgradeableABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155MetadataUriUpgradeableABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof ierc1155MetadataUriUpgradeableABI, 'URI'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155Receiver(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1155ReceiverABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155ReceiverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1155ReceiverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155ReceiverABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ReceiverABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ReceiverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155ReceiverSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc1155ReceiverABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155ReceiverABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ReceiverABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ReceiverABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155ReceiverWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc1155ReceiverABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc1155ReceiverABI, TFunctionName>({
    abi: ierc1155ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useIerc1155ReceiverOnErc1155BatchReceived<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ReceiverABI,
          'onERC1155BatchReceived'
        >['abi'],
        'onERC1155BatchReceived'
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverABI,
        'onERC1155BatchReceived'
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155ReceiverABI,
    'onERC1155BatchReceived'
  >({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useIerc1155ReceiverOnErc1155Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ReceiverABI,
          'onERC1155Received'
        >['abi'],
        'onERC1155Received'
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverABI,
        'onERC1155Received'
      > & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155ReceiverABI,
    'onERC1155Received'
  >({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function usePrepareIerc1155ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ReceiverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareIerc1155ReceiverOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareIerc1155ReceiverOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverABI,
      'onERC1155Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverABI,
    'onERC1155Received'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function useIerc1155(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1155ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function useIerc1155Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1155ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc1155ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc1155BalanceOf<
  TSelectData = ReadContractResult<typeof ierc1155ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc1155ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useIerc1155BalanceOfBatch<
  TSelectData = ReadContractResult<typeof ierc1155ABI, 'balanceOfBatch'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, 'balanceOfBatch', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<typeof ierc1155ABI, 'balanceOfBatch', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc1155IsApprovedForAll<
  TSelectData = ReadContractResult<typeof ierc1155ABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc1155ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function useIerc1155Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc1155ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc1155ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc1155ABI, TFunctionName>({
    abi: ierc1155ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useIerc1155SafeBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc1155ABI, 'safeBatchTransferFrom'>({
    abi: ierc1155ABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc1155SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc1155ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc1155ABI, 'safeTransferFrom'>({
    abi: ierc1155ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc1155SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc1155ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc1155ABI, 'setApprovalForAll'>({
    abi: ierc1155ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function usePrepareIerc1155Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareIerc1155SafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ABI, 'safeBatchTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc1155SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc1155SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__.
 */
export function useIerc1155Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc1155ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc1155ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc1155ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useIerc1155TransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155ABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof ierc1155ABI, 'TransferBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useIerc1155TransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155ABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof ierc1155ABI, 'TransferSingle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155ABI}__ and `eventName` set to `"URI"`.
 */
export function useIerc1155UriEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155ABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155ABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof ierc1155ABI, 'URI'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iCryptoPunksMarketABI}__.
 */
export function useICryptoPunksMarket(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iCryptoPunksMarketABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__.
 */
export function useICryptoPunksMarketRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iCryptoPunksMarketABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCryptoPunksMarketABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    ...config,
  } as UseContractReadConfig<
    typeof iCryptoPunksMarketABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"allPunksAssigned"`.
 */
export function useICryptoPunksMarketAllPunksAssigned<
  TSelectData = ReadContractResult<
    typeof iCryptoPunksMarketABI,
    'allPunksAssigned'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCryptoPunksMarketABI,
      'allPunksAssigned',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    functionName: 'allPunksAssigned',
    ...config,
  } as UseContractReadConfig<
    typeof iCryptoPunksMarketABI,
    'allPunksAssigned',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useICryptoPunksMarketBalanceOf<
  TSelectData = ReadContractResult<typeof iCryptoPunksMarketABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCryptoPunksMarketABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof iCryptoPunksMarketABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"decimals"`.
 */
export function useICryptoPunksMarketDecimals<
  TSelectData = ReadContractResult<typeof iCryptoPunksMarketABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCryptoPunksMarketABI,
      'decimals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof iCryptoPunksMarketABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"imageHash"`.
 */
export function useICryptoPunksMarketImageHash<
  TSelectData = ReadContractResult<typeof iCryptoPunksMarketABI, 'imageHash'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCryptoPunksMarketABI,
      'imageHash',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    functionName: 'imageHash',
    ...config,
  } as UseContractReadConfig<
    typeof iCryptoPunksMarketABI,
    'imageHash',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"name"`.
 */
export function useICryptoPunksMarketName<
  TSelectData = ReadContractResult<typeof iCryptoPunksMarketABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCryptoPunksMarketABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof iCryptoPunksMarketABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"nextPunkIndexToAssign"`.
 */
export function useICryptoPunksMarketNextPunkIndexToAssign<
  TSelectData = ReadContractResult<
    typeof iCryptoPunksMarketABI,
    'nextPunkIndexToAssign'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCryptoPunksMarketABI,
      'nextPunkIndexToAssign',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    functionName: 'nextPunkIndexToAssign',
    ...config,
  } as UseContractReadConfig<
    typeof iCryptoPunksMarketABI,
    'nextPunkIndexToAssign',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"pendingWithdrawals"`.
 */
export function useICryptoPunksMarketPendingWithdrawals<
  TSelectData = ReadContractResult<
    typeof iCryptoPunksMarketABI,
    'pendingWithdrawals'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCryptoPunksMarketABI,
      'pendingWithdrawals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    functionName: 'pendingWithdrawals',
    ...config,
  } as UseContractReadConfig<
    typeof iCryptoPunksMarketABI,
    'pendingWithdrawals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"punkBids"`.
 */
export function useICryptoPunksMarketPunkBids<
  TSelectData = ReadContractResult<typeof iCryptoPunksMarketABI, 'punkBids'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCryptoPunksMarketABI,
      'punkBids',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    functionName: 'punkBids',
    ...config,
  } as UseContractReadConfig<
    typeof iCryptoPunksMarketABI,
    'punkBids',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"punkIndexToAddress"`.
 */
export function useICryptoPunksMarketPunkIndexToAddress<
  TSelectData = ReadContractResult<
    typeof iCryptoPunksMarketABI,
    'punkIndexToAddress'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCryptoPunksMarketABI,
      'punkIndexToAddress',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    functionName: 'punkIndexToAddress',
    ...config,
  } as UseContractReadConfig<
    typeof iCryptoPunksMarketABI,
    'punkIndexToAddress',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"punksOfferedForSale"`.
 */
export function useICryptoPunksMarketPunksOfferedForSale<
  TSelectData = ReadContractResult<
    typeof iCryptoPunksMarketABI,
    'punksOfferedForSale'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCryptoPunksMarketABI,
      'punksOfferedForSale',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    functionName: 'punksOfferedForSale',
    ...config,
  } as UseContractReadConfig<
    typeof iCryptoPunksMarketABI,
    'punksOfferedForSale',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"punksRemainingToAssign"`.
 */
export function useICryptoPunksMarketPunksRemainingToAssign<
  TSelectData = ReadContractResult<
    typeof iCryptoPunksMarketABI,
    'punksRemainingToAssign'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCryptoPunksMarketABI,
      'punksRemainingToAssign',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    functionName: 'punksRemainingToAssign',
    ...config,
  } as UseContractReadConfig<
    typeof iCryptoPunksMarketABI,
    'punksRemainingToAssign',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"standard"`.
 */
export function useICryptoPunksMarketStandard<
  TSelectData = ReadContractResult<typeof iCryptoPunksMarketABI, 'standard'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCryptoPunksMarketABI,
      'standard',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    functionName: 'standard',
    ...config,
  } as UseContractReadConfig<
    typeof iCryptoPunksMarketABI,
    'standard',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"symbol"`.
 */
export function useICryptoPunksMarketSymbol<
  TSelectData = ReadContractResult<typeof iCryptoPunksMarketABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCryptoPunksMarketABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof iCryptoPunksMarketABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useICryptoPunksMarketTotalSupply<
  TSelectData = ReadContractResult<typeof iCryptoPunksMarketABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iCryptoPunksMarketABI,
      'totalSupply',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCryptoPunksMarketABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof iCryptoPunksMarketABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__.
 */
export function useICryptoPunksMarketWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCryptoPunksMarketABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMarketABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCryptoPunksMarketABI, TFunctionName>({
    abi: iCryptoPunksMarketABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"acceptBidForPunk"`.
 */
export function useICryptoPunksMarketAcceptBidForPunk<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMarketABI,
          'acceptBidForPunk'
        >['abi'],
        'acceptBidForPunk'
      > & { functionName?: 'acceptBidForPunk' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMarketABI,
        'acceptBidForPunk'
      > & {
        abi?: never
        functionName?: 'acceptBidForPunk'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMarketABI,
    'acceptBidForPunk'
  >({
    abi: iCryptoPunksMarketABI,
    functionName: 'acceptBidForPunk',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"allInitialOwnersAssigned"`.
 */
export function useICryptoPunksMarketAllInitialOwnersAssigned<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMarketABI,
          'allInitialOwnersAssigned'
        >['abi'],
        'allInitialOwnersAssigned'
      > & { functionName?: 'allInitialOwnersAssigned' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMarketABI,
        'allInitialOwnersAssigned'
      > & {
        abi?: never
        functionName?: 'allInitialOwnersAssigned'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMarketABI,
    'allInitialOwnersAssigned'
  >({
    abi: iCryptoPunksMarketABI,
    functionName: 'allInitialOwnersAssigned',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"buyPunk"`.
 */
export function useICryptoPunksMarketBuyPunk<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMarketABI,
          'buyPunk'
        >['abi'],
        'buyPunk'
      > & { functionName?: 'buyPunk' }
    : UseContractWriteConfig<TMode, typeof iCryptoPunksMarketABI, 'buyPunk'> & {
        abi?: never
        functionName?: 'buyPunk'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCryptoPunksMarketABI, 'buyPunk'>({
    abi: iCryptoPunksMarketABI,
    functionName: 'buyPunk',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"enterBidForPunk"`.
 */
export function useICryptoPunksMarketEnterBidForPunk<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMarketABI,
          'enterBidForPunk'
        >['abi'],
        'enterBidForPunk'
      > & { functionName?: 'enterBidForPunk' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMarketABI,
        'enterBidForPunk'
      > & {
        abi?: never
        functionName?: 'enterBidForPunk'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMarketABI,
    'enterBidForPunk'
  >({
    abi: iCryptoPunksMarketABI,
    functionName: 'enterBidForPunk',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"getPunk"`.
 */
export function useICryptoPunksMarketGetPunk<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMarketABI,
          'getPunk'
        >['abi'],
        'getPunk'
      > & { functionName?: 'getPunk' }
    : UseContractWriteConfig<TMode, typeof iCryptoPunksMarketABI, 'getPunk'> & {
        abi?: never
        functionName?: 'getPunk'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCryptoPunksMarketABI, 'getPunk'>({
    abi: iCryptoPunksMarketABI,
    functionName: 'getPunk',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"offerPunkForSale"`.
 */
export function useICryptoPunksMarketOfferPunkForSale<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMarketABI,
          'offerPunkForSale'
        >['abi'],
        'offerPunkForSale'
      > & { functionName?: 'offerPunkForSale' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMarketABI,
        'offerPunkForSale'
      > & {
        abi?: never
        functionName?: 'offerPunkForSale'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMarketABI,
    'offerPunkForSale'
  >({
    abi: iCryptoPunksMarketABI,
    functionName: 'offerPunkForSale',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"offerPunkForSaleToAddress"`.
 */
export function useICryptoPunksMarketOfferPunkForSaleToAddress<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMarketABI,
          'offerPunkForSaleToAddress'
        >['abi'],
        'offerPunkForSaleToAddress'
      > & { functionName?: 'offerPunkForSaleToAddress' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMarketABI,
        'offerPunkForSaleToAddress'
      > & {
        abi?: never
        functionName?: 'offerPunkForSaleToAddress'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMarketABI,
    'offerPunkForSaleToAddress'
  >({
    abi: iCryptoPunksMarketABI,
    functionName: 'offerPunkForSaleToAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"punkNoLongerForSale"`.
 */
export function useICryptoPunksMarketPunkNoLongerForSale<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMarketABI,
          'punkNoLongerForSale'
        >['abi'],
        'punkNoLongerForSale'
      > & { functionName?: 'punkNoLongerForSale' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMarketABI,
        'punkNoLongerForSale'
      > & {
        abi?: never
        functionName?: 'punkNoLongerForSale'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMarketABI,
    'punkNoLongerForSale'
  >({
    abi: iCryptoPunksMarketABI,
    functionName: 'punkNoLongerForSale',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"setInitialOwner"`.
 */
export function useICryptoPunksMarketSetInitialOwner<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMarketABI,
          'setInitialOwner'
        >['abi'],
        'setInitialOwner'
      > & { functionName?: 'setInitialOwner' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMarketABI,
        'setInitialOwner'
      > & {
        abi?: never
        functionName?: 'setInitialOwner'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMarketABI,
    'setInitialOwner'
  >({
    abi: iCryptoPunksMarketABI,
    functionName: 'setInitialOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"setInitialOwners"`.
 */
export function useICryptoPunksMarketSetInitialOwners<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMarketABI,
          'setInitialOwners'
        >['abi'],
        'setInitialOwners'
      > & { functionName?: 'setInitialOwners' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMarketABI,
        'setInitialOwners'
      > & {
        abi?: never
        functionName?: 'setInitialOwners'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMarketABI,
    'setInitialOwners'
  >({
    abi: iCryptoPunksMarketABI,
    functionName: 'setInitialOwners',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"transferPunk"`.
 */
export function useICryptoPunksMarketTransferPunk<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMarketABI,
          'transferPunk'
        >['abi'],
        'transferPunk'
      > & { functionName?: 'transferPunk' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMarketABI,
        'transferPunk'
      > & {
        abi?: never
        functionName?: 'transferPunk'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCryptoPunksMarketABI, 'transferPunk'>({
    abi: iCryptoPunksMarketABI,
    functionName: 'transferPunk',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"withdraw"`.
 */
export function useICryptoPunksMarketWithdraw<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMarketABI,
          'withdraw'
        >['abi'],
        'withdraw'
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMarketABI,
        'withdraw'
      > & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCryptoPunksMarketABI, 'withdraw'>({
    abi: iCryptoPunksMarketABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"withdrawBidForPunk"`.
 */
export function useICryptoPunksMarketWithdrawBidForPunk<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iCryptoPunksMarketABI,
          'withdrawBidForPunk'
        >['abi'],
        'withdrawBidForPunk'
      > & { functionName?: 'withdrawBidForPunk' }
    : UseContractWriteConfig<
        TMode,
        typeof iCryptoPunksMarketABI,
        'withdrawBidForPunk'
      > & {
        abi?: never
        functionName?: 'withdrawBidForPunk'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iCryptoPunksMarketABI,
    'withdrawBidForPunk'
  >({
    abi: iCryptoPunksMarketABI,
    functionName: 'withdrawBidForPunk',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__.
 */
export function usePrepareICryptoPunksMarketWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCryptoPunksMarketABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMarketABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMarketABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"acceptBidForPunk"`.
 */
export function usePrepareICryptoPunksMarketAcceptBidForPunk(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMarketABI,
      'acceptBidForPunk'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMarketABI,
    functionName: 'acceptBidForPunk',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMarketABI,
    'acceptBidForPunk'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"allInitialOwnersAssigned"`.
 */
export function usePrepareICryptoPunksMarketAllInitialOwnersAssigned(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMarketABI,
      'allInitialOwnersAssigned'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMarketABI,
    functionName: 'allInitialOwnersAssigned',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMarketABI,
    'allInitialOwnersAssigned'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"buyPunk"`.
 */
export function usePrepareICryptoPunksMarketBuyPunk(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCryptoPunksMarketABI, 'buyPunk'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMarketABI,
    functionName: 'buyPunk',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCryptoPunksMarketABI, 'buyPunk'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"enterBidForPunk"`.
 */
export function usePrepareICryptoPunksMarketEnterBidForPunk(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMarketABI,
      'enterBidForPunk'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMarketABI,
    functionName: 'enterBidForPunk',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMarketABI,
    'enterBidForPunk'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"getPunk"`.
 */
export function usePrepareICryptoPunksMarketGetPunk(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCryptoPunksMarketABI, 'getPunk'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMarketABI,
    functionName: 'getPunk',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCryptoPunksMarketABI, 'getPunk'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"offerPunkForSale"`.
 */
export function usePrepareICryptoPunksMarketOfferPunkForSale(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMarketABI,
      'offerPunkForSale'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMarketABI,
    functionName: 'offerPunkForSale',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMarketABI,
    'offerPunkForSale'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"offerPunkForSaleToAddress"`.
 */
export function usePrepareICryptoPunksMarketOfferPunkForSaleToAddress(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMarketABI,
      'offerPunkForSaleToAddress'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMarketABI,
    functionName: 'offerPunkForSaleToAddress',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMarketABI,
    'offerPunkForSaleToAddress'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"punkNoLongerForSale"`.
 */
export function usePrepareICryptoPunksMarketPunkNoLongerForSale(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMarketABI,
      'punkNoLongerForSale'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMarketABI,
    functionName: 'punkNoLongerForSale',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMarketABI,
    'punkNoLongerForSale'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"setInitialOwner"`.
 */
export function usePrepareICryptoPunksMarketSetInitialOwner(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMarketABI,
      'setInitialOwner'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMarketABI,
    functionName: 'setInitialOwner',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMarketABI,
    'setInitialOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"setInitialOwners"`.
 */
export function usePrepareICryptoPunksMarketSetInitialOwners(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMarketABI,
      'setInitialOwners'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMarketABI,
    functionName: 'setInitialOwners',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMarketABI,
    'setInitialOwners'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"transferPunk"`.
 */
export function usePrepareICryptoPunksMarketTransferPunk(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCryptoPunksMarketABI, 'transferPunk'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMarketABI,
    functionName: 'transferPunk',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMarketABI,
    'transferPunk'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareICryptoPunksMarketWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCryptoPunksMarketABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMarketABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCryptoPunksMarketABI, 'withdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `functionName` set to `"withdrawBidForPunk"`.
 */
export function usePrepareICryptoPunksMarketWithdrawBidForPunk(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iCryptoPunksMarketABI,
      'withdrawBidForPunk'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCryptoPunksMarketABI,
    functionName: 'withdrawBidForPunk',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iCryptoPunksMarketABI,
    'withdrawBidForPunk'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMarketABI}__.
 */
export function useICryptoPunksMarketEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMarketABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMarketABI,
    ...config,
  } as UseContractEventConfig<typeof iCryptoPunksMarketABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `eventName` set to `"Assign"`.
 */
export function useICryptoPunksMarketAssignEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMarketABI, 'Assign'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMarketABI,
    eventName: 'Assign',
    ...config,
  } as UseContractEventConfig<typeof iCryptoPunksMarketABI, 'Assign'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `eventName` set to `"PunkBidEntered"`.
 */
export function useICryptoPunksMarketPunkBidEnteredEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMarketABI, 'PunkBidEntered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMarketABI,
    eventName: 'PunkBidEntered',
    ...config,
  } as UseContractEventConfig<typeof iCryptoPunksMarketABI, 'PunkBidEntered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `eventName` set to `"PunkBidWithdrawn"`.
 */
export function useICryptoPunksMarketPunkBidWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMarketABI, 'PunkBidWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMarketABI,
    eventName: 'PunkBidWithdrawn',
    ...config,
  } as UseContractEventConfig<typeof iCryptoPunksMarketABI, 'PunkBidWithdrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `eventName` set to `"PunkBought"`.
 */
export function useICryptoPunksMarketPunkBoughtEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMarketABI, 'PunkBought'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMarketABI,
    eventName: 'PunkBought',
    ...config,
  } as UseContractEventConfig<typeof iCryptoPunksMarketABI, 'PunkBought'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `eventName` set to `"PunkNoLongerForSale"`.
 */
export function useICryptoPunksMarketPunkNoLongerForSaleEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMarketABI, 'PunkNoLongerForSale'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMarketABI,
    eventName: 'PunkNoLongerForSale',
    ...config,
  } as UseContractEventConfig<
    typeof iCryptoPunksMarketABI,
    'PunkNoLongerForSale'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `eventName` set to `"PunkOffered"`.
 */
export function useICryptoPunksMarketPunkOfferedEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMarketABI, 'PunkOffered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMarketABI,
    eventName: 'PunkOffered',
    ...config,
  } as UseContractEventConfig<typeof iCryptoPunksMarketABI, 'PunkOffered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `eventName` set to `"PunkTransfer"`.
 */
export function useICryptoPunksMarketPunkTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMarketABI, 'PunkTransfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMarketABI,
    eventName: 'PunkTransfer',
    ...config,
  } as UseContractEventConfig<typeof iCryptoPunksMarketABI, 'PunkTransfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCryptoPunksMarketABI}__ and `eventName` set to `"Transfer"`.
 */
export function useICryptoPunksMarketTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof iCryptoPunksMarketABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCryptoPunksMarketABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof iCryptoPunksMarketABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1155UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc1155UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc1155UpgradeableBalanceOf<
  TSelectData = ReadContractResult<typeof ierc1155UpgradeableABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useIerc1155UpgradeableBalanceOfBatch<
  TSelectData = ReadContractResult<
    typeof ierc1155UpgradeableABI,
    'balanceOfBatch'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      'balanceOfBatch',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    'balanceOfBatch',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc1155UpgradeableIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof ierc1155UpgradeableABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155UpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc1155UpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155UpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155UpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155UpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc1155UpgradeableABI, TFunctionName>({
    abi: ierc1155UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useIerc1155UpgradeableSafeBatchTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155UpgradeableABI,
          'safeBatchTransferFrom'
        >['abi'],
        'safeBatchTransferFrom'
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155UpgradeableABI,
        'safeBatchTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155UpgradeableABI,
    'safeBatchTransferFrom'
  >({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc1155UpgradeableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155UpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155UpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155UpgradeableABI,
    'safeTransferFrom'
  >({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc1155UpgradeableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155UpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155UpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155UpgradeableABI,
    'setApprovalForAll'
  >({
    abi: ierc1155UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function usePrepareIerc1155UpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareIerc1155UpgradeableSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155UpgradeableABI,
      'safeBatchTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc1155UpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155UpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc1155UpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155UpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc1155UpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useIerc1155UpgradeableTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useIerc1155UpgradeableTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferSingle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"URI"`.
 */
export function useIerc1155UpgradeableUriEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc1155UpgradeableABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc1155UpgradeableABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof ierc1155UpgradeableABI, 'URI'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function useIerc1155ReceiverUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1155ReceiverUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function useIerc1155ReceiverUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ReceiverUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155ReceiverUpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc1155ReceiverUpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function useIerc1155ReceiverUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ReceiverUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName
  >({ abi: ierc1155ReceiverUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useIerc1155ReceiverUpgradeableOnErc1155BatchReceived<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ReceiverUpgradeableABI,
          'onERC1155BatchReceived'
        >['abi'],
        'onERC1155BatchReceived'
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverUpgradeableABI,
        'onERC1155BatchReceived'
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155ReceiverUpgradeableABI,
    'onERC1155BatchReceived'
  >({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useIerc1155ReceiverUpgradeableOnErc1155Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc1155ReceiverUpgradeableABI,
          'onERC1155Received'
        >['abi'],
        'onERC1155Received'
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc1155ReceiverUpgradeableABI,
        'onERC1155Received'
      > & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc1155ReceiverUpgradeableABI,
    'onERC1155Received'
  >({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function usePrepareIerc1155ReceiverUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareIerc1155ReceiverUpgradeableOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      'onERC1155BatchReceived'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareIerc1155ReceiverUpgradeableOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc1155ReceiverUpgradeableABI,
      'onERC1155Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    'onERC1155Received'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc165UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165UpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc165UpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc165UpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721Receiver(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc721ReceiverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721ReceiverWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ReceiverABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, TFunctionName>({
    abi: ierc721ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ReceiverABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, 'onERC721Received'>(
    {
      abi: ierc721ReceiverABI,
      functionName: 'onERC721Received',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function usePrepareIerc721ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc721MetadataUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataUpgradeableBalanceOf<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'balanceOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataUpgradeableGetApproved<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'getApproved'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataUpgradeableIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataUpgradeableName<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'name'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'name',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'name',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataUpgradeableOwnerOf<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'ownerOf'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'ownerOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataUpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataUpgradeableSymbol<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'symbol'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'symbol',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'symbol',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataUpgradeableTokenUri<
  TSelectData = ReadContractResult<
    typeof ierc721MetadataUpgradeableABI,
    'tokenURI'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataUpgradeableABI,
      'tokenURI',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataUpgradeableABI,
    'tokenURI',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >({ abi: ierc721MetadataUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataUpgradeableApprove<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        'approve'
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    'approve'
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataUpgradeableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    'safeTransferFrom'
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataUpgradeableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    'setApprovalForAll'
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataUpgradeableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721MetadataUpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721MetadataUpgradeableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721MetadataUpgradeableABI,
    'transferFrom'
  >({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function usePrepareIerc721MetadataUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataUpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataUpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__.
 */
export function useIerc721MetadataUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataUpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ierc721MetadataUpgradeableABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof ierc721MetadataUpgradeableABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'getApproved', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721ABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc721ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, TFunctionName>({
    abi: ierc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'approve'>({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'safeTransferFrom'>({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'setApprovalForAll'>({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'transferFrom'>({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TSelectData = ReadContractResult<typeof ierc165ABI, 'supportsInterface'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc165ABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function useIerc721ReceiverUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc721ReceiverUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function useIerc721ReceiverUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ReceiverUpgradeableABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721ReceiverUpgradeableABI,
    TFunctionName
  >({ abi: ierc721ReceiverUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverUpgradeableOnErc721Received<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721ReceiverUpgradeableABI,
          'onERC721Received'
        >['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721ReceiverUpgradeableABI,
        'onERC721Received'
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721ReceiverUpgradeableABI,
    'onERC721Received'
  >({
    abi: ierc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__.
 */
export function usePrepareIerc721ReceiverUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverUpgradeableOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverUpgradeableABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverUpgradeableABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721Upgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc721UpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721UpgradeableBalanceOf<
  TSelectData = ReadContractResult<typeof ierc721UpgradeableABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      'balanceOf',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721UpgradeableGetApproved<
  TSelectData = ReadContractResult<typeof ierc721UpgradeableABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      'getApproved',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    'getApproved',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721UpgradeableIsApprovedForAll<
  TSelectData = ReadContractResult<
    typeof ierc721UpgradeableABI,
    'isApprovedForAll'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      'isApprovedForAll',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    'isApprovedForAll',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721UpgradeableOwnerOf<
  TSelectData = ReadContractResult<typeof ierc721UpgradeableABI, 'ownerOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721UpgradeableABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    'ownerOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721UpgradeableSupportsInterface<
  TSelectData = ReadContractResult<
    typeof ierc721UpgradeableABI,
    'supportsInterface'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721UpgradeableABI,
      'supportsInterface',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721UpgradeableABI,
    'supportsInterface',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721UpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721UpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc721UpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721UpgradeableABI, TFunctionName>({
    abi: ierc721UpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721UpgradeableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'approve'
        >['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721UpgradeableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721UpgradeableABI, 'approve'>({
    abi: ierc721UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721UpgradeableSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721UpgradeableABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721UpgradeableABI,
    'safeTransferFrom'
  >({
    abi: ierc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721UpgradeableSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721UpgradeableABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof ierc721UpgradeableABI,
    'setApprovalForAll'
  >({
    abi: ierc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721UpgradeableTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc721UpgradeableABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc721UpgradeableABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721UpgradeableABI, 'transferFrom'>({
    abi: ierc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function usePrepareIerc721UpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721UpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721UpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721UpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721UpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721UpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721UpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721UpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721UpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721UpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__.
 */
export function useIerc721UpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721UpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721UpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721UpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721UpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721UpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721UpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721UpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: initializableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    ...config,
  } as UseContractEventConfig<typeof initializableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInitializableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof initializableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link proxyABI}__.
 */
export function useProxy(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: proxyABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__.
 */
export function useReentrancyGuardUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: reentrancyGuardUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__.
 */
export function useReentrancyGuardUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: reentrancyGuardUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useReentrancyGuardUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: reentrancyGuardUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof reentrancyGuardUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link scriptABI}__.
 */
export function useScript(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: scriptABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link scriptABI}__.
 */
export function useScriptRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof scriptABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof scriptABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: scriptABI, ...config } as UseContractReadConfig<
    typeof scriptABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link scriptABI}__ and `functionName` set to `"IS_SCRIPT"`.
 */
export function useScriptIsScript<
  TSelectData = ReadContractResult<typeof scriptABI, 'IS_SCRIPT'>,
>(
  config: Omit<
    UseContractReadConfig<typeof scriptABI, 'IS_SCRIPT', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: scriptABI,
    functionName: 'IS_SCRIPT',
    ...config,
  } as UseContractReadConfig<typeof scriptABI, 'IS_SCRIPT', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stdAssertionsABI}__.
 */
export function useStdAssertions(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: stdAssertionsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdAssertionsABI}__.
 */
export function useStdAssertionsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stdAssertionsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdAssertionsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: stdAssertionsABI,
    ...config,
  } as UseContractReadConfig<
    typeof stdAssertionsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdAssertionsABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useStdAssertionsIsTest<
  TSelectData = ReadContractResult<typeof stdAssertionsABI, 'IS_TEST'>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdAssertionsABI, 'IS_TEST', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdAssertionsABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof stdAssertionsABI, 'IS_TEST', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdAssertionsABI}__ and `functionName` set to `"failed"`.
 */
export function useStdAssertionsFailed<
  TSelectData = ReadContractResult<typeof stdAssertionsABI, 'failed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdAssertionsABI, 'failed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdAssertionsABI,
    functionName: 'failed',
    ...config,
  } as UseContractReadConfig<typeof stdAssertionsABI, 'failed', TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__.
 */
export function useStdAssertionsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log"`.
 */
export function useStdAssertionsLogEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_address"`.
 */
export function useStdAssertionsLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_array"`.
 */
export function useStdAssertionsLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useStdAssertionsLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useStdAssertionsLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_int"`.
 */
export function useStdAssertionsLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useStdAssertionsLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useStdAssertionsLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_named_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_named_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useStdAssertionsLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useStdAssertionsLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useStdAssertionsLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_named_decimal_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useStdAssertionsLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'log_named_decimal_uint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useStdAssertionsLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useStdAssertionsLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useStdAssertionsLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_string"`.
 */
export function useStdAssertionsLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_uint"`.
 */
export function useStdAssertionsLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"logs"`.
 */
export function useStdAssertionsLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'logs'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stdErrorABI}__.
 */
export function useStdError(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: stdErrorABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__.
 */
export function useStdErrorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stdErrorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdErrorABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: stdErrorABI,
    ...config,
  } as UseContractReadConfig<typeof stdErrorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"arithmeticError"`.
 */
export function useStdErrorArithmeticError<
  TSelectData = ReadContractResult<typeof stdErrorABI, 'arithmeticError'>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdErrorABI, 'arithmeticError', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdErrorABI,
    functionName: 'arithmeticError',
    ...config,
  } as UseContractReadConfig<
    typeof stdErrorABI,
    'arithmeticError',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"assertionError"`.
 */
export function useStdErrorAssertionError<
  TSelectData = ReadContractResult<typeof stdErrorABI, 'assertionError'>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdErrorABI, 'assertionError', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdErrorABI,
    functionName: 'assertionError',
    ...config,
  } as UseContractReadConfig<typeof stdErrorABI, 'assertionError', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"divisionError"`.
 */
export function useStdErrorDivisionError<
  TSelectData = ReadContractResult<typeof stdErrorABI, 'divisionError'>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdErrorABI, 'divisionError', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdErrorABI,
    functionName: 'divisionError',
    ...config,
  } as UseContractReadConfig<typeof stdErrorABI, 'divisionError', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"encodeStorageError"`.
 */
export function useStdErrorEncodeStorageError<
  TSelectData = ReadContractResult<typeof stdErrorABI, 'encodeStorageError'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdErrorABI,
      'encodeStorageError',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdErrorABI,
    functionName: 'encodeStorageError',
    ...config,
  } as UseContractReadConfig<
    typeof stdErrorABI,
    'encodeStorageError',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"enumConversionError"`.
 */
export function useStdErrorEnumConversionError<
  TSelectData = ReadContractResult<typeof stdErrorABI, 'enumConversionError'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdErrorABI,
      'enumConversionError',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdErrorABI,
    functionName: 'enumConversionError',
    ...config,
  } as UseContractReadConfig<
    typeof stdErrorABI,
    'enumConversionError',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"indexOOBError"`.
 */
export function useStdErrorIndexOobError<
  TSelectData = ReadContractResult<typeof stdErrorABI, 'indexOOBError'>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdErrorABI, 'indexOOBError', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdErrorABI,
    functionName: 'indexOOBError',
    ...config,
  } as UseContractReadConfig<typeof stdErrorABI, 'indexOOBError', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"memOverflowError"`.
 */
export function useStdErrorMemOverflowError<
  TSelectData = ReadContractResult<typeof stdErrorABI, 'memOverflowError'>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdErrorABI, 'memOverflowError', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdErrorABI,
    functionName: 'memOverflowError',
    ...config,
  } as UseContractReadConfig<
    typeof stdErrorABI,
    'memOverflowError',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"popError"`.
 */
export function useStdErrorPopError<
  TSelectData = ReadContractResult<typeof stdErrorABI, 'popError'>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdErrorABI, 'popError', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdErrorABI,
    functionName: 'popError',
    ...config,
  } as UseContractReadConfig<typeof stdErrorABI, 'popError', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"zeroVarError"`.
 */
export function useStdErrorZeroVarError<
  TSelectData = ReadContractResult<typeof stdErrorABI, 'zeroVarError'>,
>(
  config: Omit<
    UseContractReadConfig<typeof stdErrorABI, 'zeroVarError', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdErrorABI,
    functionName: 'zeroVarError',
    ...config,
  } as UseContractReadConfig<typeof stdErrorABI, 'zeroVarError', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stdStorageSafeABI}__.
 */
export function useStdStorageSafe(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: stdStorageSafeABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdStorageSafeABI}__.
 */
export function useStdStorageSafeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof stdStorageSafeABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdStorageSafeABI,
    ...config,
  } as UseContractEventConfig<typeof stdStorageSafeABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdStorageSafeABI}__ and `eventName` set to `"SlotFound"`.
 */
export function useStdStorageSafeSlotFoundEvent(
  config: Omit<
    UseContractEventConfig<typeof stdStorageSafeABI, 'SlotFound'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdStorageSafeABI,
    eventName: 'SlotFound',
    ...config,
  } as UseContractEventConfig<typeof stdStorageSafeABI, 'SlotFound'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdStorageSafeABI}__ and `eventName` set to `"WARNING_UninitedSlot"`.
 */
export function useStdStorageSafeWarningUninitedSlotEvent(
  config: Omit<
    UseContractEventConfig<typeof stdStorageSafeABI, 'WARNING_UninitedSlot'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdStorageSafeABI,
    eventName: 'WARNING_UninitedSlot',
    ...config,
  } as UseContractEventConfig<typeof stdStorageSafeABI, 'WARNING_UninitedSlot'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link dsTestABI}__.
 */
export function useDsTest(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: dsTestABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dsTestABI}__.
 */
export function useDsTestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dsTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dsTestABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: dsTestABI, ...config } as UseContractReadConfig<
    typeof dsTestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useDsTestIsTest<
  TSelectData = ReadContractResult<typeof dsTestABI, 'IS_TEST'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dsTestABI, 'IS_TEST', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dsTestABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof dsTestABI, 'IS_TEST', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"failed"`.
 */
export function useDsTestFailed<
  TSelectData = ReadContractResult<typeof dsTestABI, 'failed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dsTestABI, 'failed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dsTestABI,
    functionName: 'failed',
    ...config,
  } as UseContractReadConfig<typeof dsTestABI, 'failed', TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__.
 */
export function useDsTestEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log"`.
 */
export function useDsTestLogEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_address"`.
 */
export function useDsTestLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useDsTestLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useDsTestLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_int"`.
 */
export function useDsTestLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useDsTestLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useDsTestLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useDsTestLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useDsTestLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_decimal_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useDsTestLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_decimal_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useDsTestLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useDsTestLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useDsTestLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_string"`.
 */
export function useDsTestLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_uint"`.
 */
export function useDsTestLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"logs"`.
 */
export function useDsTestLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof dsTestABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dsTestABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof dsTestABI, 'logs'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link testABI}__.
 */
export function useTest(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: testABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__.
 */
export function useTestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: testABI, ...config } as UseContractReadConfig<
    typeof testABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useTestIsTest<
  TSelectData = ReadContractResult<typeof testABI, 'IS_TEST'>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, 'IS_TEST', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof testABI, 'IS_TEST', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"failed"`.
 */
export function useTestFailed<
  TSelectData = ReadContractResult<typeof testABI, 'failed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof testABI, 'failed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testABI,
    functionName: 'failed',
    ...config,
  } as UseContractReadConfig<typeof testABI, 'failed', TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__.
 */
export function useTestEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof testABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: testABI, ...config } as UseContractEventConfig<
    typeof testABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log"`.
 */
export function useTestLogEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_address"`.
 */
export function useTestLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_array"`.
 */
export function useTestLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useTestLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useTestLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_int"`.
 */
export function useTestLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useTestLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useTestLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useTestLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useTestLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useTestLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_decimal_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useTestLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_decimal_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useTestLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useTestLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useTestLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_string"`.
 */
export function useTestLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_uint"`.
 */
export function useTestLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"logs"`.
 */
export function useTestLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof testABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof testABI, 'logs'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link testUtilsABI}__.
 */
export function useTestUtils(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: testUtilsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testUtilsABI}__.
 */
export function useTestUtilsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof testUtilsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof testUtilsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: testUtilsABI,
    ...config,
  } as UseContractReadConfig<typeof testUtilsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testUtilsABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useTestUtilsIsTest<
  TSelectData = ReadContractResult<typeof testUtilsABI, 'IS_TEST'>,
>(
  config: Omit<
    UseContractReadConfig<typeof testUtilsABI, 'IS_TEST', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testUtilsABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof testUtilsABI, 'IS_TEST', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testUtilsABI}__ and `functionName` set to `"failed"`.
 */
export function useTestUtilsFailed<
  TSelectData = ReadContractResult<typeof testUtilsABI, 'failed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof testUtilsABI, 'failed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testUtilsABI,
    functionName: 'failed',
    ...config,
  } as UseContractReadConfig<typeof testUtilsABI, 'failed', TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__.
 */
export function useTestUtilsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log"`.
 */
export function useTestUtilsLogEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_address"`.
 */
export function useTestUtilsLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_array"`.
 */
export function useTestUtilsLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useTestUtilsLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useTestUtilsLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_int"`.
 */
export function useTestUtilsLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useTestUtilsLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useTestUtilsLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_named_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_named_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useTestUtilsLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useTestUtilsLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useTestUtilsLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_named_decimal_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useTestUtilsLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_named_decimal_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useTestUtilsLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useTestUtilsLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useTestUtilsLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_string"`.
 */
export function useTestUtilsLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"log_uint"`.
 */
export function useTestUtilsLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testUtilsABI}__ and `eventName` set to `"logs"`.
 */
export function useTestUtilsLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof testUtilsABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testUtilsABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof testUtilsABI, 'logs'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: uupsUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useUupsUpgradeableProxiableUuid<
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, 'proxiableUUID'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uupsUpgradeableABI,
      'proxiableUUID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    'proxiableUUID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof uupsUpgradeableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof uupsUpgradeableABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof uupsUpgradeableABI, TFunctionName>({
    abi: uupsUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useUupsUpgradeableUpgradeTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          'upgradeTo'
        >['abi'],
        'upgradeTo'
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<TMode, typeof uupsUpgradeableABI, 'upgradeTo'> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof uupsUpgradeableABI, 'upgradeTo'>({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useUupsUpgradeableUpgradeToAndCall<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          'upgradeToAndCall'
        >['abi'],
        'upgradeToAndCall'
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        TMode,
        typeof uupsUpgradeableABI,
        'upgradeToAndCall'
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof uupsUpgradeableABI, 'upgradeToAndCall'>(
    {
      abi: uupsUpgradeableABI,
      functionName: 'upgradeToAndCall',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function usePrepareUupsUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareUupsUpgradeableUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareUupsUpgradeableUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof uupsUpgradeableABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof uupsUpgradeableABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useUupsUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useUupsUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useUupsUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useUupsUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link usingCryptoPunksGroupRegistryStructsABI}__.
 */
export function useUsingCryptoPunksGroupRegistryStructs(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({
    abi: usingCryptoPunksGroupRegistryStructsABI,
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingCryptoPunksGroupRegistryStructsABI}__.
 */
export function useUsingCryptoPunksGroupRegistryStructsEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<
      typeof usingCryptoPunksGroupRegistryStructsABI,
      TEventName
    >,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: usingCryptoPunksGroupRegistryStructsABI,
    ...config,
  } as UseContractEventConfig<
    typeof usingCryptoPunksGroupRegistryStructsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingCryptoPunksGroupRegistryStructsABI}__ and `eventName` set to `"Claimed"`.
 */
export function useUsingCryptoPunksGroupRegistryStructsClaimedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof usingCryptoPunksGroupRegistryStructsABI,
      'Claimed'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: usingCryptoPunksGroupRegistryStructsABI,
    eventName: 'Claimed',
    ...config,
  } as UseContractEventConfig<
    typeof usingCryptoPunksGroupRegistryStructsABI,
    'Claimed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingCryptoPunksGroupRegistryStructsABI}__ and `eventName` set to `"Contributed"`.
 */
export function useUsingCryptoPunksGroupRegistryStructsContributedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof usingCryptoPunksGroupRegistryStructsABI,
      'Contributed'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: usingCryptoPunksGroupRegistryStructsABI,
    eventName: 'Contributed',
    ...config,
  } as UseContractEventConfig<
    typeof usingCryptoPunksGroupRegistryStructsABI,
    'Contributed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingCryptoPunksGroupRegistryStructsABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useUsingCryptoPunksGroupRegistryStructsGroupCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof usingCryptoPunksGroupRegistryStructsABI,
      'GroupCreated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: usingCryptoPunksGroupRegistryStructsABI,
    eventName: 'GroupCreated',
    ...config,
  } as UseContractEventConfig<
    typeof usingCryptoPunksGroupRegistryStructsABI,
    'GroupCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingCryptoPunksGroupRegistryStructsABI}__ and `eventName` set to `"GroupWon"`.
 */
export function useUsingCryptoPunksGroupRegistryStructsGroupWonEvent(
  config: Omit<
    UseContractEventConfig<
      typeof usingCryptoPunksGroupRegistryStructsABI,
      'GroupWon'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: usingCryptoPunksGroupRegistryStructsABI,
    eventName: 'GroupWon',
    ...config,
  } as UseContractEventConfig<
    typeof usingCryptoPunksGroupRegistryStructsABI,
    'GroupWon'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link vmABI}__.
 */
export function useVm(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: vmABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__.
 */
export function useVmRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof vmABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: vmABI, ...config } as UseContractReadConfig<
    typeof vmABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"activeFork"`.
 */
export function useVmActiveFork<
  TSelectData = ReadContractResult<typeof vmABI, 'activeFork'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'activeFork', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'activeFork',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'activeFork', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"addr"`.
 */
export function useVmAddr<
  TSelectData = ReadContractResult<typeof vmABI, 'addr'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'addr', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'addr',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'addr', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"assume"`.
 */
export function useVmAssume<
  TSelectData = ReadContractResult<typeof vmABI, 'assume'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'assume', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'assume',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'assume', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deriveKey"`.
 */
export function useVmDeriveKey<
  TSelectData = ReadContractResult<typeof vmABI, 'deriveKey'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'deriveKey', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'deriveKey',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'deriveKey', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envAddress"`.
 */
export function useVmEnvAddress<
  TSelectData = ReadContractResult<typeof vmABI, 'envAddress'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'envAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'envAddress',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'envAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBool"`.
 */
export function useVmEnvBool<
  TSelectData = ReadContractResult<typeof vmABI, 'envBool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'envBool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'envBool',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'envBool', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBytes"`.
 */
export function useVmEnvBytes<
  TSelectData = ReadContractResult<typeof vmABI, 'envBytes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'envBytes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'envBytes',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'envBytes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBytes32"`.
 */
export function useVmEnvBytes32<
  TSelectData = ReadContractResult<typeof vmABI, 'envBytes32'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'envBytes32', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'envBytes32',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'envBytes32', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envInt"`.
 */
export function useVmEnvInt<
  TSelectData = ReadContractResult<typeof vmABI, 'envInt'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'envInt', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'envInt',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'envInt', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envString"`.
 */
export function useVmEnvString<
  TSelectData = ReadContractResult<typeof vmABI, 'envString'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'envString', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'envString',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'envString', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envUint"`.
 */
export function useVmEnvUint<
  TSelectData = ReadContractResult<typeof vmABI, 'envUint'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'envUint', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'envUint',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'envUint', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getCode"`.
 */
export function useVmGetCode<
  TSelectData = ReadContractResult<typeof vmABI, 'getCode'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'getCode', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'getCode',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'getCode', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getDeployedCode"`.
 */
export function useVmGetDeployedCode<
  TSelectData = ReadContractResult<typeof vmABI, 'getDeployedCode'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'getDeployedCode', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'getDeployedCode',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'getDeployedCode', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getNonce"`.
 */
export function useVmGetNonce<
  TSelectData = ReadContractResult<typeof vmABI, 'getNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'getNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'getNonce',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'getNonce', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"isPersistent"`.
 */
export function useVmIsPersistent<
  TSelectData = ReadContractResult<typeof vmABI, 'isPersistent'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'isPersistent', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'isPersistent',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'isPersistent', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"load"`.
 */
export function useVmLoad<
  TSelectData = ReadContractResult<typeof vmABI, 'load'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'load', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'load',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'load', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseAddress"`.
 */
export function useVmParseAddress<
  TSelectData = ReadContractResult<typeof vmABI, 'parseAddress'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'parseAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'parseAddress',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'parseAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBool"`.
 */
export function useVmParseBool<
  TSelectData = ReadContractResult<typeof vmABI, 'parseBool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'parseBool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'parseBool',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'parseBool', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBytes"`.
 */
export function useVmParseBytes<
  TSelectData = ReadContractResult<typeof vmABI, 'parseBytes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'parseBytes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'parseBytes',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'parseBytes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBytes32"`.
 */
export function useVmParseBytes32<
  TSelectData = ReadContractResult<typeof vmABI, 'parseBytes32'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'parseBytes32', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'parseBytes32',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'parseBytes32', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseInt"`.
 */
export function useVmParseInt<
  TSelectData = ReadContractResult<typeof vmABI, 'parseInt'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'parseInt', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'parseInt',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'parseInt', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJson"`.
 */
export function useVmParseJson<
  TSelectData = ReadContractResult<typeof vmABI, 'parseJson'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'parseJson', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'parseJson',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'parseJson', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseUint"`.
 */
export function useVmParseUint<
  TSelectData = ReadContractResult<typeof vmABI, 'parseUint'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'parseUint', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'parseUint',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'parseUint', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"projectRoot"`.
 */
export function useVmProjectRoot<
  TSelectData = ReadContractResult<typeof vmABI, 'projectRoot'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'projectRoot', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'projectRoot',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'projectRoot', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readFile"`.
 */
export function useVmReadFile<
  TSelectData = ReadContractResult<typeof vmABI, 'readFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'readFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'readFile',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'readFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readFileBinary"`.
 */
export function useVmReadFileBinary<
  TSelectData = ReadContractResult<typeof vmABI, 'readFileBinary'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'readFileBinary', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'readFileBinary',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'readFileBinary', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readLine"`.
 */
export function useVmReadLine<
  TSelectData = ReadContractResult<typeof vmABI, 'readLine'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'readLine', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'readLine',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'readLine', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rpcUrl"`.
 */
export function useVmRpcUrl<
  TSelectData = ReadContractResult<typeof vmABI, 'rpcUrl'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'rpcUrl', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'rpcUrl',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'rpcUrl', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rpcUrlStructs"`.
 */
export function useVmRpcUrlStructs<
  TSelectData = ReadContractResult<typeof vmABI, 'rpcUrlStructs'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'rpcUrlStructs', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'rpcUrlStructs',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'rpcUrlStructs', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rpcUrls"`.
 */
export function useVmRpcUrls<
  TSelectData = ReadContractResult<typeof vmABI, 'rpcUrls'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'rpcUrls', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'rpcUrls',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'rpcUrls', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"sign"`.
 */
export function useVmSign<
  TSelectData = ReadContractResult<typeof vmABI, 'sign'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'sign', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'sign',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'sign', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"toString"`.
 */
export function useVmToString<
  TSelectData = ReadContractResult<typeof vmABI, 'toString'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmABI, 'toString', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmABI,
    functionName: 'toString',
    ...config,
  } as UseContractReadConfig<typeof vmABI, 'toString', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__.
 */
export function useVmWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof vmABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, TFunctionName>({
    abi: vmABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"accesses"`.
 */
export function useVmAccesses<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'accesses'>['abi'],
        'accesses'
      > & { functionName?: 'accesses' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'accesses'> & {
        abi?: never
        functionName?: 'accesses'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'accesses'>({
    abi: vmABI,
    functionName: 'accesses',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"allowCheatcodes"`.
 */
export function useVmAllowCheatcodes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'allowCheatcodes'>['abi'],
        'allowCheatcodes'
      > & { functionName?: 'allowCheatcodes' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'allowCheatcodes'> & {
        abi?: never
        functionName?: 'allowCheatcodes'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'allowCheatcodes'>({
    abi: vmABI,
    functionName: 'allowCheatcodes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"broadcast"`.
 */
export function useVmBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'broadcast'>['abi'],
        'broadcast'
      > & { functionName?: 'broadcast' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'broadcast'> & {
        abi?: never
        functionName?: 'broadcast'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'broadcast'>({
    abi: vmABI,
    functionName: 'broadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"chainId"`.
 */
export function useVmChainId<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'chainId'>['abi'],
        'chainId'
      > & { functionName?: 'chainId' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'chainId'> & {
        abi?: never
        functionName?: 'chainId'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'chainId'>({
    abi: vmABI,
    functionName: 'chainId',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"clearMockedCalls"`.
 */
export function useVmClearMockedCalls<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'clearMockedCalls'>['abi'],
        'clearMockedCalls'
      > & { functionName?: 'clearMockedCalls' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'clearMockedCalls'> & {
        abi?: never
        functionName?: 'clearMockedCalls'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'clearMockedCalls'>({
    abi: vmABI,
    functionName: 'clearMockedCalls',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"closeFile"`.
 */
export function useVmCloseFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'closeFile'>['abi'],
        'closeFile'
      > & { functionName?: 'closeFile' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'closeFile'> & {
        abi?: never
        functionName?: 'closeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'closeFile'>({
    abi: vmABI,
    functionName: 'closeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"coinbase"`.
 */
export function useVmCoinbase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'coinbase'>['abi'],
        'coinbase'
      > & { functionName?: 'coinbase' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'coinbase'> & {
        abi?: never
        functionName?: 'coinbase'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'coinbase'>({
    abi: vmABI,
    functionName: 'coinbase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createFork"`.
 */
export function useVmCreateFork<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'createFork'>['abi'],
        'createFork'
      > & { functionName?: 'createFork' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'createFork'> & {
        abi?: never
        functionName?: 'createFork'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'createFork'>({
    abi: vmABI,
    functionName: 'createFork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createSelectFork"`.
 */
export function useVmCreateSelectFork<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'createSelectFork'>['abi'],
        'createSelectFork'
      > & { functionName?: 'createSelectFork' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'createSelectFork'> & {
        abi?: never
        functionName?: 'createSelectFork'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'createSelectFork'>({
    abi: vmABI,
    functionName: 'createSelectFork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deal"`.
 */
export function useVmDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'deal'>['abi'],
        'deal'
      > & { functionName?: 'deal' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'deal'> & {
        abi?: never
        functionName?: 'deal'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'deal'>({
    abi: vmABI,
    functionName: 'deal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"difficulty"`.
 */
export function useVmDifficulty<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'difficulty'>['abi'],
        'difficulty'
      > & { functionName?: 'difficulty' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'difficulty'> & {
        abi?: never
        functionName?: 'difficulty'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'difficulty'>({
    abi: vmABI,
    functionName: 'difficulty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"etch"`.
 */
export function useVmEtch<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'etch'>['abi'],
        'etch'
      > & { functionName?: 'etch' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'etch'> & {
        abi?: never
        functionName?: 'etch'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'etch'>({
    abi: vmABI,
    functionName: 'etch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectCall"`.
 */
export function useVmExpectCall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'expectCall'>['abi'],
        'expectCall'
      > & { functionName?: 'expectCall' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'expectCall'> & {
        abi?: never
        functionName?: 'expectCall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'expectCall'>({
    abi: vmABI,
    functionName: 'expectCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectEmit"`.
 */
export function useVmExpectEmit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'expectEmit'>['abi'],
        'expectEmit'
      > & { functionName?: 'expectEmit' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'expectEmit'> & {
        abi?: never
        functionName?: 'expectEmit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'expectEmit'>({
    abi: vmABI,
    functionName: 'expectEmit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectRevert"`.
 */
export function useVmExpectRevert<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'expectRevert'>['abi'],
        'expectRevert'
      > & { functionName?: 'expectRevert' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'expectRevert'> & {
        abi?: never
        functionName?: 'expectRevert'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'expectRevert'>({
    abi: vmABI,
    functionName: 'expectRevert',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"fee"`.
 */
export function useVmFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'fee'>['abi'],
        'fee'
      > & { functionName?: 'fee' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'fee'> & {
        abi?: never
        functionName?: 'fee'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'fee'>({
    abi: vmABI,
    functionName: 'fee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"ffi"`.
 */
export function useVmFfi<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'ffi'>['abi'],
        'ffi'
      > & { functionName?: 'ffi' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'ffi'> & {
        abi?: never
        functionName?: 'ffi'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'ffi'>({
    abi: vmABI,
    functionName: 'ffi',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function useVmGetRecordedLogs<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'getRecordedLogs'>['abi'],
        'getRecordedLogs'
      > & { functionName?: 'getRecordedLogs' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'getRecordedLogs'> & {
        abi?: never
        functionName?: 'getRecordedLogs'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'getRecordedLogs'>({
    abi: vmABI,
    functionName: 'getRecordedLogs',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"label"`.
 */
export function useVmLabel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'label'>['abi'],
        'label'
      > & { functionName?: 'label' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'label'> & {
        abi?: never
        functionName?: 'label'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'label'>({
    abi: vmABI,
    functionName: 'label',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"makePersistent"`.
 */
export function useVmMakePersistent<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'makePersistent'>['abi'],
        'makePersistent'
      > & { functionName?: 'makePersistent' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'makePersistent'> & {
        abi?: never
        functionName?: 'makePersistent'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'makePersistent'>({
    abi: vmABI,
    functionName: 'makePersistent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"mockCall"`.
 */
export function useVmMockCall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'mockCall'>['abi'],
        'mockCall'
      > & { functionName?: 'mockCall' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'mockCall'> & {
        abi?: never
        functionName?: 'mockCall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'mockCall'>({
    abi: vmABI,
    functionName: 'mockCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"prank"`.
 */
export function useVmPrank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'prank'>['abi'],
        'prank'
      > & { functionName?: 'prank' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'prank'> & {
        abi?: never
        functionName?: 'prank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'prank'>({
    abi: vmABI,
    functionName: 'prank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"record"`.
 */
export function useVmRecord<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'record'>['abi'],
        'record'
      > & { functionName?: 'record' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'record'> & {
        abi?: never
        functionName?: 'record'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'record'>({
    abi: vmABI,
    functionName: 'record',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"recordLogs"`.
 */
export function useVmRecordLogs<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'recordLogs'>['abi'],
        'recordLogs'
      > & { functionName?: 'recordLogs' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'recordLogs'> & {
        abi?: never
        functionName?: 'recordLogs'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'recordLogs'>({
    abi: vmABI,
    functionName: 'recordLogs',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rememberKey"`.
 */
export function useVmRememberKey<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'rememberKey'>['abi'],
        'rememberKey'
      > & { functionName?: 'rememberKey' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'rememberKey'> & {
        abi?: never
        functionName?: 'rememberKey'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'rememberKey'>({
    abi: vmABI,
    functionName: 'rememberKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"removeFile"`.
 */
export function useVmRemoveFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'removeFile'>['abi'],
        'removeFile'
      > & { functionName?: 'removeFile' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'removeFile'> & {
        abi?: never
        functionName?: 'removeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'removeFile'>({
    abi: vmABI,
    functionName: 'removeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revertTo"`.
 */
export function useVmRevertTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'revertTo'>['abi'],
        'revertTo'
      > & { functionName?: 'revertTo' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'revertTo'> & {
        abi?: never
        functionName?: 'revertTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'revertTo'>({
    abi: vmABI,
    functionName: 'revertTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revokePersistent"`.
 */
export function useVmRevokePersistent<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'revokePersistent'>['abi'],
        'revokePersistent'
      > & { functionName?: 'revokePersistent' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'revokePersistent'> & {
        abi?: never
        functionName?: 'revokePersistent'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'revokePersistent'>({
    abi: vmABI,
    functionName: 'revokePersistent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"roll"`.
 */
export function useVmRoll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'roll'>['abi'],
        'roll'
      > & { functionName?: 'roll' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'roll'> & {
        abi?: never
        functionName?: 'roll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'roll'>({
    abi: vmABI,
    functionName: 'roll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rollFork"`.
 */
export function useVmRollFork<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'rollFork'>['abi'],
        'rollFork'
      > & { functionName?: 'rollFork' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'rollFork'> & {
        abi?: never
        functionName?: 'rollFork'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'rollFork'>({
    abi: vmABI,
    functionName: 'rollFork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"selectFork"`.
 */
export function useVmSelectFork<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'selectFork'>['abi'],
        'selectFork'
      > & { functionName?: 'selectFork' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'selectFork'> & {
        abi?: never
        functionName?: 'selectFork'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'selectFork'>({
    abi: vmABI,
    functionName: 'selectFork',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function useVmSerializeAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'serializeAddress'>['abi'],
        'serializeAddress'
      > & { functionName?: 'serializeAddress' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'serializeAddress'> & {
        abi?: never
        functionName?: 'serializeAddress'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'serializeAddress'>({
    abi: vmABI,
    functionName: 'serializeAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBool"`.
 */
export function useVmSerializeBool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'serializeBool'>['abi'],
        'serializeBool'
      > & { functionName?: 'serializeBool' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'serializeBool'> & {
        abi?: never
        functionName?: 'serializeBool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'serializeBool'>({
    abi: vmABI,
    functionName: 'serializeBool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function useVmSerializeBytes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'serializeBytes'>['abi'],
        'serializeBytes'
      > & { functionName?: 'serializeBytes' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'serializeBytes'> & {
        abi?: never
        functionName?: 'serializeBytes'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'serializeBytes'>({
    abi: vmABI,
    functionName: 'serializeBytes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function useVmSerializeBytes32<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'serializeBytes32'>['abi'],
        'serializeBytes32'
      > & { functionName?: 'serializeBytes32' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'serializeBytes32'> & {
        abi?: never
        functionName?: 'serializeBytes32'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'serializeBytes32'>({
    abi: vmABI,
    functionName: 'serializeBytes32',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeInt"`.
 */
export function useVmSerializeInt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'serializeInt'>['abi'],
        'serializeInt'
      > & { functionName?: 'serializeInt' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'serializeInt'> & {
        abi?: never
        functionName?: 'serializeInt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'serializeInt'>({
    abi: vmABI,
    functionName: 'serializeInt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeString"`.
 */
export function useVmSerializeString<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'serializeString'>['abi'],
        'serializeString'
      > & { functionName?: 'serializeString' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'serializeString'> & {
        abi?: never
        functionName?: 'serializeString'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'serializeString'>({
    abi: vmABI,
    functionName: 'serializeString',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeUint"`.
 */
export function useVmSerializeUint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'serializeUint'>['abi'],
        'serializeUint'
      > & { functionName?: 'serializeUint' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'serializeUint'> & {
        abi?: never
        functionName?: 'serializeUint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'serializeUint'>({
    abi: vmABI,
    functionName: 'serializeUint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setEnv"`.
 */
export function useVmSetEnv<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'setEnv'>['abi'],
        'setEnv'
      > & { functionName?: 'setEnv' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'setEnv'> & {
        abi?: never
        functionName?: 'setEnv'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'setEnv'>({
    abi: vmABI,
    functionName: 'setEnv',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setNonce"`.
 */
export function useVmSetNonce<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'setNonce'>['abi'],
        'setNonce'
      > & { functionName?: 'setNonce' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'setNonce'> & {
        abi?: never
        functionName?: 'setNonce'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'setNonce'>({
    abi: vmABI,
    functionName: 'setNonce',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"snapshot"`.
 */
export function useVmSnapshot<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'snapshot'>['abi'],
        'snapshot'
      > & { functionName?: 'snapshot' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'snapshot'> & {
        abi?: never
        functionName?: 'snapshot'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'snapshot'>({
    abi: vmABI,
    functionName: 'snapshot',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function useVmStartBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'startBroadcast'>['abi'],
        'startBroadcast'
      > & { functionName?: 'startBroadcast' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'startBroadcast'> & {
        abi?: never
        functionName?: 'startBroadcast'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'startBroadcast'>({
    abi: vmABI,
    functionName: 'startBroadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startPrank"`.
 */
export function useVmStartPrank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'startPrank'>['abi'],
        'startPrank'
      > & { functionName?: 'startPrank' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'startPrank'> & {
        abi?: never
        functionName?: 'startPrank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'startPrank'>({
    abi: vmABI,
    functionName: 'startPrank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function useVmStopBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'stopBroadcast'>['abi'],
        'stopBroadcast'
      > & { functionName?: 'stopBroadcast' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'stopBroadcast'> & {
        abi?: never
        functionName?: 'stopBroadcast'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'stopBroadcast'>({
    abi: vmABI,
    functionName: 'stopBroadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopPrank"`.
 */
export function useVmStopPrank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'stopPrank'>['abi'],
        'stopPrank'
      > & { functionName?: 'stopPrank' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'stopPrank'> & {
        abi?: never
        functionName?: 'stopPrank'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'stopPrank'>({
    abi: vmABI,
    functionName: 'stopPrank',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"store"`.
 */
export function useVmStore<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'store'>['abi'],
        'store'
      > & { functionName?: 'store' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'store'> & {
        abi?: never
        functionName?: 'store'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'store'>({
    abi: vmABI,
    functionName: 'store',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"transact"`.
 */
export function useVmTransact<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'transact'>['abi'],
        'transact'
      > & { functionName?: 'transact' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'transact'> & {
        abi?: never
        functionName?: 'transact'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'transact'>({
    abi: vmABI,
    functionName: 'transact',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"warp"`.
 */
export function useVmWarp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'warp'>['abi'],
        'warp'
      > & { functionName?: 'warp' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'warp'> & {
        abi?: never
        functionName?: 'warp'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'warp'>({
    abi: vmABI,
    functionName: 'warp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFile"`.
 */
export function useVmWriteFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'writeFile'>['abi'],
        'writeFile'
      > & { functionName?: 'writeFile' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'writeFile'> & {
        abi?: never
        functionName?: 'writeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'writeFile'>({
    abi: vmABI,
    functionName: 'writeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function useVmWriteFileBinary<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'writeFileBinary'>['abi'],
        'writeFileBinary'
      > & { functionName?: 'writeFileBinary' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'writeFileBinary'> & {
        abi?: never
        functionName?: 'writeFileBinary'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'writeFileBinary'>({
    abi: vmABI,
    functionName: 'writeFileBinary',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeJson"`.
 */
export function useVmWriteJson<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'writeJson'>['abi'],
        'writeJson'
      > & { functionName?: 'writeJson' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'writeJson'> & {
        abi?: never
        functionName?: 'writeJson'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'writeJson'>({
    abi: vmABI,
    functionName: 'writeJson',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeLine"`.
 */
export function useVmWriteLine<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'writeLine'>['abi'],
        'writeLine'
      > & { functionName?: 'writeLine' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'writeLine'> & {
        abi?: never
        functionName?: 'writeLine'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'writeLine'>({
    abi: vmABI,
    functionName: 'writeLine',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__.
 */
export function usePrepareVmWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"accesses"`.
 */
export function usePrepareVmAccesses(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'accesses'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'accesses',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'accesses'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"allowCheatcodes"`.
 */
export function usePrepareVmAllowCheatcodes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'allowCheatcodes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'allowCheatcodes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'allowCheatcodes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"broadcast"`.
 */
export function usePrepareVmBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'broadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'broadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'broadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"chainId"`.
 */
export function usePrepareVmChainId(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'chainId'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'chainId',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'chainId'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"clearMockedCalls"`.
 */
export function usePrepareVmClearMockedCalls(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'clearMockedCalls'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'clearMockedCalls',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'clearMockedCalls'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"closeFile"`.
 */
export function usePrepareVmCloseFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'closeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'closeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'closeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"coinbase"`.
 */
export function usePrepareVmCoinbase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'coinbase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'coinbase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'coinbase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createFork"`.
 */
export function usePrepareVmCreateFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'createFork'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'createFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'createFork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createSelectFork"`.
 */
export function usePrepareVmCreateSelectFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'createSelectFork'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'createSelectFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'createSelectFork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deal"`.
 */
export function usePrepareVmDeal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'deal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'deal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'deal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"difficulty"`.
 */
export function usePrepareVmDifficulty(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'difficulty'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'difficulty',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'difficulty'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"etch"`.
 */
export function usePrepareVmEtch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'etch'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'etch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'etch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectCall"`.
 */
export function usePrepareVmExpectCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'expectCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'expectCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectEmit"`.
 */
export function usePrepareVmExpectEmit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'expectEmit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectEmit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'expectEmit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectRevert"`.
 */
export function usePrepareVmExpectRevert(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'expectRevert'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectRevert',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'expectRevert'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"fee"`.
 */
export function usePrepareVmFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'fee'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'fee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'fee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"ffi"`.
 */
export function usePrepareVmFfi(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'ffi'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'ffi',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'ffi'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function usePrepareVmGetRecordedLogs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'getRecordedLogs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'getRecordedLogs',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'getRecordedLogs'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"label"`.
 */
export function usePrepareVmLabel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'label'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'label',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'label'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"makePersistent"`.
 */
export function usePrepareVmMakePersistent(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'makePersistent'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'makePersistent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'makePersistent'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"mockCall"`.
 */
export function usePrepareVmMockCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'mockCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'mockCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'mockCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"prank"`.
 */
export function usePrepareVmPrank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'prank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'prank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'prank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"record"`.
 */
export function usePrepareVmRecord(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'record'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'record',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'record'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"recordLogs"`.
 */
export function usePrepareVmRecordLogs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'recordLogs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'recordLogs',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'recordLogs'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rememberKey"`.
 */
export function usePrepareVmRememberKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'rememberKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'rememberKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'rememberKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"removeFile"`.
 */
export function usePrepareVmRemoveFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'removeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'removeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'removeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revertTo"`.
 */
export function usePrepareVmRevertTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'revertTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'revertTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'revertTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revokePersistent"`.
 */
export function usePrepareVmRevokePersistent(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'revokePersistent'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'revokePersistent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'revokePersistent'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"roll"`.
 */
export function usePrepareVmRoll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'roll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'roll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'roll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rollFork"`.
 */
export function usePrepareVmRollFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'rollFork'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'rollFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'rollFork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"selectFork"`.
 */
export function usePrepareVmSelectFork(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'selectFork'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'selectFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'selectFork'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function usePrepareVmSerializeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'serializeAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBool"`.
 */
export function usePrepareVmSerializeBool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'serializeBool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeBool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeBool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function usePrepareVmSerializeBytes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'serializeBytes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeBytes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeBytes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function usePrepareVmSerializeBytes32(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'serializeBytes32'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeBytes32',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeBytes32'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeInt"`.
 */
export function usePrepareVmSerializeInt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'serializeInt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeInt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeInt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeString"`.
 */
export function usePrepareVmSerializeString(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'serializeString'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeString',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeString'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeUint"`.
 */
export function usePrepareVmSerializeUint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'serializeUint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeUint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeUint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setEnv"`.
 */
export function usePrepareVmSetEnv(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'setEnv'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'setEnv',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'setEnv'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setNonce"`.
 */
export function usePrepareVmSetNonce(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'setNonce'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'setNonce',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'setNonce'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"snapshot"`.
 */
export function usePrepareVmSnapshot(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'snapshot'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'snapshot',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'snapshot'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function usePrepareVmStartBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'startBroadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'startBroadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'startBroadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startPrank"`.
 */
export function usePrepareVmStartPrank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'startPrank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'startPrank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'startPrank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function usePrepareVmStopBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'stopBroadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'stopBroadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'stopBroadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopPrank"`.
 */
export function usePrepareVmStopPrank(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'stopPrank'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'stopPrank',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'stopPrank'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"store"`.
 */
export function usePrepareVmStore(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'store'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'store',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'store'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"transact"`.
 */
export function usePrepareVmTransact(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'transact'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'transact',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'transact'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"warp"`.
 */
export function usePrepareVmWarp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'warp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'warp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'warp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFile"`.
 */
export function usePrepareVmWriteFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'writeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'writeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function usePrepareVmWriteFileBinary(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'writeFileBinary'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeFileBinary',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'writeFileBinary'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeJson"`.
 */
export function usePrepareVmWriteJson(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'writeJson'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeJson',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'writeJson'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeLine"`.
 */
export function usePrepareVmWriteLine(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'writeLine'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeLine',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'writeLine'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link vmSafeABI}__.
 */
export function useVmSafe(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: vmSafeABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__.
 */
export function useVmSafeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof vmSafeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"addr"`.
 */
export function useVmSafeAddr<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'addr'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'addr', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'addr',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'addr', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"assume"`.
 */
export function useVmSafeAssume<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'assume'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'assume', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'assume',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'assume', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"deriveKey"`.
 */
export function useVmSafeDeriveKey<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'deriveKey'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'deriveKey', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'deriveKey',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'deriveKey', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envAddress"`.
 */
export function useVmSafeEnvAddress<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'envAddress'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'envAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'envAddress',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'envAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envBool"`.
 */
export function useVmSafeEnvBool<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'envBool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'envBool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'envBool',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'envBool', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envBytes"`.
 */
export function useVmSafeEnvBytes<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'envBytes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'envBytes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'envBytes',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'envBytes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envBytes32"`.
 */
export function useVmSafeEnvBytes32<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'envBytes32'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'envBytes32', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'envBytes32',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'envBytes32', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envInt"`.
 */
export function useVmSafeEnvInt<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'envInt'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'envInt', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'envInt',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'envInt', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envString"`.
 */
export function useVmSafeEnvString<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'envString'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'envString', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'envString',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'envString', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envUint"`.
 */
export function useVmSafeEnvUint<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'envUint'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'envUint', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'envUint',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'envUint', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getCode"`.
 */
export function useVmSafeGetCode<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'getCode'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'getCode', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'getCode',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'getCode', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getDeployedCode"`.
 */
export function useVmSafeGetDeployedCode<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'getDeployedCode'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'getDeployedCode', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'getDeployedCode',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'getDeployedCode', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getNonce"`.
 */
export function useVmSafeGetNonce<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'getNonce'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'getNonce', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'getNonce',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'getNonce', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"load"`.
 */
export function useVmSafeLoad<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'load'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'load', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'load',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'load', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseAddress"`.
 */
export function useVmSafeParseAddress<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'parseAddress'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'parseAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'parseAddress',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'parseAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseBool"`.
 */
export function useVmSafeParseBool<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'parseBool'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'parseBool', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'parseBool',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'parseBool', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseBytes"`.
 */
export function useVmSafeParseBytes<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'parseBytes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'parseBytes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'parseBytes',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'parseBytes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseBytes32"`.
 */
export function useVmSafeParseBytes32<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'parseBytes32'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'parseBytes32', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'parseBytes32',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'parseBytes32', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseInt"`.
 */
export function useVmSafeParseInt<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'parseInt'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'parseInt', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'parseInt',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'parseInt', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJson"`.
 */
export function useVmSafeParseJson<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'parseJson'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'parseJson', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'parseJson',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'parseJson', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseUint"`.
 */
export function useVmSafeParseUint<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'parseUint'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'parseUint', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'parseUint',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'parseUint', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"projectRoot"`.
 */
export function useVmSafeProjectRoot<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'projectRoot'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'projectRoot', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'projectRoot',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'projectRoot', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"readFile"`.
 */
export function useVmSafeReadFile<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'readFile'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'readFile', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'readFile',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'readFile', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"readFileBinary"`.
 */
export function useVmSafeReadFileBinary<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'readFileBinary'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'readFileBinary', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'readFileBinary',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'readFileBinary', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"readLine"`.
 */
export function useVmSafeReadLine<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'readLine'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'readLine', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'readLine',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'readLine', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rpcUrl"`.
 */
export function useVmSafeRpcUrl<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'rpcUrl'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'rpcUrl', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'rpcUrl',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'rpcUrl', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rpcUrlStructs"`.
 */
export function useVmSafeRpcUrlStructs<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'rpcUrlStructs'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'rpcUrlStructs', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'rpcUrlStructs',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'rpcUrlStructs', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rpcUrls"`.
 */
export function useVmSafeRpcUrls<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'rpcUrls'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'rpcUrls', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'rpcUrls',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'rpcUrls', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"sign"`.
 */
export function useVmSafeSign<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'sign'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'sign', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'sign',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'sign', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"toString"`.
 */
export function useVmSafeToString<
  TSelectData = ReadContractResult<typeof vmSafeABI, 'toString'>,
>(
  config: Omit<
    UseContractReadConfig<typeof vmSafeABI, 'toString', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: vmSafeABI,
    functionName: 'toString',
    ...config,
  } as UseContractReadConfig<typeof vmSafeABI, 'toString', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__.
 */
export function useVmSafeWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof vmSafeABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, TFunctionName>({
    abi: vmSafeABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"accesses"`.
 */
export function useVmSafeAccesses<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'accesses'>['abi'],
        'accesses'
      > & { functionName?: 'accesses' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'accesses'> & {
        abi?: never
        functionName?: 'accesses'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'accesses'>({
    abi: vmSafeABI,
    functionName: 'accesses',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"broadcast"`.
 */
export function useVmSafeBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'broadcast'>['abi'],
        'broadcast'
      > & { functionName?: 'broadcast' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'broadcast'> & {
        abi?: never
        functionName?: 'broadcast'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'broadcast'>({
    abi: vmSafeABI,
    functionName: 'broadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"closeFile"`.
 */
export function useVmSafeCloseFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'closeFile'>['abi'],
        'closeFile'
      > & { functionName?: 'closeFile' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'closeFile'> & {
        abi?: never
        functionName?: 'closeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'closeFile'>({
    abi: vmSafeABI,
    functionName: 'closeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"ffi"`.
 */
export function useVmSafeFfi<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'ffi'>['abi'],
        'ffi'
      > & { functionName?: 'ffi' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'ffi'> & {
        abi?: never
        functionName?: 'ffi'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'ffi'>({
    abi: vmSafeABI,
    functionName: 'ffi',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function useVmSafeGetRecordedLogs<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'getRecordedLogs'>['abi'],
        'getRecordedLogs'
      > & { functionName?: 'getRecordedLogs' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'getRecordedLogs'> & {
        abi?: never
        functionName?: 'getRecordedLogs'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'getRecordedLogs'>({
    abi: vmSafeABI,
    functionName: 'getRecordedLogs',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"label"`.
 */
export function useVmSafeLabel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'label'>['abi'],
        'label'
      > & { functionName?: 'label' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'label'> & {
        abi?: never
        functionName?: 'label'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'label'>({
    abi: vmSafeABI,
    functionName: 'label',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"record"`.
 */
export function useVmSafeRecord<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'record'>['abi'],
        'record'
      > & { functionName?: 'record' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'record'> & {
        abi?: never
        functionName?: 'record'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'record'>({
    abi: vmSafeABI,
    functionName: 'record',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"recordLogs"`.
 */
export function useVmSafeRecordLogs<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'recordLogs'>['abi'],
        'recordLogs'
      > & { functionName?: 'recordLogs' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'recordLogs'> & {
        abi?: never
        functionName?: 'recordLogs'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'recordLogs'>({
    abi: vmSafeABI,
    functionName: 'recordLogs',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rememberKey"`.
 */
export function useVmSafeRememberKey<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'rememberKey'>['abi'],
        'rememberKey'
      > & { functionName?: 'rememberKey' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'rememberKey'> & {
        abi?: never
        functionName?: 'rememberKey'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'rememberKey'>({
    abi: vmSafeABI,
    functionName: 'rememberKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"removeFile"`.
 */
export function useVmSafeRemoveFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'removeFile'>['abi'],
        'removeFile'
      > & { functionName?: 'removeFile' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'removeFile'> & {
        abi?: never
        functionName?: 'removeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'removeFile'>({
    abi: vmSafeABI,
    functionName: 'removeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function useVmSafeSerializeAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'serializeAddress'>['abi'],
        'serializeAddress'
      > & { functionName?: 'serializeAddress' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'serializeAddress'> & {
        abi?: never
        functionName?: 'serializeAddress'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'serializeAddress'>({
    abi: vmSafeABI,
    functionName: 'serializeAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBool"`.
 */
export function useVmSafeSerializeBool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'serializeBool'>['abi'],
        'serializeBool'
      > & { functionName?: 'serializeBool' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'serializeBool'> & {
        abi?: never
        functionName?: 'serializeBool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'serializeBool'>({
    abi: vmSafeABI,
    functionName: 'serializeBool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function useVmSafeSerializeBytes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'serializeBytes'>['abi'],
        'serializeBytes'
      > & { functionName?: 'serializeBytes' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'serializeBytes'> & {
        abi?: never
        functionName?: 'serializeBytes'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'serializeBytes'>({
    abi: vmSafeABI,
    functionName: 'serializeBytes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function useVmSafeSerializeBytes32<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'serializeBytes32'>['abi'],
        'serializeBytes32'
      > & { functionName?: 'serializeBytes32' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'serializeBytes32'> & {
        abi?: never
        functionName?: 'serializeBytes32'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'serializeBytes32'>({
    abi: vmSafeABI,
    functionName: 'serializeBytes32',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeInt"`.
 */
export function useVmSafeSerializeInt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'serializeInt'>['abi'],
        'serializeInt'
      > & { functionName?: 'serializeInt' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'serializeInt'> & {
        abi?: never
        functionName?: 'serializeInt'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'serializeInt'>({
    abi: vmSafeABI,
    functionName: 'serializeInt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeString"`.
 */
export function useVmSafeSerializeString<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'serializeString'>['abi'],
        'serializeString'
      > & { functionName?: 'serializeString' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'serializeString'> & {
        abi?: never
        functionName?: 'serializeString'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'serializeString'>({
    abi: vmSafeABI,
    functionName: 'serializeString',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeUint"`.
 */
export function useVmSafeSerializeUint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'serializeUint'>['abi'],
        'serializeUint'
      > & { functionName?: 'serializeUint' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'serializeUint'> & {
        abi?: never
        functionName?: 'serializeUint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'serializeUint'>({
    abi: vmSafeABI,
    functionName: 'serializeUint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"setEnv"`.
 */
export function useVmSafeSetEnv<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'setEnv'>['abi'],
        'setEnv'
      > & { functionName?: 'setEnv' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'setEnv'> & {
        abi?: never
        functionName?: 'setEnv'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'setEnv'>({
    abi: vmSafeABI,
    functionName: 'setEnv',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function useVmSafeStartBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'startBroadcast'>['abi'],
        'startBroadcast'
      > & { functionName?: 'startBroadcast' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'startBroadcast'> & {
        abi?: never
        functionName?: 'startBroadcast'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'startBroadcast'>({
    abi: vmSafeABI,
    functionName: 'startBroadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function useVmSafeStopBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'stopBroadcast'>['abi'],
        'stopBroadcast'
      > & { functionName?: 'stopBroadcast' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'stopBroadcast'> & {
        abi?: never
        functionName?: 'stopBroadcast'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'stopBroadcast'>({
    abi: vmSafeABI,
    functionName: 'stopBroadcast',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFile"`.
 */
export function useVmSafeWriteFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'writeFile'>['abi'],
        'writeFile'
      > & { functionName?: 'writeFile' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'writeFile'> & {
        abi?: never
        functionName?: 'writeFile'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'writeFile'>({
    abi: vmSafeABI,
    functionName: 'writeFile',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function useVmSafeWriteFileBinary<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'writeFileBinary'>['abi'],
        'writeFileBinary'
      > & { functionName?: 'writeFileBinary' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'writeFileBinary'> & {
        abi?: never
        functionName?: 'writeFileBinary'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'writeFileBinary'>({
    abi: vmSafeABI,
    functionName: 'writeFileBinary',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeJson"`.
 */
export function useVmSafeWriteJson<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'writeJson'>['abi'],
        'writeJson'
      > & { functionName?: 'writeJson' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'writeJson'> & {
        abi?: never
        functionName?: 'writeJson'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'writeJson'>({
    abi: vmSafeABI,
    functionName: 'writeJson',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeLine"`.
 */
export function useVmSafeWriteLine<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'writeLine'>['abi'],
        'writeLine'
      > & { functionName?: 'writeLine' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'writeLine'> & {
        abi?: never
        functionName?: 'writeLine'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'writeLine'>({
    abi: vmSafeABI,
    functionName: 'writeLine',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__.
 */
export function usePrepareVmSafeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"accesses"`.
 */
export function usePrepareVmSafeAccesses(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'accesses'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'accesses',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'accesses'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"broadcast"`.
 */
export function usePrepareVmSafeBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'broadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'broadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'broadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"closeFile"`.
 */
export function usePrepareVmSafeCloseFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'closeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'closeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'closeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"ffi"`.
 */
export function usePrepareVmSafeFfi(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'ffi'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'ffi',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'ffi'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function usePrepareVmSafeGetRecordedLogs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'getRecordedLogs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'getRecordedLogs',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'getRecordedLogs'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"label"`.
 */
export function usePrepareVmSafeLabel(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'label'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'label',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'label'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"record"`.
 */
export function usePrepareVmSafeRecord(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'record'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'record',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'record'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"recordLogs"`.
 */
export function usePrepareVmSafeRecordLogs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'recordLogs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'recordLogs',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'recordLogs'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rememberKey"`.
 */
export function usePrepareVmSafeRememberKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'rememberKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'rememberKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'rememberKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"removeFile"`.
 */
export function usePrepareVmSafeRemoveFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'removeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'removeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'removeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function usePrepareVmSafeSerializeAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBool"`.
 */
export function usePrepareVmSafeSerializeBool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function usePrepareVmSafeSerializeBytes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBytes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBytes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBytes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function usePrepareVmSafeSerializeBytes32(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBytes32'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBytes32',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBytes32'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeInt"`.
 */
export function usePrepareVmSafeSerializeInt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeInt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeInt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeInt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeString"`.
 */
export function usePrepareVmSafeSerializeString(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeString'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeString',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeString'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeUint"`.
 */
export function usePrepareVmSafeSerializeUint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeUint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeUint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeUint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"setEnv"`.
 */
export function usePrepareVmSafeSetEnv(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'setEnv'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'setEnv',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'setEnv'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function usePrepareVmSafeStartBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'startBroadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'startBroadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'startBroadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function usePrepareVmSafeStopBroadcast(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'stopBroadcast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'stopBroadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'stopBroadcast'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFile"`.
 */
export function usePrepareVmSafeWriteFile(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeFile'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeFile'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function usePrepareVmSafeWriteFileBinary(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeFileBinary'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeFileBinary',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeFileBinary'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeJson"`.
 */
export function usePrepareVmSafeWriteJson(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeJson'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeJson',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeJson'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeLine"`.
 */
export function usePrepareVmSafeWriteLine(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeLine'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeLine',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeLine'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link usingCryptoPunksMosaicRegistryStructsABI}__.
 */
export function useUsingCryptoPunksMosaicRegistryStructs(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({
    abi: usingCryptoPunksMosaicRegistryStructsABI,
    ...config,
  })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingCryptoPunksMosaicRegistryStructsABI}__.
 */
export function useUsingCryptoPunksMosaicRegistryStructsEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<
      typeof usingCryptoPunksMosaicRegistryStructsABI,
      TEventName
    >,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: usingCryptoPunksMosaicRegistryStructsABI,
    ...config,
  } as UseContractEventConfig<
    typeof usingCryptoPunksMosaicRegistryStructsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingCryptoPunksMosaicRegistryStructsABI}__ and `eventName` set to `"BidAccepted"`.
 */
export function useUsingCryptoPunksMosaicRegistryStructsBidAcceptedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof usingCryptoPunksMosaicRegistryStructsABI,
      'BidAccepted'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: usingCryptoPunksMosaicRegistryStructsABI,
    eventName: 'BidAccepted',
    ...config,
  } as UseContractEventConfig<
    typeof usingCryptoPunksMosaicRegistryStructsABI,
    'BidAccepted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingCryptoPunksMosaicRegistryStructsABI}__ and `eventName` set to `"BidProposed"`.
 */
export function useUsingCryptoPunksMosaicRegistryStructsBidProposedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof usingCryptoPunksMosaicRegistryStructsABI,
      'BidProposed'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: usingCryptoPunksMosaicRegistryStructsABI,
    eventName: 'BidProposed',
    ...config,
  } as UseContractEventConfig<
    typeof usingCryptoPunksMosaicRegistryStructsABI,
    'BidProposed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingCryptoPunksMosaicRegistryStructsABI}__ and `eventName` set to `"BidRefunded"`.
 */
export function useUsingCryptoPunksMosaicRegistryStructsBidRefundedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof usingCryptoPunksMosaicRegistryStructsABI,
      'BidRefunded'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: usingCryptoPunksMosaicRegistryStructsABI,
    eventName: 'BidRefunded',
    ...config,
  } as UseContractEventConfig<
    typeof usingCryptoPunksMosaicRegistryStructsABI,
    'BidRefunded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingCryptoPunksMosaicRegistryStructsABI}__ and `eventName` set to `"BidRejected"`.
 */
export function useUsingCryptoPunksMosaicRegistryStructsBidRejectedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof usingCryptoPunksMosaicRegistryStructsABI,
      'BidRejected'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: usingCryptoPunksMosaicRegistryStructsABI,
    eventName: 'BidRejected',
    ...config,
  } as UseContractEventConfig<
    typeof usingCryptoPunksMosaicRegistryStructsABI,
    'BidRejected'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingCryptoPunksMosaicRegistryStructsABI}__ and `eventName` set to `"BidWon"`.
 */
export function useUsingCryptoPunksMosaicRegistryStructsBidWonEvent(
  config: Omit<
    UseContractEventConfig<
      typeof usingCryptoPunksMosaicRegistryStructsABI,
      'BidWon'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: usingCryptoPunksMosaicRegistryStructsABI,
    eventName: 'BidWon',
    ...config,
  } as UseContractEventConfig<
    typeof usingCryptoPunksMosaicRegistryStructsABI,
    'BidWon'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingCryptoPunksMosaicRegistryStructsABI}__ and `eventName` set to `"MonoRefunded"`.
 */
export function useUsingCryptoPunksMosaicRegistryStructsMonoRefundedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof usingCryptoPunksMosaicRegistryStructsABI,
      'MonoRefunded'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: usingCryptoPunksMosaicRegistryStructsABI,
    eventName: 'MonoRefunded',
    ...config,
  } as UseContractEventConfig<
    typeof usingCryptoPunksMosaicRegistryStructsABI,
    'MonoRefunded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingCryptoPunksMosaicRegistryStructsABI}__ and `eventName` set to `"OriginalSold"`.
 */
export function useUsingCryptoPunksMosaicRegistryStructsOriginalSoldEvent(
  config: Omit<
    UseContractEventConfig<
      typeof usingCryptoPunksMosaicRegistryStructsABI,
      'OriginalSold'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: usingCryptoPunksMosaicRegistryStructsABI,
    eventName: 'OriginalSold',
    ...config,
  } as UseContractEventConfig<
    typeof usingCryptoPunksMosaicRegistryStructsABI,
    'OriginalSold'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1822ProxiableABI}__.
 */
export function useIerc1822Proxiable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1822ProxiableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableABI}__.
 */
export function useIerc1822ProxiableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1822ProxiableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableProxiableUuid<
  TSelectData = ReadContractResult<
    typeof ierc1822ProxiableABI,
    'proxiableUUID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableABI,
      'proxiableUUID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableABI,
    'proxiableUUID',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__.
 */
export function useIerc1822ProxiableUpgradeable(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc1822ProxiableUpgradeableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__.
 */
export function useIerc1822ProxiableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableUpgradeableProxiableUuid<
  TSelectData = ReadContractResult<
    typeof ierc1822ProxiableUpgradeableABI,
    'proxiableUUID'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableUpgradeableABI,
      'proxiableUUID',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    'proxiableUUID',
    TSelectData
  >)
}
