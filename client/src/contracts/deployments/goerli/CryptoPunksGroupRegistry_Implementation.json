{
  "address": "0x2D0436EBd911BEa5C63EbF7e5237A5bFC1482c32",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "mosaicId",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "ticketQuantity",
          "type": "uint96"
        }
      ],
      "name": "Contributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetMaxPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "totalTicketSupply",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitTicketPrice",
          "type": "uint256"
        }
      ],
      "name": "GroupCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "GroupWon",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CURATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_RESERVE_PRICE_BPS",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_RESERVE_PRICE_BPS",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TICKET_SUPPLY_PER_GROUP",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "purchasePrice",
          "type": "uint256"
        }
      ],
      "name": "calculateMaxReservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxReservePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "purchasePrice",
          "type": "uint256"
        }
      ],
      "name": "calculateMinReservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minReservePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "mosaicIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        },
        {
          "internalType": "uint64",
          "name": "ticketQuantity",
          "type": "uint64"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetPunkId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetMaxPrice",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "getGroup",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint192",
              "name": "id",
              "type": "uint192"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "targetPunkId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetMaxPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "totalTicketSupply",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "unitTicketPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalContribution",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "ticketsBought",
              "type": "uint64"
            },
            {
              "internalType": "uint40",
              "name": "expiresAt",
              "type": "uint40"
            },
            {
              "internalType": "enum UsingCryptoPunksGroupRegistryStructs.GroupStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "purchasePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint192",
              "name": "originalId",
              "type": "uint192"
            },
            {
              "internalType": "string",
              "name": "metadataUri",
              "type": "string"
            }
          ],
          "internalType": "struct UsingCryptoPunksGroupRegistryStructs.Group",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "getGroupLifeCycle",
      "outputs": [
        {
          "internalType": "enum UsingCryptoPunksGroupRegistryStructs.GroupLifeCycle",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "getGroupTotalContribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalContribution",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestGroupId",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "latestGroupId",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inquired",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "getTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inquired",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "hasContribution",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "museumAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inquired",
          "type": "address"
        },
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "isCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "museum",
      "outputs": [
        {
          "internalType": "contract CryptoPunksMuseum",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "groupId",
          "type": "uint192"
        }
      ],
      "name": "refundExpired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "groupId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b59bee8bcabc3a0727fda5c04e03580a8a5c0a97ec1b52430200103dc8c8cc1",
  "receipt": {
    "to": null,
    "from": "0x9675e17451FEB900280FC84D2eE44D114f629C96",
    "contractAddress": "0x2D0436EBd911BEa5C63EbF7e5237A5bFC1482c32",
    "transactionIndex": 27,
    "gasUsed": "4297085",
    "logsBloom": "0x
    "blockHash": "0x2d830d5351bbb1f48f9b1b266a82ef4ccfc9c96d3d8b12fb1c3988bf6810d971",
    "transactionHash": "0x3b59bee8bcabc3a0727fda5c04e03580a8a5c0a97ec1b52430200103dc8c8cc1",
    "logs": [],
    "blockNumber": 8640486,
    "cumulativeGasUsed": "12996023",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "620a61277144b73a5b957629f2244a3d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"mosaicId\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"ticketQuantity\",\"type\":\"uint96\"}],\"name\":\"Contributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetMaxPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"totalTicketSupply\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitTicketPrice\",\"type\":\"uint256\"}],\"name\":\"GroupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"GroupWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CURATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RESERVE_PRICE_BPS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RESERVE_PRICE_BPS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TICKET_SUPPLY_PER_GROUP\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"}],\"name\":\"calculateMaxReservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxReservePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"}],\"name\":\"calculateMinReservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minReservePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"mosaicIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"ticketQuantity\",\"type\":\"uint64\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetPunkId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetMaxPrice\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"getGroup\",\"outputs\":[{\"components\":[{\"internalType\":\"uint192\",\"name\":\"id\",\"type\":\"uint192\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetPunkId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetMaxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"totalTicketSupply\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"unitTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"ticketsBought\",\"type\":\"uint64\"},{\"internalType\":\"uint40\",\"name\":\"expiresAt\",\"type\":\"uint40\"},{\"internalType\":\"enum UsingCryptoPunksGroupRegistryStructs.GroupStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint192\",\"name\":\"originalId\",\"type\":\"uint192\"},{\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"}],\"internalType\":\"struct UsingCryptoPunksGroupRegistryStructs.Group\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"getGroupLifeCycle\",\"outputs\":[{\"internalType\":\"enum UsingCryptoPunksGroupRegistryStructs.GroupLifeCycle\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"getGroupTotalContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalContribution\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestGroupId\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"latestGroupId\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inquired\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"getTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inquired\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"hasContribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"museumAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inquired\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"isCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museum\",\"outputs\":[{\"internalType\":\"contract CryptoPunksMuseum\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"groupId\",\"type\":\"uint192\"}],\"name\":\"refundExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"buy(uint192)\":{\"details\":\"Can be tried as long as the group is OPEN\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"CURATOR_ROLE\":{\"details\":\"can create and curate the active group\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MIN_RESERVE_PRICE_BPS()\":{\"notice\":\"Arithmetic constants\"},\"TICKET_SUPPLY_PER_GROUP()\":{\"notice\":\"Business logic constants\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CryptoPunksGroupRegistry.sol\":\"CryptoPunksGroupRegistry\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363738363030373430363238\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x6633586ad4631f286525429122307d8a3943e4dd7a1feaa9a22a153f390f11a3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x5d3b8d9c4e7d247ee6e9b1fe63d09f3a92dc187db2e695b9962ad95212a09bb0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x055fe4c1e942d42899298a11a5501ed8757b5247d914f500d902fd308f4a169f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd8ee8c6932ff4e8c803593fd447340f9f7292211c2f6af9dab1249598634c3d4\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5d2b99dff39b05ded4c8eb1298a983dd098cd3ca26869ead974178bd3372d760\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xca982b5b4cc95017d6b54af0e559252861a5b66113850d305e3fb06fa79137b6\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7e0c8b0f35041210bc2bb695c2271894f54f93cacf9180ba368d85d9e3b7499c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8c3779e8eb813ea61cc427ef6331ce26480fd3b3e50cd09693a5684c544f8a20\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6d6948edfc140a50d8124eb3f921aa630f70fcde4c9e340aa2e126de18dc642\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xef702737c98b0296899e4439c17c4a1c96b8dcef7e176805275e782612fce9c7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05d5d914a129f8a74b1cae41b212965882aed82683efc0888665c4b26cd60e54\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"src/CryptoPunksGroupRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Strings} from \\\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {ERC1155Upgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"./lib/BasisPoint.sol\\\";\\nimport \\\"./external/ICryptoPunksMarket.sol\\\";\\nimport \\\"./ICryptoPunksGroupRegistry.sol\\\";\\nimport \\\"./CryptoPunksMuseum.sol\\\";\\nimport \\\"./CryptoPunksGroupStorage.sol\\\";\\n\\n// TODO: Migrate custom revert error messages to byte constants\\ncontract CryptoPunksGroupRegistry is\\n    ICryptoPunksGroupRegistry,\\n    ERC1155Upgradeable,\\n    UUPSUpgradeable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /**\\n     * Arithmetic constants\\n     */\\n    uint64 public constant MIN_RESERVE_PRICE_BPS = 7000; // 70%\\n    uint64 public constant MAX_RESERVE_PRICE_BPS = 50000; // 500%\\n\\n    /**\\n     * Business logic constants\\n     */\\n    uint64 public constant TICKET_SUPPLY_PER_GROUP = 100;\\n    /**\\n     * @dev can create and curate the active group\\n     */\\n    bytes32 public constant CURATOR_ROLE = keccak256(\\\"CURATOR_ROLE\\\");\\n\\n    CryptoPunksMuseum public museum;\\n\\n    function initialize(address museumAddress) public initializer {\\n        __ERC1155_init(\\\"CryptoPunksGroup Ticket\\\");\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(CURATOR_ROLE, msg.sender);\\n        museum = CryptoPunksMuseum(museumAddress);\\n    }\\n\\n    modifier onlyWhenActive() {\\n        require(\\n            address(museum) != address(0) && museum.isActive(),\\n            \\\"Museum must be active\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyValidGroup(uint192 groupId) {\\n        require(\\n            groupId <= CryptoPunksGroupStorage.get().latestGroupId,\\n            \\\"Invalid groupId\\\"\\n        );\\n        _;\\n    }\\n\\n    function create(\\n        uint256 targetPunkId,\\n        uint256 targetMaxPrice\\n    ) external onlyRole(CURATOR_ROLE) onlyWhenActive returns (uint192 groupId) {\\n        require(\\n            getGroupLifeCycle(CryptoPunksGroupStorage.get().latestGroupId) !=\\n                GroupLifeCycle.Active,\\n            \\\"Ongoing group exists\\\"\\n        );\\n\\n        ++CryptoPunksGroupStorage.get().latestGroupId;\\n        uint64 totalTicketSupply = TICKET_SUPPLY_PER_GROUP;\\n        uint256 unitTicketPrice = targetMaxPrice / totalTicketSupply;\\n        uint192 groupId = CryptoPunksGroupStorage.get().latestGroupId;\\n\\n        Group storage newGroup = CryptoPunksGroupStorage.get().groups[groupId];\\n        newGroup.id = CryptoPunksGroupStorage.get().latestGroupId;\\n        newGroup.creator = msg.sender;\\n        newGroup.targetPunkId = targetPunkId;\\n        newGroup.targetMaxPrice = targetMaxPrice;\\n        newGroup.totalTicketSupply = totalTicketSupply;\\n        newGroup.unitTicketPrice = unitTicketPrice;\\n        newGroup.status = GroupStatus.Open;\\n        // TODO: Make it configurable\\n        newGroup.expiresAt = uint40(block.timestamp + 604800);\\n\\n        emit GroupCreated(\\n            groupId,\\n            msg.sender,\\n            targetMaxPrice,\\n            totalTicketSupply,\\n            unitTicketPrice\\n        );\\n        return groupId;\\n    }\\n\\n    function contribute(\\n        uint192 groupId,\\n        uint64 ticketQuantity\\n    ) external payable onlyValidGroup(groupId) onlyWhenActive {\\n        Group storage group = CryptoPunksGroupStorage.get().groups[groupId];\\n\\n        uint256 ticketsLeft = group.totalTicketSupply - group.ticketsBought;\\n        require(\\n            ticketQuantity <= ticketsLeft,\\n            \\\"Fewer tickets remaining than requested\\\"\\n        );\\n\\n        uint256 ethReceived = msg.value;\\n        uint256 ethRequired = group.unitTicketPrice * ticketQuantity;\\n        require(ethReceived == ethRequired, \\\"Contribution must be exact\\\");\\n\\n        address contributor = msg.sender;\\n        group.totalContribution += ethReceived;\\n        group.ticketsBought += ticketQuantity;\\n        CryptoPunksGroupStorage.get().refundableTickets[groupId][\\n            contributor\\n        ] += ticketQuantity;\\n\\n        _mint(contributor, groupId, ticketQuantity, \\\"\\\");\\n\\n        emit Contributed(contributor, groupId, ticketQuantity);\\n    }\\n\\n    /**\\n     * @dev Can be tried as long as the group is OPEN\\n     */\\n    function buy(\\n        uint192 groupId\\n    )\\n        external\\n        nonReentrant\\n        onlyRole(CURATOR_ROLE)\\n        onlyValidGroup(groupId)\\n        onlyWhenActive\\n    {\\n        // Internal prerequisites\\n        require(\\n            address(museum.mosaicRegistry()) != address(0x0),\\n            \\\"Exhibit registry must be set\\\"\\n        );\\n\\n        // Stakeholder and group status prerequisites\\n        Group storage group = CryptoPunksGroupStorage.get().groups[groupId];\\n        uint256 punkId = group.targetPunkId;\\n        (, , , uint256 offeredPrice, ) = museum\\n            .cryptoPunksMarket()\\n            .punksOfferedForSale(punkId);\\n        require(group.ticketsBought == TICKET_SUPPLY_PER_GROUP, \\\"Not sold out\\\");\\n        require(\\n            group.totalContribution >= offeredPrice,\\n            \\\"Offered price is greater than the current contribution\\\"\\n        );\\n\\n        // Purchase\\n        museum.cryptoPunksMarket().buyPunk{value: offeredPrice}(punkId);\\n        require(\\n            museum.cryptoPunksMarket().punkIndexToAddress(punkId) ==\\n                address(this),\\n            \\\"Unexpected ownership\\\"\\n        );\\n\\n        // TODO: Double-check the possibility of reentrancy attacks when the same punk ID is used again later\\n        museum.cryptoPunksMarket().transferPunk(\\n            address(museum.mosaicRegistry()),\\n            group.targetPunkId\\n        );\\n\\n        group.purchasePrice = offeredPrice;\\n        group.originalId = museum.mosaicRegistry().create(\\n            group.targetPunkId,\\n            group.ticketsBought,\\n            group.purchasePrice,\\n            calculateMinReservePrice(group.purchasePrice),\\n            calculateMaxReservePrice(group.purchasePrice)\\n        );\\n        group.status = GroupStatus.Claimable;\\n\\n        emit GroupWon(groupId);\\n    }\\n\\n    // @dev Batch claim-refund as many Mosaic Monos as tickets held\\n    function claim(\\n        uint192 groupId\\n    )\\n        external\\n        nonReentrant\\n        onlyValidGroup(groupId)\\n        onlyWhenActive\\n        returns (uint256[] memory mosaicIds)\\n    {\\n        Group storage group = CryptoPunksGroupStorage.get().groups[groupId];\\n        require(\\n            group.status == GroupStatus.Claimable,\\n            \\\"The group is not finalized\\\"\\n        );\\n        uint256 ticketsHeld = getTickets(msg.sender, groupId);\\n        require(ticketsHeld > 0, \\\"Only ticket holders can claim tokens\\\");\\n        _burn(msg.sender, groupId, ticketsHeld);\\n\\n        // Refund\\n        uint256 owed = getRefundPerTicket(group) * ticketsHeld;\\n        // TODO: Define a library for ETH sending with gas considerations\\n        (bool sent, ) = msg.sender.call{value: owed}(\\\"\\\");\\n        require(sent, \\\"Failed to refund\\\");\\n\\n        // Mint\\n        uint256[] memory mosaicIds = new uint256[](ticketsHeld);\\n        for (uint256 i = 0; i < ticketsHeld; i++) {\\n            uint256 mosaicId = museum.mosaicRegistry().mint(\\n                msg.sender,\\n                group.originalId\\n            );\\n            mosaicIds[i] = mosaicId;\\n            emit Claimed(msg.sender, groupId, mosaicId);\\n        }\\n\\n        return mosaicIds;\\n    }\\n\\n    // @dev only for lost/expired groups to invoke explicitly\\n    function refundExpired(\\n        uint192 groupId\\n    ) external nonReentrant onlyValidGroup(groupId) onlyWhenActive {\\n        address payable contributor = payable(msg.sender);\\n        Group storage group = CryptoPunksGroupStorage.get().groups[groupId];\\n        require(\\n            getGroupLifeCycle(groupId) == GroupLifeCycle.Lost,\\n            \\\"The group must be expired\\\"\\n        );\\n        uint256 ticketsHeld = getTickets(msg.sender, groupId);\\n        require(ticketsHeld > 0, \\\"Only ticket holders can get refunds\\\");\\n\\n        _burn(msg.sender, groupId, ticketsHeld);\\n\\n        uint256 owed = getRefundPerTicket(group) * ticketsHeld;\\n        (bool sent, ) = contributor.call{value: owed}(\\\"\\\");\\n        require(sent, \\\"Failed to refund\\\");\\n    }\\n\\n    function getRefundPerTicket(\\n        Group storage group\\n    ) private view returns (uint256 refundPerTicket) {\\n        uint256 surplus = group.totalContribution - group.purchasePrice;\\n\\n        if (surplus <= 0) {\\n            return 0;\\n        }\\n        return surplus / group.ticketsBought;\\n    }\\n\\n    //\\n    // Registry-related views\\n    //\\n\\n    function uri(uint256 groupId) public view override returns (string memory) {\\n        Group storage group = CryptoPunksGroupStorage.get().groups[\\n            uint192(groupId)\\n        ];\\n        return group.metadataUri;\\n    }\\n\\n    //\\n    // Group-related views\\n    //\\n\\n    function getLatestGroupId() public view returns (uint192 latestGroupId) {\\n        return CryptoPunksGroupStorage.get().latestGroupId;\\n    }\\n\\n    function getGroup(\\n        uint192 groupId\\n    ) public view onlyValidGroup(groupId) returns (Group memory) {\\n        return CryptoPunksGroupStorage.get().groups[groupId];\\n    }\\n\\n    function getGroupLifeCycle(\\n        uint192 groupId\\n    ) public view onlyValidGroup(groupId) returns (GroupLifeCycle) {\\n        Group storage group = CryptoPunksGroupStorage.get().groups[groupId];\\n        if (group.status == GroupStatus.Claimable) {\\n            return GroupLifeCycle.Won;\\n        }\\n        if (group.status == GroupStatus.Open) {\\n            if (group.expiresAt >= block.timestamp) {\\n                return GroupLifeCycle.Active;\\n            }\\n            return GroupLifeCycle.Lost;\\n        }\\n        return GroupLifeCycle.Nonexistent;\\n    }\\n\\n    function getGroupTotalContribution(\\n        uint192 groupId\\n    ) public view onlyValidGroup(groupId) returns (uint256 totalContribution) {\\n        return CryptoPunksGroupStorage.get().groups[groupId].totalContribution;\\n    }\\n\\n    //\\n    // Ticket\\n    //\\n\\n    function getTickets(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (uint256) {\\n        return balanceOf(inquired, uint256(groupId));\\n    }\\n\\n    function isCreator(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (bool) {\\n        return\\n            CryptoPunksGroupStorage.get().groups[groupId].creator == inquired;\\n    }\\n\\n    function hasContribution(\\n        address inquired,\\n        uint192 groupId\\n    ) public view returns (bool) {\\n        return getTickets(inquired, groupId) > 0;\\n    }\\n\\n    //\\n    // Constitution\\n    //\\n\\n    function calculateMinReservePrice(\\n        uint256 purchasePrice\\n    ) public pure returns (uint256 minReservePrice) {\\n        return\\n            BasisPoint.calculateBasisPoint(\\n                purchasePrice,\\n                MIN_RESERVE_PRICE_BPS\\n            );\\n    }\\n\\n    function calculateMaxReservePrice(\\n        uint256 purchasePrice\\n    ) public pure returns (uint256 maxReservePrice) {\\n        return\\n            BasisPoint.calculateBasisPoint(\\n                purchasePrice,\\n                MAX_RESERVE_PRICE_BPS\\n            );\\n    }\\n\\n    //\\n    // Admin\\n    //\\n\\n    function airdrop(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _mintBatch(to, ids, amounts, \\\"\\\");\\n    }\\n\\n    //\\n    // Internals\\n    //\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(ERC1155Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            ERC1155Upgradeable.supportsInterface(interfaceId) ||\\n            AccessControlUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    function _authorizeUpgrade(\\n        address\\n    ) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    // TODO: fallback\\n}\\n\",\"keccak256\":\"0xaae00a50ff7eadfd45a3eabd0dd110c6bccf6baf52fa64e095d869c944ab939a\",\"license\":\"MIT\"},\"src/CryptoPunksGroupStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ICryptoPunksGroupRegistry.sol\\\";\\n\\nlibrary CryptoPunksGroupStorage {\\n    bytes32 constant POSITION = keccak256(\\\"CryptoPunksGroupStorage\\\");\\n\\n    struct Storage {\\n        /**\\n         * @dev Starts from 1.\\n         *  Must increment this first when creating a new group.\\n         */\\n        uint192 latestGroupId;\\n        mapping(uint192 => UsingCryptoPunksGroupRegistryStructs.Group) groups;\\n        /**\\n         * @dev groupId -> address -> shares (= the number of tickets bought)\\n         */\\n        mapping(uint192 => mapping(address => uint256)) refundableTickets;\\n    }\\n\\n    function get() internal pure returns (Storage storage data) {\\n        bytes32 position = POSITION;\\n        assembly {\\n            data.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xec2ec24e7ed68efee615d6749f73118e74170d2916f2860baf635796934b6ae5\",\"license\":\"MIT\"},\"src/CryptoPunksMuseum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {AccessControl} from \\\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\\\";\\nimport \\\"./ICryptoPunksGroupRegistry.sol\\\";\\nimport \\\"./ICryptoPunksMosaicRegistry.sol\\\";\\nimport \\\"./external/ICryptoPunksMarket.sol\\\";\\n\\n// TODO: Adopt Eternal Storage in the next phase\\ncontract CryptoPunksMuseum is AccessControl {\\n    ICryptoPunksMarket public immutable cryptoPunksMarket;\\n    ICryptoPunksGroupRegistry public groupRegistry;\\n    ICryptoPunksMosaicRegistry public mosaicRegistry;\\n    // @dev true if and only if the Museum's configuration is done and all the registries are ready\\n    bool public isActive;\\n\\n    constructor(address cryptoPunksMarketAddress) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        cryptoPunksMarket = ICryptoPunksMarket(cryptoPunksMarketAddress);\\n    }\\n\\n    function setGroupRegistry(\\n        address addr\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        groupRegistry = ICryptoPunksGroupRegistry(addr);\\n    }\\n\\n    function setMosaicRegistry(\\n        address addr\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mosaicRegistry = ICryptoPunksMosaicRegistry(addr);\\n    }\\n\\n    function activate() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            address(groupRegistry) != address(0x0) &&\\n                address(mosaicRegistry) != address(0x0)\\n        );\\n        mosaicRegistry.grantMintAuthority(address(groupRegistry));\\n        isActive = true;\\n    }\\n\\n    function deactivate() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        isActive = false;\\n    }\\n}\\n\",\"keccak256\":\"0x1707a8f8939fe962914f8485225f2505f05206ed7fb3efd9d65504b9b7693f15\",\"license\":\"MIT\"},\"src/ICryptoPunksGroupRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./UsingCryptoPunksGroupRegistryStructs.sol\\\";\\n\\ninterface ICryptoPunksGroupRegistry is UsingCryptoPunksGroupRegistryStructs {\\n    function create(\\n        uint256 targetPunkId,\\n        uint256 targetMaxPrice\\n    ) external returns (uint192 groupId);\\n\\n    function contribute(\\n        uint192 groupId,\\n        uint64 ticketQuantity\\n    ) external payable;\\n\\n    function buy(uint192 groupId) external;\\n\\n    function claim(\\n        uint192 groupId\\n    ) external returns (uint256[] memory mosaicIds);\\n\\n    function refundExpired(uint192 groupId) external;\\n}\\n\",\"keccak256\":\"0xcb62cc243851dcd4a6c164596eb537efbfbf12441260d86e9371e44f2e70a648\",\"license\":\"MIT\"},\"src/ICryptoPunksMosaicRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./UsingCryptoPunksMosaicRegistryStructs.sol\\\";\\n\\ninterface ICryptoPunksMosaicRegistry is UsingCryptoPunksMosaicRegistryStructs {\\n    // TODO: fill it out\\n    function create(\\n        uint256 punkId,\\n        uint64 totalClaimableCount,\\n        uint256 purchasePrice,\\n        uint256 minReservePrice,\\n        uint256 maxReservePrice\\n    ) external returns (uint192 originalId);\\n\\n    function mint(\\n        address contributor,\\n        uint192 originalId\\n    ) external returns (uint256 mosaicId);\\n\\n    function bid(\\n        uint192 originalId,\\n        uint256 price\\n    ) external payable returns (uint256 newBidId);\\n\\n    function grantMintAuthority(address addr) external;\\n}\\n\",\"keccak256\":\"0x47fe147d7633cfc178a4c87774456d238eb99814f80d9a59563a71f4606b36ef\",\"license\":\"MIT\"},\"src/UsingCryptoPunksGroupRegistryStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface UsingCryptoPunksGroupRegistryStructs {\\n    enum GroupStatus {\\n        Invalid,\\n        Open,\\n        Claimable\\n    }\\n\\n    enum GroupLifeCycle {\\n        // the group does not exist\\n        Nonexistent,\\n        // the group is open and funding is ongoing\\n        Active,\\n        // the group has not procured the target original within the expiry\\n        Lost,\\n        // the group has successfully purchased and acquired the target original\\n        Won\\n    }\\n\\n    struct Group {\\n        uint192 id;\\n        address creator;\\n        uint256 targetPunkId;\\n        uint256 targetMaxPrice;\\n        // @dev Must be a divisor (10, 100, etc.)\\n        uint64 totalTicketSupply;\\n        uint256 unitTicketPrice;\\n        uint256 totalContribution;\\n        uint64 ticketsBought;\\n        uint40 expiresAt; // inclusive, in seconds, as in block.timestamp\\n        GroupStatus status;\\n        uint256 purchasePrice; // price at which the target is bought\\n        uint192 originalId;\\n        string metadataUri;\\n    }\\n\\n    event GroupCreated(\\n        uint192 indexed groupId,\\n        address indexed creator,\\n        uint256 targetMaxPrice,\\n        uint64 totalTicketSupply,\\n        uint256 unitTicketPrice\\n    );\\n\\n    event GroupWon(uint192 indexed groupId);\\n\\n    event Contributed(\\n        address indexed contributor,\\n        uint192 indexed groupId,\\n        uint96 indexed ticketQuantity\\n    );\\n\\n    event Claimed(\\n        address indexed claimer,\\n        uint192 indexed groupId,\\n        uint256 indexed mosaicId\\n    );\\n}\\n\",\"keccak256\":\"0xb274bf80e30a970efe4a1ddc78d7b4b72a497090c40a39dad02947602bf5cada\",\"license\":\"MIT\"},\"src/UsingCryptoPunksMosaicRegistryStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface UsingCryptoPunksMosaicRegistryStructs {\\n    struct Original {\\n        uint192 id;\\n        // @dev punkIndex\\n        uint256 punkId;\\n        /**\\n         * @dev To calculate governance quorum and token circulation.\\n         *      Corresponds to total ticket circulation per group.\\n         */\\n        uint96 totalMonoSupply;\\n        uint96 claimedMonoCount;\\n        uint256 purchasePrice;\\n        uint256 minReservePrice;\\n        uint256 maxReservePrice;\\n        string metadataBaseUri;\\n        OriginalStatus status;\\n        uint256 activeBidId;\\n    }\\n\\n    enum OriginalStatus {\\n        Active,\\n        Sold\\n    }\\n\\n    event OriginalSold(uint192 indexed originalId, uint256 indexed bidId);\\n\\n    struct Mono {\\n        uint256 mosaicId;\\n        uint8 presetId;\\n        MonoGovernanceOptions governanceOptions;\\n    }\\n\\n    enum MonoLifeCycle {\\n        // @dev pre-design, just minted\\n        Raw,\\n        // @dev post-design, valid\\n        Active,\\n        // @dev belonging to invalid/reconstituted Original\\n        Dead\\n    }\\n\\n    struct MonoGovernanceOptions {\\n        uint256 proposedReservePrice;\\n        MonoBidResponse bidResponse;\\n        // @dev Bid ID\\n        uint256 bidId;\\n    }\\n\\n    enum MonoBidResponse {\\n        None,\\n        Yes,\\n        No\\n    }\\n\\n    event MonoRefunded(uint192 indexed originalId, address indexed monoOwner);\\n\\n    // @dev There can be at most one ongoing bid per original\\n    struct Bid {\\n        // @dev keccak256(abi.encodePacked(originalId, bidder, uint40(block.timestamp))\\n        uint256 id;\\n        address payable bidder;\\n        uint192 originalId;\\n        uint256 price;\\n        // block.timestamp\\n        uint40 createdAt;\\n        // duration in block.timestamp, in seconds\\n        uint40 expiry;\\n        // @dev updated upon any following Bid's creation or explicit external state updates\\n        BidState state;\\n    }\\n\\n    enum BidState {\\n        // Initial state, awaiting the result until the bidder explicitly reconstitutes the original or admits failure\\n        Proposed,\\n        // Resulting states upon vote results\\n        Accepted,\\n        Rejected,\\n        // Final/terminal states after bidder's action\\n        Won,\\n        Refunded\\n    }\\n\\n    event BidProposed(uint256 indexed bidId, uint192 indexed originalId);\\n\\n    event BidAccepted(uint256 indexed bidId, uint192 indexed originalId);\\n\\n    event BidRejected(uint256 indexed bidId, uint192 indexed originalId);\\n\\n    event BidWon(uint256 indexed bidId, uint192 indexed originalId);\\n\\n    event BidRefunded(uint256 indexed bidId, uint192 indexed originalId);\\n}\\n\",\"keccak256\":\"0xe806c931597b9102303eb77f38e84af2427c8b65651447a4795c1138808ad823\",\"license\":\"MIT\"},\"src/external/ICryptoPunksMarket.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6. SEE SOURCE BELOW. !!\\npragma solidity ^0.8.4;\\n\\ninterface ICryptoPunksMarket {\\n    function name() external view returns (string memory);\\n\\n    function punksOfferedForSale(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (\\n            bool isForSale,\\n            uint256 punkIndex,\\n            address seller,\\n            uint256 minValue,\\n            address onlySellTo\\n        );\\n\\n    function enterBidForPunk(uint256 punkIndex) external payable;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function acceptBidForPunk(uint256 punkIndex, uint256 minPrice) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function setInitialOwners(\\n        address[] memory addresses,\\n        uint256[] memory indices\\n    ) external;\\n\\n    function withdraw() external;\\n\\n    function imageHash() external view returns (string memory);\\n\\n    function nextPunkIndexToAssign() external view returns (uint256);\\n\\n    function punkIndexToAddress(uint256) external view returns (address);\\n\\n    function standard() external view returns (string memory);\\n\\n    function punkBids(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (bool hasBid, uint256 punkIndex, address bidder, uint256 value);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function allInitialOwnersAssigned() external;\\n\\n    function allPunksAssigned() external view returns (bool);\\n\\n    function buyPunk(uint256 punkIndex) external payable;\\n\\n    function transferPunk(address to, uint256 punkIndex) external;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function withdrawBidForPunk(uint256 punkIndex) external;\\n\\n    function setInitialOwner(address to, uint256 punkIndex) external;\\n\\n    function offerPunkForSaleToAddress(\\n        uint256 punkIndex,\\n        uint256 minSalePriceInWei,\\n        address toAddress\\n    ) external;\\n\\n    function punksRemainingToAssign() external view returns (uint256);\\n\\n    function offerPunkForSale(\\n        uint256 punkIndex,\\n        uint256 minSalePriceInWei\\n    ) external;\\n\\n    function getPunk(uint256 punkIndex) external;\\n\\n    function pendingWithdrawals(address) external view returns (uint256);\\n\\n    function punkNoLongerForSale(uint256 punkIndex) external;\\n\\n    event Assign(address indexed to, uint256 punkIndex);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event PunkTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 punkIndex\\n    );\\n    event PunkOffered(\\n        uint256 indexed punkIndex,\\n        uint256 minValue,\\n        address indexed toAddress\\n    );\\n    event PunkBidEntered(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBidWithdrawn(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress\\n    );\\n    event PunkBought(\\n        uint256 indexed punkIndex,\\n        uint256 value,\\n        address indexed fromAddress,\\n        address indexed toAddress\\n    );\\n    event PunkNoLongerForSale(uint256 indexed punkIndex);\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[],\\\"name\\\":\\\"name\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punksOfferedForSale\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"isForSale\\\",\\\"type\\\":\\\"bool\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"seller\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"minValue\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"onlySellTo\\\",\\\"type\\\":\\\"address\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"enterBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalSupply\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minPrice\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"acceptBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"decimals\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"addresses\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"name\\\":\\\"indices\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"setInitialOwners\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"withdraw\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"imageHash\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"nextPunkIndexToAssign\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkIndexToAddress\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"standard\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkBids\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"hasBid\\\",\\\"type\\\":\\\"bool\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"bidder\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"allInitialOwnersAssigned\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"allPunksAssigned\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"buyPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"transferPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"symbol\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"withdrawBidForPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setInitialOwner\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minSalePriceInWei\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"offerPunkForSaleToAddress\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"punksRemainingToAssign\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"minSalePriceInWei\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"offerPunkForSale\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getPunk\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"pendingWithdrawals\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"view\\\"},{\\\"inputs\\\":[{\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"punkNoLongerForSale\\\",\\\"outputs\\\":[],\\\"type\\\":\\\"function\\\",\\\"stateMutability\\\":\\\"nonpayable\\\"},{\\\"inputs\\\":[],\\\"type\\\":\\\"constructor\\\",\\\"stateMutability\\\":\\\"payable\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Assign\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Transfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PunkTransfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"minValue\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkOffered\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBidEntered\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBidWithdrawn\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"fromAddress\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"name\\\":\\\"toAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"PunkBought\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"name\\\":\\\"punkIndex\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PunkNoLongerForSale\\\",\\\"type\\\":\\\"event\\\"}]\\n*/\\n\",\"keccak256\":\"0xcc8da30186c7ad45201c8960c2c97eeba37b16ead893bb2f701107c5c0c4fecf\",\"license\":\"UNLICENSED\"},\"src/lib/BasisPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary BasisPoint {\\n    // 10,000 basis points (bps) = 100%\\n    uint256 public constant WHOLE_BPS = 10_000;\\n\\n    function calculateBasisPoint(\\n        uint256 amount,\\n        uint256 basisPoints\\n    ) internal pure returns (uint256) {\\n        // Minimal precision\\n        require((amount * basisPoints) >= WHOLE_BPS);\\n        return (amount * basisPoints) / WHOLE_BPS;\\n    }\\n}\\n\",\"keccak256\":\"0x602c5e8bfbfc40649a3852e835280fca555c44598970f5aa9c39d91f2c5543a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051614cc861004c60003960008181611214015281816112540152818161142e0152818161146e01526114fd0152614cc86000f3fe6080604052600436106102245760003560e01c806353b92d0911610123578063b4ce873b116100ab578063d547741f1161006f578063d547741f146106b0578063ddcef2b6146106d0578063e985e9c5146106e3578063f242432a1461072c578063f77e17591461074c57600080fd5b8063b4ce873b14610603578063bafb0ebc14610623578063bdd99cdf14610643578063c02a209e14610663578063c4d66de81461069057600080fd5b80639bad761f116100f25780639bad761f146105825780639f7b457914610598578063a217fddf146105b8578063a22cb465146105cd578063aaad804b146105ed57600080fd5b806353b92d091461050257806357ab7f8d1461052257806391d1485414610542578063962fc1aa1461056257600080fd5b80632f2ff15d116101b157806345e67a8c1161017557806345e67a8c1461045f5780634a2cfb54146104985780634e1273f4146104ba5780634f1ef286146104da57806352d1902d146104ed57600080fd5b80632f2ff15d146103b25780632fae02ce146103d257806336568abe146103ff5780633659cfe61461041f57806344b955711461043f57600080fd5b806319cd758f116101f857806319cd758f146102db5780632368a9541461030857806323b8b46d14610335578063248a9ca3146103625780632eb2c2d61461039257600080fd5b8062fdd58e1461022957806301ffc9a71461025c5780630ac457391461028c5780630e89341c146102ae575b600080fd5b34801561023557600080fd5b50610249610244366004613c22565b61076c565b6040519081526020015b60405180910390f35b34801561026857600080fd5b5061027c610277366004613c64565b610807565b6040519015158152602001610253565b34801561029857600080fd5b506102ac6102a7366004613c96565b610821565b005b3480156102ba57600080fd5b506102ce6102c9366004613cb3565b610adb565b6040516102539190613d1c565b3480156102e757600080fd5b506102fb6102f6366004613c96565b610ba4565b6040516102539190613d45565b34801561031457600080fd5b50610328610323366004613c96565b610c96565b6040516102539190613d9a565b34801561034157600080fd5b5061034a606481565b6040516001600160401b039091168152602001610253565b34801561036e57600080fd5b5061024961037d366004613cb3565b600090815260fb602052604090206001015490565b34801561039e57600080fd5b506102ac6103ad366004613ef6565b6110fd565b3480156103be57600080fd5b506102ac6103cd366004613fa3565b611149565b3480156103de57600080fd5b506103e7611173565b6040516001600160c01b039091168152602001610253565b34801561040b57600080fd5b506102ac61041a366004613fa3565b61118c565b34801561042b57600080fd5b506102ac61043a366004613fd3565b61120a565b34801561044b57600080fd5b5061027c61045a366004613ff0565b6112e6565b34801561046b57600080fd5b5061015f54610480906001600160a01b031681565b6040516001600160a01b039091168152602001610253565b3480156104a457600080fd5b50610249600080516020614c2c83398151915281565b3480156104c657600080fd5b506103286104d536600461401e565b6112fb565b6102ac6104e83660046140ea565b611424565b3480156104f957600080fd5b506102496114f0565b34801561050e57600080fd5b5061027c61051d366004613ff0565b6115a4565b34801561052e57600080fd5b506102ac61053d36600461412f565b6115e7565b34801561054e57600080fd5b5061027c61055d366004613fa3565b611613565b34801561056e57600080fd5b5061024961057d366004613cb3565b61163e565b34801561058e57600080fd5b5061034a611b5881565b3480156105a457600080fd5b506103e76105b33660046141a4565b61164c565b3480156105c457600080fd5b50610249600081565b3480156105d957600080fd5b506102ac6105e83660046141d4565b611933565b3480156105f957600080fd5b5061034a61c35081565b34801561060f57600080fd5b5061024961061e366004613ff0565b61193e565b34801561062f57600080fd5b5061024961063e366004613cb3565b61195a565b34801561064f57600080fd5b5061024961065e366004613c96565b611968565b34801561066f57600080fd5b5061068361067e366004613c96565b6119ce565b6040516102539190614216565b34801561069c57600080fd5b506102ac6106ab366004613fd3565b611c0c565b3480156106bc57600080fd5b506102ac6106cb366004613fa3565b611d92565b6102ac6106de366004614325565b611db7565b3480156106ef57600080fd5b5061027c6106fe36600461435f565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b34801561073857600080fd5b506102ac61074736600461438d565b6120fe565b34801561075857600080fd5b506102ac610767366004613c96565b612143565b60006001600160a01b0383166107dc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b6000610812826129fd565b80610801575061080182612a4d565b610829612a72565b80610832612acd565b546001600160c01b03908116908216111561085f5760405162461bcd60e51b81526004016107d3906143f5565b61015f546001600160a01b0316158015906108ed575061015f60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed919061441e565b6109095760405162461bcd60e51b81526004016107d39061443b565b336000610914612acd565b6001600160c01b0385166000908152600191909101602052604090209050600261093d85610ba4565b600381111561094e5761094e613d2f565b1461099b5760405162461bcd60e51b815260206004820152601960248201527f5468652067726f7570206d75737420626520657870697265640000000000000060448201526064016107d3565b60006109a7338661193e565b905060008111610a055760405162461bcd60e51b815260206004820152602360248201527f4f6e6c79207469636b657420686f6c646572732063616e2067657420726566756044820152626e647360e81b60648201526084016107d3565b610a1933866001600160c01b031683612af1565b600081610a2584612c75565b610a2f9190614480565b90506000846001600160a01b03168260405160006040518083038185875af1925050503d8060008114610a7e576040519150601f19603f3d011682016040523d82523d6000602084013e610a83565b606091505b5050905080610ac75760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b60448201526064016107d3565b505050505050610ad8600161012d55565b50565b60606000610ae7612acd565b6001016000846001600160c01b03166001600160c01b03168152602001908152602001600020905080600a018054610b1e90614497565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4a90614497565b8015610b975780601f10610b6c57610100808354040283529160200191610b97565b820191906000526020600020905b815481529060010190602001808311610b7a57829003601f168201915b5050505050915050919050565b600081610baf612acd565b546001600160c01b039081169082161115610bdc5760405162461bcd60e51b81526004016107d3906143f5565b6000610be6612acd565b6001600160c01b038516600090815260019190910160205260409020905060026007820154600160681b900460ff166002811115610c2657610c26613d2f565b03610c35576003925050610c90565b60016007820154600160681b900460ff166002811115610c5757610c57613d2f565b03610c8a57600781015442600160401b90910464ffffffffff1610610c80576001925050610c90565b6002925050610c90565b60009250505b50919050565b6060610ca0612a72565b81610ca9612acd565b546001600160c01b039081169082161115610cd65760405162461bcd60e51b81526004016107d3906143f5565b61015f546001600160a01b031615801590610d64575061015f60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d64919061441e565b610d805760405162461bcd60e51b81526004016107d39061443b565b6000610d8a612acd565b6001600160c01b038516600090815260019190910160205260409020905060026007820154600160681b900460ff166002811115610dca57610dca613d2f565b14610e175760405162461bcd60e51b815260206004820152601a60248201527f5468652067726f7570206973206e6f742066696e616c697a656400000000000060448201526064016107d3565b6000610e23338661193e565b905060008111610e815760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79207469636b657420686f6c646572732063616e20636c61696d20746f6044820152636b656e7360e01b60648201526084016107d3565b610e9533866001600160c01b031683612af1565b600081610ea184612c75565b610eab9190614480565b604051909150600090339083908381818185875af1925050503d8060008114610ef0576040519150601f19603f3d011682016040523d82523d6000602084013e610ef5565b606091505b5050905080610f395760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b60448201526064016107d3565b6000836001600160401b03811115610f5357610f53613dad565b604051908082528060200260200182016040528015610f7c578160200160208202803683370190505b50905060005b848110156110e55761015f5460408051630cf292c160e11b815290516000926001600160a01b0316916319e525829160048083019260209291908290030181865afa158015610fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff991906144cb565b6009880154604051630818bcb960e21b81523360048201526001600160c01b0390911660248201526001600160a01b039190911690632062f2e4906044016020604051808303816000875af1158015611056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107a91906144e8565b90508083838151811061108f5761108f614501565b602090810291909101015260405181906001600160c01b038c169033907f4c1be2553fae8261d25ff0ad45198f755781d31ad84c58a526837480b4d7fece90600090a450806110dd81614517565b915050610f82565b50955050505050506110f8600161012d55565b919050565b6001600160a01b038516331480611119575061111985336106fe565b6111355760405162461bcd60e51b81526004016107d390614530565b6111428585858585612cb7565b5050505050565b600082815260fb602052604090206001015461116481612e56565b61116e8383612e60565b505050565b600061117d612acd565b546001600160c01b0316919050565b6001600160a01b03811633146111fc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107d3565b6112068282612ee6565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036112525760405162461bcd60e51b81526004016107d39061457e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661129b600080516020614c4c833981519152546001600160a01b031690565b6001600160a01b0316146112c15760405162461bcd60e51b81526004016107d3906145ca565b6112ca81612f4d565b60408051600080825260208201909252610ad891839190612f58565b6000806112f3848461193e565b119392505050565b606081518351146113605760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016107d3565b600083516001600160401b0381111561137b5761137b613dad565b6040519080825280602002602001820160405280156113a4578160200160208202803683370190505b50905060005b845181101561141c576113ef8582815181106113c8576113c8614501565b60200260200101518583815181106113e2576113e2614501565b602002602001015161076c565b82828151811061140157611401614501565b602090810291909101015261141581614517565b90506113aa565b509392505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361146c5760405162461bcd60e51b81526004016107d39061457e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114b5600080516020614c4c833981519152546001600160a01b031690565b6001600160a01b0316146114db5760405162461bcd60e51b81526004016107d3906145ca565b6114e482612f4d565b61120682826001612f58565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115905760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016107d3565b50600080516020614c4c8339815191525b90565b6000826001600160a01b03166115b8612acd565b6001600160c01b038416600090815260019182016020526040902001546001600160a01b031614905092915050565b60006115f281612e56565b61160d848484604051806020016040528060008152506130c3565b50505050565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006108018261c35061320f565b6000600080516020614c2c83398151915261166681612e56565b61015f546001600160a01b0316158015906116f4575061015f60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f4919061441e565b6117105760405162461bcd60e51b81526004016107d39061443b565b600161172c61171d612acd565b546001600160c01b0316610ba4565b600381111561173d5761173d613d2f565b036117815760405162461bcd60e51b81526020600482015260146024820152734f6e676f696e672067726f75702065786973747360601b60448201526064016107d3565b611789612acd565b80546000906117a0906001600160c01b0316614616565b82546001600160c01b039182166101009390930a9283029190920219909116179055606460006117d08286614644565b905060006117dc612acd565b546001600160c01b0316905060006117f2612acd565b6001600160c01b0383166000908152600191909101602052604090209050611818612acd565b5481546001600160c01b0319166001600160c01b03909116178155600181810180546001600160a01b0319163317905560028201899055600382018890556004820180546001600160401b03871667ffffffffffffffff199091161790556005820184905560078201805460ff60681b1916600160681b8302179055506118a24262093a80614666565b60078201805464ffffffffff92909216600160401b026cffffffffff000000000000000019909216919091179055604080518881526001600160401b038616602082015290810184905233906001600160c01b038416907f6c41f680bd5046e7b94552360a6d353c3d90e84424808396eb845cb2f0b059da9060600160405180910390a350935050505b5092915050565b611206338383613240565b600061195383836001600160c01b031661076c565b9392505050565b600061080182611b5861320f565b600081611973612acd565b546001600160c01b0390811690821611156119a05760405162461bcd60e51b81526004016107d3906143f5565b6119a8612acd565b6001600160c01b0393909316600090815260019093016020525050604090206006015490565b611a39604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052906101208201908152600060208201819052604082015260609081015290565b81611a42612acd565b546001600160c01b039081169082161115611a6f5760405162461bcd60e51b81526004016107d3906143f5565b611a77612acd565b6001600160c01b0384811660009081526001928301602090815260409182902082516101a08101845281549094168452938401546001600160a01b031690830152600280840154918301919091526003830154606083015260048301546001600160401b039081166080840152600584015460a0840152600684015460c0840152600784015490811660e0840152600160401b810464ffffffffff16610100840152919291610120840191600160681b90910460ff1690811115611b3d57611b3d613d2f565b6002811115611b4e57611b4e613d2f565b81526008820154602082015260098201546001600160c01b03166040820152600a82018054606090920191611b8290614497565b80601f0160208091040260200160405190810160405280929190818152602001828054611bae90614497565b8015611bfb5780601f10611bd057610100808354040283529160200191611bfb565b820191906000526020600020905b815481529060010190602001808311611bde57829003601f168201915b505050505081525050915050919050565b600054610100900460ff1615808015611c2c5750600054600160ff909116105b80611c465750303b158015611c46575060005460ff166001145b611ca95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107d3565b6000805460ff191660011790558015611ccc576000805461ff0019166101001790555b611d0a6040518060400160405280601781526020017f43727970746f50756e6b7347726f7570205469636b6574000000000000000000815250613320565b611d15600033612e60565b611d2d600080516020614c2c83398151915233612e60565b61015f80546001600160a01b0319166001600160a01b0384161790558015611206576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600082815260fb6020526040902060010154611dad81612e56565b61116e8383612ee6565b81611dc0612acd565b546001600160c01b039081169082161115611ded5760405162461bcd60e51b81526004016107d3906143f5565b61015f546001600160a01b031615801590611e7b575061015f60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7b919061441e565b611e975760405162461bcd60e51b81526004016107d39061443b565b6000611ea1612acd565b6001600160c01b03851660009081526001919091016020526040812060078101546004820154919350611ee0916001600160401b039182169116614679565b6001600160401b0316905080846001600160401b03161115611f535760405162461bcd60e51b815260206004820152602660248201527f4665776572207469636b6574732072656d61696e696e67207468616e207265716044820152651d595cdd195960d21b60648201526084016107d3565b60058201543490600090611f71906001600160401b03881690614480565b9050808214611fc25760405162461bcd60e51b815260206004820152601a60248201527f436f6e747269627574696f6e206d75737420626520657861637400000000000060448201526064016107d3565b600033905082856006016000828254611fdb9190614666565b90915550506007850180548891906000906120009084906001600160401b0316614699565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550866001600160401b0316612036612acd565b6001600160c01b038a166000908152600291909101602090815260408083206001600160a01b038616845290915281208054909190612076908490614666565b925050819055506120aa81896001600160c01b0316896001600160401b031660405180602001604052806000815250613350565b866001600160401b0316886001600160c01b0316826001600160a01b03167fe666172e6168732cfedfefcdfc03bf3faf2588416f76c21085a3d731dfa9c8a160405160405180910390a45050505050505050565b6001600160a01b03851633148061211a575061211a85336106fe565b6121365760405162461bcd60e51b81526004016107d390614530565b6111428585858585613423565b61214b612a72565b600080516020614c2c83398151915261216381612e56565b8161216c612acd565b546001600160c01b0390811690821611156121995760405162461bcd60e51b81526004016107d3906143f5565b61015f546001600160a01b031615801590612227575061015f60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612203573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612227919061441e565b6122435760405162461bcd60e51b81526004016107d39061443b565b61015f5460408051630cf292c160e11b815290516000926001600160a01b0316916319e525829160048083019260209291908290030181865afa15801561228e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b291906144cb565b6001600160a01b0316036123085760405162461bcd60e51b815260206004820152601c60248201527f45786869626974207265676973747279206d757374206265207365740000000060448201526064016107d3565b6000612312612acd565b6001600160c01b038516600090815260019190910160209081526040808320600281015461015f548351630d0d851d60e41b815293519296509094936001600160a01b039091169263d0d851d092600480830193928290030181865afa158015612380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a491906144cb565b6001600160a01b031663088f11f3836040518263ffffffff1660e01b81526004016123d191815260200190565b60a060405180830381865afa1580156123ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241291906146b9565b5060078701549094506001600160401b031660641492506124679150505760405162461bcd60e51b815260206004820152600c60248201526b139bdd081cdbdb19081bdd5d60a21b60448201526064016107d3565b80836006015410156124da5760405162461bcd60e51b815260206004820152603660248201527f4f6666657265642070726963652069732067726561746572207468616e207468604482015275329031bab93932b73a1031b7b73a3934b13aba34b7b760511b60648201526084016107d3565b61015f60009054906101000a90046001600160a01b03166001600160a01b031663d0d851d06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561252e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255291906144cb565b6001600160a01b0316638264fe9882846040518363ffffffff1660e01b815260040161258091815260200190565b6000604051808303818588803b15801561259957600080fd5b505af11580156125ad573d6000803e3d6000fd5b5050505050306001600160a01b031661015f60009054906101000a90046001600160a01b03166001600160a01b031663d0d851d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015612610573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263491906144cb565b6001600160a01b03166358178168846040518263ffffffff1660e01b815260040161266191815260200190565b602060405180830381865afa15801561267e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a291906144cb565b6001600160a01b0316146126ef5760405162461bcd60e51b81526020600482015260146024820152730556e6578706563746564206f776e6572736869760641b60448201526064016107d3565b61015f60009054906101000a90046001600160a01b03166001600160a01b031663d0d851d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015612743573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276791906144cb565b6001600160a01b0316638b72a2ec61015f60009054906101000a90046001600160a01b03166001600160a01b03166319e525826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ed91906144cb565b60028601546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561283857600080fd5b505af115801561284c573d6000803e3d6000fd5b505050506008830181905561015f5460408051630cf292c160e11b815290516001600160a01b03909216916319e52582916004808201926020929091908290030181865afa1580156128a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c691906144cb565b6002840154600785015460088601546001600160a01b03939093169263512137ed92916001600160401b0316906128fc8161195a565b612909896008015461163e565b6040516001600160e01b031960e088901b16815260048101959095526001600160401b03909316602485015260448401919091526064830152608482015260a4016020604051808303816000875af1158015612969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298d919061471a565b6009840180546001600160c01b0319166001600160c01b0392831617905560078401805460ff60681b1916600160691b179055604051908716907fa55364f4cf304b1309b80ba955214c6192d2c9ba9fc0aa3c4b3bc0f11c941d7290600090a25050505050610ad8600161012d55565b60006001600160e01b03198216636cdb3d1360e11b1480612a2e57506001600160e01b031982166303a24d0760e21b145b8061080157506301ffc9a760e01b6001600160e01b0319831614610801565b60006001600160e01b03198216637965db0b60e01b14806108015750610801826129fd565b600261012d5403612ac55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107d3565b600261012d55565b7f03fe2b06215ed90ddb175ede471f3ee4b3c6e6bff6501f742f92f658f9f2e75890565b6001600160a01b038316612b535760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016107d3565b336000612b5f84613551565b90506000612b6c84613551565b6040805160208082018352600091829052888252606581528282206001600160a01b038b1683529052205490915084811015612bf65760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016107d3565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b60008082600801548360060154612c8c9190614737565b905060008111612c9f5750600092915050565b6007830154611953906001600160401b031682614644565b8151835114612cd85760405162461bcd60e51b81526004016107d39061474a565b6001600160a01b038416612cfe5760405162461bcd60e51b81526004016107d390614792565b3360005b8451811015612de8576000858281518110612d1f57612d1f614501565b602002602001015190506000858381518110612d3d57612d3d614501565b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015612d8e5760405162461bcd60e51b81526004016107d3906147d7565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612dcd908490614666565b9250508190555050505080612de190614517565b9050612d02565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612e38929190614821565b60405180910390a4612e4e81878787878761359c565b505050505050565b610ad881336136f7565b612e6a8282611613565b61120657600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612ea23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612ef08282611613565b1561120657600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061120681612e56565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612f8b5761116e83613750565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612fe5575060408051601f3d908101601f19168201909252612fe2918101906144e8565b60015b6130485760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016107d3565b600080516020614c4c83398151915281146130b75760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016107d3565b5061116e8383836137ec565b6001600160a01b0384166130e95760405162461bcd60e51b81526004016107d390614846565b815183511461310a5760405162461bcd60e51b81526004016107d39061474a565b3360005b84518110156131a75783818151811061312957613129614501565b60200260200101516065600087848151811061314757613147614501565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461318f9190614666565b9091555081905061319f81614517565b91505061310e565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516131f8929190614821565b60405180910390a46111428160008787878761359c565b600061271061321e8385614480565b101561322957600080fd5b6127106132368385614480565b6119539190614644565b816001600160a01b0316836001600160a01b0316036132b35760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016107d3565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600054610100900460ff166133475760405162461bcd60e51b81526004016107d390614887565b610ad881613811565b6001600160a01b0384166133765760405162461bcd60e51b81526004016107d390614846565b33600061338285613551565b9050600061338f85613551565b905060008681526065602090815260408083206001600160a01b038b168452909152812080548792906133c3908490614666565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612c6c83600089898989613841565b6001600160a01b0384166134495760405162461bcd60e51b81526004016107d390614792565b33600061345585613551565b9050600061346285613551565b905060008681526065602090815260408083206001600160a01b038c168452909152902054858110156134a75760405162461bcd60e51b81526004016107d3906147d7565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906134e6908490614666565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4613546848a8a8a8a8a613841565b505050505050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061358b5761358b614501565b602090810291909101015292915050565b6001600160a01b0384163b15612e4e5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906135e090899089908890889088906004016148d2565b6020604051808303816000875af192505050801561361b575060408051601f3d908101601f1916820190925261361891810190614930565b60015b6136c75761362761494d565b806308c379a003613660575061363b614968565b806136465750613662565b8060405162461bcd60e51b81526004016107d39190613d1c565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016107d3565b6001600160e01b0319811663bc197c8160e01b14612c6c5760405162461bcd60e51b81526004016107d3906149f1565b6137018282611613565b6112065761370e816138fc565b61371983602061390e565b60405160200161372a929190614a39565b60408051601f198184030181529082905262461bcd60e51b82526107d391600401613d1c565b6001600160a01b0381163b6137bd5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107d3565b600080516020614c4c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6137f583613aa9565b6000825111806138025750805b1561116e5761160d8383613ae9565b600054610100900460ff166138385760405162461bcd60e51b81526004016107d390614887565b610ad881613bdd565b6001600160a01b0384163b15612e4e5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906138859089908990889088908890600401614aae565b6020604051808303816000875af19250505080156138c0575060408051601f3d908101601f191682019092526138bd91810190614930565b60015b6138cc5761362761494d565b6001600160e01b0319811663f23a6e6160e01b14612c6c5760405162461bcd60e51b81526004016107d3906149f1565b60606108016001600160a01b03831660145b6060600061391d836002614480565b613928906002614666565b6001600160401b0381111561393f5761393f613dad565b6040519080825280601f01601f191660200182016040528015613969576020820181803683370190505b509050600360fc1b8160008151811061398457613984614501565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106139b3576139b3614501565b60200101906001600160f81b031916908160001a90535060006139d7846002614480565b6139e2906001614666565b90505b6001811115613a5a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613a1657613a16614501565b1a60f81b828281518110613a2c57613a2c614501565b60200101906001600160f81b031916908160001a90535060049490941c93613a5381614af3565b90506139e5565b5083156119535760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107d3565b613ab281613750565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613b515760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107d3565b600080846001600160a01b031684604051613b6c9190614b0a565b600060405180830381855af49150503d8060008114613ba7576040519150601f19603f3d011682016040523d82523d6000602084013e613bac565b606091505b5091509150613bd48282604051806060016040528060278152602001614c6c60279139613be9565b95945050505050565b60676112068282614b6c565b60608315613bf8575081611953565b61195383838151156136465781518083602001fd5b6001600160a01b0381168114610ad857600080fd5b60008060408385031215613c3557600080fd5b8235613c4081613c0d565b946020939093013593505050565b6001600160e01b031981168114610ad857600080fd5b600060208284031215613c7657600080fd5b813561195381613c4e565b6001600160c01b0381168114610ad857600080fd5b600060208284031215613ca857600080fd5b813561195381613c81565b600060208284031215613cc557600080fd5b5035919050565b60005b83811015613ce7578181015183820152602001613ccf565b50506000910152565b60008151808452613d08816020860160208601613ccc565b601f01601f19169290920160200192915050565b6020815260006119536020830184613cf0565b634e487b7160e01b600052602160045260246000fd5b6020810160048310613d5957613d59613d2f565b91905290565b600081518084526020808501945080840160005b83811015613d8f57815187529582019590820190600101613d73565b509495945050505050565b6020815260006119536020830184613d5f565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715613de857613de8613dad565b6040525050565b60006001600160401b03821115613e0857613e08613dad565b5060051b60200190565b600082601f830112613e2357600080fd5b81356020613e3082613def565b604051613e3d8282613dc3565b83815260059390931b8501820192828101915086841115613e5d57600080fd5b8286015b84811015613e785780358352918301918301613e61565b509695505050505050565b600082601f830112613e9457600080fd5b81356001600160401b03811115613ead57613ead613dad565b604051613ec4601f8301601f191660200182613dc3565b818152846020838601011115613ed957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215613f0e57600080fd5b8535613f1981613c0d565b94506020860135613f2981613c0d565b935060408601356001600160401b0380821115613f4557600080fd5b613f5189838a01613e12565b94506060880135915080821115613f6757600080fd5b613f7389838a01613e12565b93506080880135915080821115613f8957600080fd5b50613f9688828901613e83565b9150509295509295909350565b60008060408385031215613fb657600080fd5b823591506020830135613fc881613c0d565b809150509250929050565b600060208284031215613fe557600080fd5b813561195381613c0d565b6000806040838503121561400357600080fd5b823561400e81613c0d565b91506020830135613fc881613c81565b6000806040838503121561403157600080fd5b82356001600160401b038082111561404857600080fd5b818501915085601f83011261405c57600080fd5b8135602061406982613def565b6040516140768282613dc3565b83815260059390931b850182019282810191508984111561409657600080fd5b948201945b838610156140bd5785356140ae81613c0d565b8252948201949082019061409b565b965050860135925050808211156140d357600080fd5b506140e085828601613e12565b9150509250929050565b600080604083850312156140fd57600080fd5b823561410881613c0d565b915060208301356001600160401b0381111561412357600080fd5b6140e085828601613e83565b60008060006060848603121561414457600080fd5b833561414f81613c0d565b925060208401356001600160401b038082111561416b57600080fd5b61417787838801613e12565b9350604086013591508082111561418d57600080fd5b5061419a86828701613e12565b9150509250925092565b600080604083850312156141b757600080fd5b50508035926020909101359150565b8015158114610ad857600080fd5b600080604083850312156141e757600080fd5b82356141f281613c0d565b91506020830135613fc8816141c6565b6003811061421257614212613d2f565b9052565b602081526142306020820183516001600160c01b03169052565b6000602083015161424c60408401826001600160a01b03169052565b506040830151606083015260608301516080830152608083015161427b60a08401826001600160401b03169052565b5060a083015160c083015260c083015160e083015260e08301516101006142ac818501836001600160401b03169052565b84015190506101206142c68482018364ffffffffff169052565b84015190506101406142da84820183614202565b840151610160848101919091528401519050610180614303818501836001600160c01b03169052565b8401516101a084810152905061431d6101c0840182613cf0565b949350505050565b6000806040838503121561433857600080fd5b823561434381613c81565b915060208301356001600160401b0381168114613fc857600080fd5b6000806040838503121561437257600080fd5b823561437d81613c0d565b91506020830135613fc881613c0d565b600080600080600060a086880312156143a557600080fd5b85356143b081613c0d565b945060208601356143c081613c0d565b9350604086013592506060860135915060808601356001600160401b038111156143e957600080fd5b613f9688828901613e83565b6020808252600f908201526e125b9d985b1a590819dc9bdd5c1259608a1b604082015260600190565b60006020828403121561443057600080fd5b8151611953816141c6565b6020808252601590820152744d757365756d206d7573742062652061637469766560581b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176108015761080161446a565b600181811c908216806144ab57607f821691505b602082108103610c9057634e487b7160e01b600052602260045260246000fd5b6000602082840312156144dd57600080fd5b815161195381613c0d565b6000602082840312156144fa57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000600182016145295761452961446a565b5060010190565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006001600160c01b038281166002600160c01b0319810161463a5761463a61446a565b6001019392505050565b60008261466157634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156108015761080161446a565b6001600160401b0382811682821603908082111561192c5761192c61446a565b6001600160401b0381811683821601908082111561192c5761192c61446a565b600080600080600060a086880312156146d157600080fd5b85516146dc816141c6565b6020870151604088015191965094506146f481613c0d565b60608701516080880151919450925061470c81613c0d565b809150509295509295909350565b60006020828403121561472c57600080fd5b815161195381613c81565b818103818111156108015761080161446a565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006148346040830185613d5f565b8281036020840152613bd48185613d5f565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906148fe90830186613d5f565b82810360608401526149108186613d5f565b905082810360808401526149248185613cf0565b98975050505050505050565b60006020828403121561494257600080fd5b815161195381613c4e565b600060033d11156115a15760046000803e5060005160e01c90565b600060443d10156149765790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156149a557505050505090565b82850191508151818111156149bd5750505050505090565b843d87010160208285010111156149d75750505050505090565b6149e660208286010187613dc3565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614a71816017850160208801613ccc565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614aa2816028840160208801613ccc565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614ae890830184613cf0565b979650505050505050565b600081614b0257614b0261446a565b506000190190565b60008251614b1c818460208701613ccc565b9190910192915050565b601f82111561116e57600081815260208120601f850160051c81016020861015614b4d5750805b601f850160051c820191505b81811015612e4e57828155600101614b59565b81516001600160401b03811115614b8557614b85613dad565b614b9981614b938454614497565b84614b26565b602080601f831160018114614bce5760008415614bb65750858301515b600019600386901b1c1916600185901b178555612e4e565b600085815260208120601f198616915b82811015614bfd57888601518255948401946001909101908401614bde565b5085821015614c1b5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe850d585eb7f024ccee5e68e55f2c26cc72e1e6ee456acf62135757a5eb9d4a10360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a715d55fe810ac8f169b9c4286ed7cf864c553b793de1ce75f216c3cfb90949264736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102245760003560e01c806353b92d0911610123578063b4ce873b116100ab578063d547741f1161006f578063d547741f146106b0578063ddcef2b6146106d0578063e985e9c5146106e3578063f242432a1461072c578063f77e17591461074c57600080fd5b8063b4ce873b14610603578063bafb0ebc14610623578063bdd99cdf14610643578063c02a209e14610663578063c4d66de81461069057600080fd5b80639bad761f116100f25780639bad761f146105825780639f7b457914610598578063a217fddf146105b8578063a22cb465146105cd578063aaad804b146105ed57600080fd5b806353b92d091461050257806357ab7f8d1461052257806391d1485414610542578063962fc1aa1461056257600080fd5b80632f2ff15d116101b157806345e67a8c1161017557806345e67a8c1461045f5780634a2cfb54146104985780634e1273f4146104ba5780634f1ef286146104da57806352d1902d146104ed57600080fd5b80632f2ff15d146103b25780632fae02ce146103d257806336568abe146103ff5780633659cfe61461041f57806344b955711461043f57600080fd5b806319cd758f116101f857806319cd758f146102db5780632368a9541461030857806323b8b46d14610335578063248a9ca3146103625780632eb2c2d61461039257600080fd5b8062fdd58e1461022957806301ffc9a71461025c5780630ac457391461028c5780630e89341c146102ae575b600080fd5b34801561023557600080fd5b50610249610244366004613c22565b61076c565b6040519081526020015b60405180910390f35b34801561026857600080fd5b5061027c610277366004613c64565b610807565b6040519015158152602001610253565b34801561029857600080fd5b506102ac6102a7366004613c96565b610821565b005b3480156102ba57600080fd5b506102ce6102c9366004613cb3565b610adb565b6040516102539190613d1c565b3480156102e757600080fd5b506102fb6102f6366004613c96565b610ba4565b6040516102539190613d45565b34801561031457600080fd5b50610328610323366004613c96565b610c96565b6040516102539190613d9a565b34801561034157600080fd5b5061034a606481565b6040516001600160401b039091168152602001610253565b34801561036e57600080fd5b5061024961037d366004613cb3565b600090815260fb602052604090206001015490565b34801561039e57600080fd5b506102ac6103ad366004613ef6565b6110fd565b3480156103be57600080fd5b506102ac6103cd366004613fa3565b611149565b3480156103de57600080fd5b506103e7611173565b6040516001600160c01b039091168152602001610253565b34801561040b57600080fd5b506102ac61041a366004613fa3565b61118c565b34801561042b57600080fd5b506102ac61043a366004613fd3565b61120a565b34801561044b57600080fd5b5061027c61045a366004613ff0565b6112e6565b34801561046b57600080fd5b5061015f54610480906001600160a01b031681565b6040516001600160a01b039091168152602001610253565b3480156104a457600080fd5b50610249600080516020614c2c83398151915281565b3480156104c657600080fd5b506103286104d536600461401e565b6112fb565b6102ac6104e83660046140ea565b611424565b3480156104f957600080fd5b506102496114f0565b34801561050e57600080fd5b5061027c61051d366004613ff0565b6115a4565b34801561052e57600080fd5b506102ac61053d36600461412f565b6115e7565b34801561054e57600080fd5b5061027c61055d366004613fa3565b611613565b34801561056e57600080fd5b5061024961057d366004613cb3565b61163e565b34801561058e57600080fd5b5061034a611b5881565b3480156105a457600080fd5b506103e76105b33660046141a4565b61164c565b3480156105c457600080fd5b50610249600081565b3480156105d957600080fd5b506102ac6105e83660046141d4565b611933565b3480156105f957600080fd5b5061034a61c35081565b34801561060f57600080fd5b5061024961061e366004613ff0565b61193e565b34801561062f57600080fd5b5061024961063e366004613cb3565b61195a565b34801561064f57600080fd5b5061024961065e366004613c96565b611968565b34801561066f57600080fd5b5061068361067e366004613c96565b6119ce565b6040516102539190614216565b34801561069c57600080fd5b506102ac6106ab366004613fd3565b611c0c565b3480156106bc57600080fd5b506102ac6106cb366004613fa3565b611d92565b6102ac6106de366004614325565b611db7565b3480156106ef57600080fd5b5061027c6106fe36600461435f565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b34801561073857600080fd5b506102ac61074736600461438d565b6120fe565b34801561075857600080fd5b506102ac610767366004613c96565b612143565b60006001600160a01b0383166107dc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b6000610812826129fd565b80610801575061080182612a4d565b610829612a72565b80610832612acd565b546001600160c01b03908116908216111561085f5760405162461bcd60e51b81526004016107d3906143f5565b61015f546001600160a01b0316158015906108ed575061015f60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed919061441e565b6109095760405162461bcd60e51b81526004016107d39061443b565b336000610914612acd565b6001600160c01b0385166000908152600191909101602052604090209050600261093d85610ba4565b600381111561094e5761094e613d2f565b1461099b5760405162461bcd60e51b815260206004820152601960248201527f5468652067726f7570206d75737420626520657870697265640000000000000060448201526064016107d3565b60006109a7338661193e565b905060008111610a055760405162461bcd60e51b815260206004820152602360248201527f4f6e6c79207469636b657420686f6c646572732063616e2067657420726566756044820152626e647360e81b60648201526084016107d3565b610a1933866001600160c01b031683612af1565b600081610a2584612c75565b610a2f9190614480565b90506000846001600160a01b03168260405160006040518083038185875af1925050503d8060008114610a7e576040519150601f19603f3d011682016040523d82523d6000602084013e610a83565b606091505b5050905080610ac75760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b60448201526064016107d3565b505050505050610ad8600161012d55565b50565b60606000610ae7612acd565b6001016000846001600160c01b03166001600160c01b03168152602001908152602001600020905080600a018054610b1e90614497565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4a90614497565b8015610b975780601f10610b6c57610100808354040283529160200191610b97565b820191906000526020600020905b815481529060010190602001808311610b7a57829003601f168201915b5050505050915050919050565b600081610baf612acd565b546001600160c01b039081169082161115610bdc5760405162461bcd60e51b81526004016107d3906143f5565b6000610be6612acd565b6001600160c01b038516600090815260019190910160205260409020905060026007820154600160681b900460ff166002811115610c2657610c26613d2f565b03610c35576003925050610c90565b60016007820154600160681b900460ff166002811115610c5757610c57613d2f565b03610c8a57600781015442600160401b90910464ffffffffff1610610c80576001925050610c90565b6002925050610c90565b60009250505b50919050565b6060610ca0612a72565b81610ca9612acd565b546001600160c01b039081169082161115610cd65760405162461bcd60e51b81526004016107d3906143f5565b61015f546001600160a01b031615801590610d64575061015f60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d64919061441e565b610d805760405162461bcd60e51b81526004016107d39061443b565b6000610d8a612acd565b6001600160c01b038516600090815260019190910160205260409020905060026007820154600160681b900460ff166002811115610dca57610dca613d2f565b14610e175760405162461bcd60e51b815260206004820152601a60248201527f5468652067726f7570206973206e6f742066696e616c697a656400000000000060448201526064016107d3565b6000610e23338661193e565b905060008111610e815760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79207469636b657420686f6c646572732063616e20636c61696d20746f6044820152636b656e7360e01b60648201526084016107d3565b610e9533866001600160c01b031683612af1565b600081610ea184612c75565b610eab9190614480565b604051909150600090339083908381818185875af1925050503d8060008114610ef0576040519150601f19603f3d011682016040523d82523d6000602084013e610ef5565b606091505b5050905080610f395760405162461bcd60e51b815260206004820152601060248201526f11985a5b1959081d1bc81c99599d5b9960821b60448201526064016107d3565b6000836001600160401b03811115610f5357610f53613dad565b604051908082528060200260200182016040528015610f7c578160200160208202803683370190505b50905060005b848110156110e55761015f5460408051630cf292c160e11b815290516000926001600160a01b0316916319e525829160048083019260209291908290030181865afa158015610fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff991906144cb565b6009880154604051630818bcb960e21b81523360048201526001600160c01b0390911660248201526001600160a01b039190911690632062f2e4906044016020604051808303816000875af1158015611056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107a91906144e8565b90508083838151811061108f5761108f614501565b602090810291909101015260405181906001600160c01b038c169033907f4c1be2553fae8261d25ff0ad45198f755781d31ad84c58a526837480b4d7fece90600090a450806110dd81614517565b915050610f82565b50955050505050506110f8600161012d55565b919050565b6001600160a01b038516331480611119575061111985336106fe565b6111355760405162461bcd60e51b81526004016107d390614530565b6111428585858585612cb7565b5050505050565b600082815260fb602052604090206001015461116481612e56565b61116e8383612e60565b505050565b600061117d612acd565b546001600160c01b0316919050565b6001600160a01b03811633146111fc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107d3565b6112068282612ee6565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036112525760405162461bcd60e51b81526004016107d39061457e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661129b600080516020614c4c833981519152546001600160a01b031690565b6001600160a01b0316146112c15760405162461bcd60e51b81526004016107d3906145ca565b6112ca81612f4d565b60408051600080825260208201909252610ad891839190612f58565b6000806112f3848461193e565b119392505050565b606081518351146113605760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016107d3565b600083516001600160401b0381111561137b5761137b613dad565b6040519080825280602002602001820160405280156113a4578160200160208202803683370190505b50905060005b845181101561141c576113ef8582815181106113c8576113c8614501565b60200260200101518583815181106113e2576113e2614501565b602002602001015161076c565b82828151811061140157611401614501565b602090810291909101015261141581614517565b90506113aa565b509392505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361146c5760405162461bcd60e51b81526004016107d39061457e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166114b5600080516020614c4c833981519152546001600160a01b031690565b6001600160a01b0316146114db5760405162461bcd60e51b81526004016107d3906145ca565b6114e482612f4d565b61120682826001612f58565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115905760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016107d3565b50600080516020614c4c8339815191525b90565b6000826001600160a01b03166115b8612acd565b6001600160c01b038416600090815260019182016020526040902001546001600160a01b031614905092915050565b60006115f281612e56565b61160d848484604051806020016040528060008152506130c3565b50505050565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006108018261c35061320f565b6000600080516020614c2c83398151915261166681612e56565b61015f546001600160a01b0316158015906116f4575061015f60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f4919061441e565b6117105760405162461bcd60e51b81526004016107d39061443b565b600161172c61171d612acd565b546001600160c01b0316610ba4565b600381111561173d5761173d613d2f565b036117815760405162461bcd60e51b81526020600482015260146024820152734f6e676f696e672067726f75702065786973747360601b60448201526064016107d3565b611789612acd565b80546000906117a0906001600160c01b0316614616565b82546001600160c01b039182166101009390930a9283029190920219909116179055606460006117d08286614644565b905060006117dc612acd565b546001600160c01b0316905060006117f2612acd565b6001600160c01b0383166000908152600191909101602052604090209050611818612acd565b5481546001600160c01b0319166001600160c01b03909116178155600181810180546001600160a01b0319163317905560028201899055600382018890556004820180546001600160401b03871667ffffffffffffffff199091161790556005820184905560078201805460ff60681b1916600160681b8302179055506118a24262093a80614666565b60078201805464ffffffffff92909216600160401b026cffffffffff000000000000000019909216919091179055604080518881526001600160401b038616602082015290810184905233906001600160c01b038416907f6c41f680bd5046e7b94552360a6d353c3d90e84424808396eb845cb2f0b059da9060600160405180910390a350935050505b5092915050565b611206338383613240565b600061195383836001600160c01b031661076c565b9392505050565b600061080182611b5861320f565b600081611973612acd565b546001600160c01b0390811690821611156119a05760405162461bcd60e51b81526004016107d3906143f5565b6119a8612acd565b6001600160c01b0393909316600090815260019093016020525050604090206006015490565b611a39604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052906101208201908152600060208201819052604082015260609081015290565b81611a42612acd565b546001600160c01b039081169082161115611a6f5760405162461bcd60e51b81526004016107d3906143f5565b611a77612acd565b6001600160c01b0384811660009081526001928301602090815260409182902082516101a08101845281549094168452938401546001600160a01b031690830152600280840154918301919091526003830154606083015260048301546001600160401b039081166080840152600584015460a0840152600684015460c0840152600784015490811660e0840152600160401b810464ffffffffff16610100840152919291610120840191600160681b90910460ff1690811115611b3d57611b3d613d2f565b6002811115611b4e57611b4e613d2f565b81526008820154602082015260098201546001600160c01b03166040820152600a82018054606090920191611b8290614497565b80601f0160208091040260200160405190810160405280929190818152602001828054611bae90614497565b8015611bfb5780601f10611bd057610100808354040283529160200191611bfb565b820191906000526020600020905b815481529060010190602001808311611bde57829003601f168201915b505050505081525050915050919050565b600054610100900460ff1615808015611c2c5750600054600160ff909116105b80611c465750303b158015611c46575060005460ff166001145b611ca95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107d3565b6000805460ff191660011790558015611ccc576000805461ff0019166101001790555b611d0a6040518060400160405280601781526020017f43727970746f50756e6b7347726f7570205469636b6574000000000000000000815250613320565b611d15600033612e60565b611d2d600080516020614c2c83398151915233612e60565b61015f80546001600160a01b0319166001600160a01b0384161790558015611206576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b600082815260fb6020526040902060010154611dad81612e56565b61116e8383612ee6565b81611dc0612acd565b546001600160c01b039081169082161115611ded5760405162461bcd60e51b81526004016107d3906143f5565b61015f546001600160a01b031615801590611e7b575061015f60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7b919061441e565b611e975760405162461bcd60e51b81526004016107d39061443b565b6000611ea1612acd565b6001600160c01b03851660009081526001919091016020526040812060078101546004820154919350611ee0916001600160401b039182169116614679565b6001600160401b0316905080846001600160401b03161115611f535760405162461bcd60e51b815260206004820152602660248201527f4665776572207469636b6574732072656d61696e696e67207468616e207265716044820152651d595cdd195960d21b60648201526084016107d3565b60058201543490600090611f71906001600160401b03881690614480565b9050808214611fc25760405162461bcd60e51b815260206004820152601a60248201527f436f6e747269627574696f6e206d75737420626520657861637400000000000060448201526064016107d3565b600033905082856006016000828254611fdb9190614666565b90915550506007850180548891906000906120009084906001600160401b0316614699565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550866001600160401b0316612036612acd565b6001600160c01b038a166000908152600291909101602090815260408083206001600160a01b038616845290915281208054909190612076908490614666565b925050819055506120aa81896001600160c01b0316896001600160401b031660405180602001604052806000815250613350565b866001600160401b0316886001600160c01b0316826001600160a01b03167fe666172e6168732cfedfefcdfc03bf3faf2588416f76c21085a3d731dfa9c8a160405160405180910390a45050505050505050565b6001600160a01b03851633148061211a575061211a85336106fe565b6121365760405162461bcd60e51b81526004016107d390614530565b6111428585858585613423565b61214b612a72565b600080516020614c2c83398151915261216381612e56565b8161216c612acd565b546001600160c01b0390811690821611156121995760405162461bcd60e51b81526004016107d3906143f5565b61015f546001600160a01b031615801590612227575061015f60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612203573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612227919061441e565b6122435760405162461bcd60e51b81526004016107d39061443b565b61015f5460408051630cf292c160e11b815290516000926001600160a01b0316916319e525829160048083019260209291908290030181865afa15801561228e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b291906144cb565b6001600160a01b0316036123085760405162461bcd60e51b815260206004820152601c60248201527f45786869626974207265676973747279206d757374206265207365740000000060448201526064016107d3565b6000612312612acd565b6001600160c01b038516600090815260019190910160209081526040808320600281015461015f548351630d0d851d60e41b815293519296509094936001600160a01b039091169263d0d851d092600480830193928290030181865afa158015612380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a491906144cb565b6001600160a01b031663088f11f3836040518263ffffffff1660e01b81526004016123d191815260200190565b60a060405180830381865afa1580156123ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241291906146b9565b5060078701549094506001600160401b031660641492506124679150505760405162461bcd60e51b815260206004820152600c60248201526b139bdd081cdbdb19081bdd5d60a21b60448201526064016107d3565b80836006015410156124da5760405162461bcd60e51b815260206004820152603660248201527f4f6666657265642070726963652069732067726561746572207468616e207468604482015275329031bab93932b73a1031b7b73a3934b13aba34b7b760511b60648201526084016107d3565b61015f60009054906101000a90046001600160a01b03166001600160a01b031663d0d851d06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561252e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255291906144cb565b6001600160a01b0316638264fe9882846040518363ffffffff1660e01b815260040161258091815260200190565b6000604051808303818588803b15801561259957600080fd5b505af11580156125ad573d6000803e3d6000fd5b5050505050306001600160a01b031661015f60009054906101000a90046001600160a01b03166001600160a01b031663d0d851d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015612610573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263491906144cb565b6001600160a01b03166358178168846040518263ffffffff1660e01b815260040161266191815260200190565b602060405180830381865afa15801561267e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a291906144cb565b6001600160a01b0316146126ef5760405162461bcd60e51b81526020600482015260146024820152730556e6578706563746564206f776e6572736869760641b60448201526064016107d3565b61015f60009054906101000a90046001600160a01b03166001600160a01b031663d0d851d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015612743573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276791906144cb565b6001600160a01b0316638b72a2ec61015f60009054906101000a90046001600160a01b03166001600160a01b03166319e525826040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ed91906144cb565b60028601546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561283857600080fd5b505af115801561284c573d6000803e3d6000fd5b505050506008830181905561015f5460408051630cf292c160e11b815290516001600160a01b03909216916319e52582916004808201926020929091908290030181865afa1580156128a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c691906144cb565b6002840154600785015460088601546001600160a01b03939093169263512137ed92916001600160401b0316906128fc8161195a565b612909896008015461163e565b6040516001600160e01b031960e088901b16815260048101959095526001600160401b03909316602485015260448401919091526064830152608482015260a4016020604051808303816000875af1158015612969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298d919061471a565b6009840180546001600160c01b0319166001600160c01b0392831617905560078401805460ff60681b1916600160691b179055604051908716907fa55364f4cf304b1309b80ba955214c6192d2c9ba9fc0aa3c4b3bc0f11c941d7290600090a25050505050610ad8600161012d55565b60006001600160e01b03198216636cdb3d1360e11b1480612a2e57506001600160e01b031982166303a24d0760e21b145b8061080157506301ffc9a760e01b6001600160e01b0319831614610801565b60006001600160e01b03198216637965db0b60e01b14806108015750610801826129fd565b600261012d5403612ac55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107d3565b600261012d55565b7f03fe2b06215ed90ddb175ede471f3ee4b3c6e6bff6501f742f92f658f9f2e75890565b6001600160a01b038316612b535760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016107d3565b336000612b5f84613551565b90506000612b6c84613551565b6040805160208082018352600091829052888252606581528282206001600160a01b038b1683529052205490915084811015612bf65760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016107d3565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b60008082600801548360060154612c8c9190614737565b905060008111612c9f5750600092915050565b6007830154611953906001600160401b031682614644565b8151835114612cd85760405162461bcd60e51b81526004016107d39061474a565b6001600160a01b038416612cfe5760405162461bcd60e51b81526004016107d390614792565b3360005b8451811015612de8576000858281518110612d1f57612d1f614501565b602002602001015190506000858381518110612d3d57612d3d614501565b60209081029190910181015160008481526065835260408082206001600160a01b038e168352909352919091205490915081811015612d8e5760405162461bcd60e51b81526004016107d3906147d7565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612dcd908490614666565b9250508190555050505080612de190614517565b9050612d02565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612e38929190614821565b60405180910390a4612e4e81878787878761359c565b505050505050565b610ad881336136f7565b612e6a8282611613565b61120657600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612ea23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612ef08282611613565b1561120657600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061120681612e56565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612f8b5761116e83613750565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612fe5575060408051601f3d908101601f19168201909252612fe2918101906144e8565b60015b6130485760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016107d3565b600080516020614c4c83398151915281146130b75760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016107d3565b5061116e8383836137ec565b6001600160a01b0384166130e95760405162461bcd60e51b81526004016107d390614846565b815183511461310a5760405162461bcd60e51b81526004016107d39061474a565b3360005b84518110156131a75783818151811061312957613129614501565b60200260200101516065600087848151811061314757613147614501565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461318f9190614666565b9091555081905061319f81614517565b91505061310e565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516131f8929190614821565b60405180910390a46111428160008787878761359c565b600061271061321e8385614480565b101561322957600080fd5b6127106132368385614480565b6119539190614644565b816001600160a01b0316836001600160a01b0316036132b35760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016107d3565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600054610100900460ff166133475760405162461bcd60e51b81526004016107d390614887565b610ad881613811565b6001600160a01b0384166133765760405162461bcd60e51b81526004016107d390614846565b33600061338285613551565b9050600061338f85613551565b905060008681526065602090815260408083206001600160a01b038b168452909152812080548792906133c3908490614666565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612c6c83600089898989613841565b6001600160a01b0384166134495760405162461bcd60e51b81526004016107d390614792565b33600061345585613551565b9050600061346285613551565b905060008681526065602090815260408083206001600160a01b038c168452909152902054858110156134a75760405162461bcd60e51b81526004016107d3906147d7565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906134e6908490614666565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4613546848a8a8a8a8a613841565b505050505050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061358b5761358b614501565b602090810291909101015292915050565b6001600160a01b0384163b15612e4e5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906135e090899089908890889088906004016148d2565b6020604051808303816000875af192505050801561361b575060408051601f3d908101601f1916820190925261361891810190614930565b60015b6136c75761362761494d565b806308c379a003613660575061363b614968565b806136465750613662565b8060405162461bcd60e51b81526004016107d39190613d1c565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016107d3565b6001600160e01b0319811663bc197c8160e01b14612c6c5760405162461bcd60e51b81526004016107d3906149f1565b6137018282611613565b6112065761370e816138fc565b61371983602061390e565b60405160200161372a929190614a39565b60408051601f198184030181529082905262461bcd60e51b82526107d391600401613d1c565b6001600160a01b0381163b6137bd5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107d3565b600080516020614c4c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6137f583613aa9565b6000825111806138025750805b1561116e5761160d8383613ae9565b600054610100900460ff166138385760405162461bcd60e51b81526004016107d390614887565b610ad881613bdd565b6001600160a01b0384163b15612e4e5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906138859089908990889088908890600401614aae565b6020604051808303816000875af19250505080156138c0575060408051601f3d908101601f191682019092526138bd91810190614930565b60015b6138cc5761362761494d565b6001600160e01b0319811663f23a6e6160e01b14612c6c5760405162461bcd60e51b81526004016107d3906149f1565b60606108016001600160a01b03831660145b6060600061391d836002614480565b613928906002614666565b6001600160401b0381111561393f5761393f613dad565b6040519080825280601f01601f191660200182016040528015613969576020820181803683370190505b509050600360fc1b8160008151811061398457613984614501565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106139b3576139b3614501565b60200101906001600160f81b031916908160001a90535060006139d7846002614480565b6139e2906001614666565b90505b6001811115613a5a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613a1657613a16614501565b1a60f81b828281518110613a2c57613a2c614501565b60200101906001600160f81b031916908160001a90535060049490941c93613a5381614af3565b90506139e5565b5083156119535760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107d3565b613ab281613750565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613b515760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107d3565b600080846001600160a01b031684604051613b6c9190614b0a565b600060405180830381855af49150503d8060008114613ba7576040519150601f19603f3d011682016040523d82523d6000602084013e613bac565b606091505b5091509150613bd48282604051806060016040528060278152602001614c6c60279139613be9565b95945050505050565b60676112068282614b6c565b60608315613bf8575081611953565b61195383838151156136465781518083602001fd5b6001600160a01b0381168114610ad857600080fd5b60008060408385031215613c3557600080fd5b8235613c4081613c0d565b946020939093013593505050565b6001600160e01b031981168114610ad857600080fd5b600060208284031215613c7657600080fd5b813561195381613c4e565b6001600160c01b0381168114610ad857600080fd5b600060208284031215613ca857600080fd5b813561195381613c81565b600060208284031215613cc557600080fd5b5035919050565b60005b83811015613ce7578181015183820152602001613ccf565b50506000910152565b60008151808452613d08816020860160208601613ccc565b601f01601f19169290920160200192915050565b6020815260006119536020830184613cf0565b634e487b7160e01b600052602160045260246000fd5b6020810160048310613d5957613d59613d2f565b91905290565b600081518084526020808501945080840160005b83811015613d8f57815187529582019590820190600101613d73565b509495945050505050565b6020815260006119536020830184613d5f565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715613de857613de8613dad565b6040525050565b60006001600160401b03821115613e0857613e08613dad565b5060051b60200190565b600082601f830112613e2357600080fd5b81356020613e3082613def565b604051613e3d8282613dc3565b83815260059390931b8501820192828101915086841115613e5d57600080fd5b8286015b84811015613e785780358352918301918301613e61565b509695505050505050565b600082601f830112613e9457600080fd5b81356001600160401b03811115613ead57613ead613dad565b604051613ec4601f8301601f191660200182613dc3565b818152846020838601011115613ed957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215613f0e57600080fd5b8535613f1981613c0d565b94506020860135613f2981613c0d565b935060408601356001600160401b0380821115613f4557600080fd5b613f5189838a01613e12565b94506060880135915080821115613f6757600080fd5b613f7389838a01613e12565b93506080880135915080821115613f8957600080fd5b50613f9688828901613e83565b9150509295509295909350565b60008060408385031215613fb657600080fd5b823591506020830135613fc881613c0d565b809150509250929050565b600060208284031215613fe557600080fd5b813561195381613c0d565b6000806040838503121561400357600080fd5b823561400e81613c0d565b91506020830135613fc881613c81565b6000806040838503121561403157600080fd5b82356001600160401b038082111561404857600080fd5b818501915085601f83011261405c57600080fd5b8135602061406982613def565b6040516140768282613dc3565b83815260059390931b850182019282810191508984111561409657600080fd5b948201945b838610156140bd5785356140ae81613c0d565b8252948201949082019061409b565b965050860135925050808211156140d357600080fd5b506140e085828601613e12565b9150509250929050565b600080604083850312156140fd57600080fd5b823561410881613c0d565b915060208301356001600160401b0381111561412357600080fd5b6140e085828601613e83565b60008060006060848603121561414457600080fd5b833561414f81613c0d565b925060208401356001600160401b038082111561416b57600080fd5b61417787838801613e12565b9350604086013591508082111561418d57600080fd5b5061419a86828701613e12565b9150509250925092565b600080604083850312156141b757600080fd5b50508035926020909101359150565b8015158114610ad857600080fd5b600080604083850312156141e757600080fd5b82356141f281613c0d565b91506020830135613fc8816141c6565b6003811061421257614212613d2f565b9052565b602081526142306020820183516001600160c01b03169052565b6000602083015161424c60408401826001600160a01b03169052565b506040830151606083015260608301516080830152608083015161427b60a08401826001600160401b03169052565b5060a083015160c083015260c083015160e083015260e08301516101006142ac818501836001600160401b03169052565b84015190506101206142c68482018364ffffffffff169052565b84015190506101406142da84820183614202565b840151610160848101919091528401519050610180614303818501836001600160c01b03169052565b8401516101a084810152905061431d6101c0840182613cf0565b949350505050565b6000806040838503121561433857600080fd5b823561434381613c81565b915060208301356001600160401b0381168114613fc857600080fd5b6000806040838503121561437257600080fd5b823561437d81613c0d565b91506020830135613fc881613c0d565b600080600080600060a086880312156143a557600080fd5b85356143b081613c0d565b945060208601356143c081613c0d565b9350604086013592506060860135915060808601356001600160401b038111156143e957600080fd5b613f9688828901613e83565b6020808252600f908201526e125b9d985b1a590819dc9bdd5c1259608a1b604082015260600190565b60006020828403121561443057600080fd5b8151611953816141c6565b6020808252601590820152744d757365756d206d7573742062652061637469766560581b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176108015761080161446a565b600181811c908216806144ab57607f821691505b602082108103610c9057634e487b7160e01b600052602260045260246000fd5b6000602082840312156144dd57600080fd5b815161195381613c0d565b6000602082840312156144fa57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000600182016145295761452961446a565b5060010190565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006001600160c01b038281166002600160c01b0319810161463a5761463a61446a565b6001019392505050565b60008261466157634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156108015761080161446a565b6001600160401b0382811682821603908082111561192c5761192c61446a565b6001600160401b0381811683821601908082111561192c5761192c61446a565b600080600080600060a086880312156146d157600080fd5b85516146dc816141c6565b6020870151604088015191965094506146f481613c0d565b60608701516080880151919450925061470c81613c0d565b809150509295509295909350565b60006020828403121561472c57600080fd5b815161195381613c81565b818103818111156108015761080161446a565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006148346040830185613d5f565b8281036020840152613bd48185613d5f565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906148fe90830186613d5f565b82810360608401526149108186613d5f565b905082810360808401526149248185613cf0565b98975050505050505050565b60006020828403121561494257600080fd5b815161195381613c4e565b600060033d11156115a15760046000803e5060005160e01c90565b600060443d10156149765790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156149a557505050505090565b82850191508151818111156149bd5750505050505090565b843d87010160208285010111156149d75750505050505090565b6149e660208286010187613dc3565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614a71816017850160208801613ccc565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614aa2816028840160208801613ccc565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614ae890830184613cf0565b979650505050505050565b600081614b0257614b0261446a565b506000190190565b60008251614b1c818460208701613ccc565b9190910192915050565b601f82111561116e57600081815260208120601f850160051c81016020861015614b4d5750805b601f850160051c820191505b81811015612e4e57828155600101614b59565b81516001600160401b03811115614b8557614b85613dad565b614b9981614b938454614497565b84614b26565b602080601f831160018114614bce5760008415614bb65750858301515b600019600386901b1c1916600185901b178555612e4e565b600085815260208120601f198616915b82811015614bfd57888601518255948401946001909101908401614bde565b5085821015614c1b5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe850d585eb7f024ccee5e68e55f2c26cc72e1e6ee456acf62135757a5eb9d4a10360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a715d55fe810ac8f169b9c4286ed7cf864c553b793de1ce75f216c3cfb90949264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "buy(uint192)": {
        "details": "Can be tried as long as the group is OPEN"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "CURATOR_ROLE": {
        "details": "can create and curate the active group"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MIN_RESERVE_PRICE_BPS()": {
        "notice": "Arithmetic constants"
      },
      "TICKET_SUPPLY_PER_GROUP()": {
        "notice": "Business logic constants"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 804,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 807,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4065,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4448,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1215,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1221,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1223,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 2430,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 786,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1101,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1116,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 1185,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9287,
        "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
        "label": "museum",
        "offset": 0,
        "slot": "351",
        "type": "t_contract(CryptoPunksMuseum)12136"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CryptoPunksMuseum)12136": {
        "encoding": "inplace",
        "label": "contract CryptoPunksMuseum",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "src/CryptoPunksGroupRegistry.sol:CryptoPunksGroupRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}